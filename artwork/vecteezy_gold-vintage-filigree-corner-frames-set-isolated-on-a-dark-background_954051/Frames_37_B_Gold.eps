%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: Frames_37_B_Gold.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: êŒêÏÅ@ïê
%%CreationDate: 3/23/20
%%BoundingBox: 0 0 794 595
%%HiResBoundingBox: 0 0 793.3208 594.9902
%%CropBox: 0 0 793.3208 594.9902
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 26766 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C454B2027204B2027204B2027204B2027204B2027204B2027204B2027%204B2027204B2027204B2027204B2027204B2027204B2027204B2027204B%2027204B2027204B2027204B2027204B2027204B2027204B2027204B2027%204B2027204B2027204B2027204B2027204B2027204B2027204B2027204B%2027204B2027204B20272020262026202620262026202620262026202620%262026202620262026202620262026202620262026202620262026202620%262026202620262026202620262026202620262026202620262026202620%262026202620262026202620262026202620262026202620262026202620%2620262026202620262026202620262026202626204B2026202720262027%202620272026204B202620202026204B2026204B20262027202620272026%2027202620272026204B2026204B2026204B2026204B2026202720262027%202620272026204B202620272026204B202620262026204B2026204B2026%202720202027202620272026204B2026204B2026204B2026204BFD04204B%264B204B264A204B264B2626FD0420F826514B20754BFD0420262020204B%264B204B264B204A20262026F8FD0520F8262626F8FD0420262020204B20%4A204A20262020264B20202026264B2020202620754B4BF8202026202020%26202020514B4B2020204AFD0420F8FD04204B202020262020202627204B%75A075A0757C75A07CA07CA0A075202726754BA0A07575752027204B2027%207575754B7675A0A0C97B7675767575202775A04B4B76767CA02026204B%2027204B4B754B7CA0C9A07675754B76207575754B752627207575A07575%204B2027204B20204BC8A0A075764B2775A0204B75764B272076757C4B27%2027204B202026204B4A4B204B264B264B4A51757CA74B20A075A075A075%754B26202020262026FD0420F82020264BA0754B4A4B757520A0754B7C4B%262675A0202020262026FD05204B4B4B4AA04B514B76754BF8204A752020%20514B7C7526202620262026204B75754A2026757575A076204B4B757526%4B754A752026202620264B202620272026202720262027204B4BA0A051A0%76A0A04BA0A0A04B4B2027204B2026204B2026204B204B75757B76752675%76754B767C4BC9A04B7B752026204B2026204B20262027204B75A07C4B75%7520757527754B4B7575A07CC9A026204B2026204BFD04204B7C4B5175A0%A0754BA02051754B204B7520F82720262020262020202620202026202020%26202020A77575757B754B75A076A775A07520202620202026FD04204BA0%2675F8754A2075A0207C7C2020A0757575FD042026202020262020202620%4B4B4BF8754A2075754BA075A05175A0A07CA026202026202020262020F8%754B20F84A75A0A076754BF84B75204A7C5176262020204B2027204B2027%204B2027204B202720274BA07575754B75A07CC9C9CFA675204B2027204B%2027204B204BA075202675512075A02726C9754B7C7575762027204B2027%204B2027204B204B202720204BA04B4B4B764B7575767C7651765127204B%2027204B2027204B2027204B204B76C9A7A0764B207676A0A0A076A14B26%20202620262026202620262026202620262020204B4A4A207575A7A7CEA0%4BF82620262026202620262026204B75754B4B4A754BA076202076754B20%7B26202026202620262026202620262026202620267551F820F8204A514A%75754B204B2026202620262026202620262026202620204BA0A0A7754B20%A0A04BF84A7575202626204B2026204B2026204B2026204B202620272026%202720754BA07CA67B4B2026204B2026204B2026204B204A264B4BA075A0%51A77C4B202020764B20204B2026204B2026204B2026204B2026204B2075%754B264B51A0A05151A72620204B2026204B2026204B2026204B2026204B%20204AA0A0A0754B4A7CA04B4BA02627FD04202620202026202020262020%202620202026FD05207C75A075A04AFD04202620202026202020262020F8%4B7526F820207675764B7C754B20202026202020262020202620202026FD%05207551755175757C267575512020202620202026202020262020202620%20202675A07575757C4B51F875A04BF820202627204B2027204B2027204B%2027204B2027204B2027204B207575A075754A4B2027204B2027204B2027%204B2027204B2026204B2027204B267676757576204B2027204B2027204B%2027204B2027204B202626754B2720A04A2676C97CA04A272027204B2027%204B2027204B2027204B20514B757CA7A7A175272075A04B204B20202620%262026202620262026202620262026202620262020515175754B26202620%262026202620262026202620262026202620262026202075A04BA0752020%262026202620262026202620262026202620202026204B752620A020264B%75202620262026202620262026202620262026202675A6A7A07BA07526F8%75752020264B2026204B2026204B2026204B2026204B2026204B20262076%FD04752026204B2026204B2026204B2026204B2026204B2026204B20204B%A07575514B4B26204B2026204B2026204B2026204B2026204B2026204B75%76202776C97520754B204B2026204B2026204B2026204B2026202720A0A7%A77CA075A0A0A74B76202620202620202026202020262020202620202026%20202026202020A04B26F826202020262020202620202026202020262020%20262020202675A04A754B4B7CA020202026202020262020202620202026%20202026202020767C4BF84B754B207C2020202620202026202020262020%20262020204B4A5175A67575757C7C4B4B4B20204B2027204B2027204B20%27204B2027204B2027204B202720274A767551204B204B2027204B202720%4B2027204B2027204B2027204B204B4A4B26A07C752627204B2027204B20%27204B2027204B2027204B202720274BA7A1A0512020A07520204B202720%4B2027204B2027204B2027204B20262051A04B4A7C755120512627202026%2026202620262026202620262026202620262026202620202075754B2026%2026202620262026202620262026202620262026202620754B7C51A14B20%2026202620262026202620262026202620262026202620202075A0A075A0%754B20262026202620262026202620262026202620262020204B20204B7C%A076F826202626204B2026204B2026204B2026204B2026204B2026204B20%26204B757675272026204B2026204B2026204B2026204B2026204B202620%75754A51A175A0204B2026204B2026204B2026204B2026204B2026204B20%26202720264BA0A07520272026204B2026204B2026204B2026204B202620%4B2026204B202675A0A7A02027FD04202620202026202020262020202620%202026202020262020F84B75762026202020262020202620202026202020%262020202620204B7575A74B757520202620202026202020262020202620%20202620202026202020262020F84B4B51F8262020202620202026202020%26202020262020202620202026202675A0A776F82627204B2027204B2027%204B2027204B2027204B2027204B2027204B2075764B2027204B2027204B%2027204B2027204B2027204B2027204B7C762675A076204B2027204B2027%204B2027204B2027204B2027204B2027204B20272076A04B4B4B2027204B%2027204B2027204B2027204B2027204B2027204B204B204BA075204B2020%262026202620262026202620262026202620262026202620262020517C20%2620262026202620262026202620262026202620262026204B75754BA075%262026202620262026202620262026202620262026202620262026202075%754B75202620262026202620262026202620262026202620262026202620%20F8A7762020264B2026204B2026204B2026204B2026204B2026204B2026%204B202620767C27204B2026204B2026204B2026204B2026204B2026204B%2026202620204BA02026204B2026204B2026204B2026204B2026204B2026%204B2026204B204B75764B20204B2026204B2026204B2026204B2026204B%2026204B2026202726A0767C4B2620202620202026202020262020202620%20202620202026202020262020517C202020262020202620202026202020%2620202026202020262020202620204B4A20202026202020262020202620%20202620202026202020262020202620204B75F820202620202026202020%262020202620202026202020262020F876A7267576F8204B2027204B2027%204B2027204B2027204B2027204B2027204B2027207C7C4B204B2027204B%2027204B2027204B2027204B2027204B2027204B202720762627204B2027%204B2027204B2027204B2027204B2027204B2027204B202720A07520204B%2027204B2027204B2027204B2027204B2027204B2027204B264B20A07520%202026202620262026202620262026202620262026202620262026202075%A02020202620262026202620262026202620262026202620262026202620%20514B202620262026202620262026202620262026202620262026202620%2620207575F8262026202620262026202620262026202620262026202620%26202620269F7C202026204B2026204B2026204B2026204B2026204B2026%204B2026204B207C754B2026204B2026204B2026204B2026204B2026204B%2026204B2026204B207626272026204B2026204B2026204B2026204B2026%204B2026204B2026204B207551202026204B2026204B2026204B2026204B%2026204B2026204B202620264BA075FD0520262020202620202026202020%262020202620202026FD0420757620262020202620202026202020262020%2026202020262020202620202026754A2026202020262020202620202026%202020262020202620202026FD04204B75F8262020202620202026202020%262020202620202026202020262020F84B754BF82627204B2027204B2027%204B2027204B2027204B2027204B2027204B2076754B2027204B2027204B%2027204B2027204B2027204B2027204B2027204B2076264B2027204B2027%204B2027204B2027204B2027204B2027204B2027204B205175272027204B%2027204B2027204B2027204B2027204B2027204B2027204B2027204B2020%262026202620262026202620262026202620262026202620262020757520%262026202620262026202620262026202620262026202620262026202651%4A2026202620262026202620262026202620262026202620262026202620%262676F82620262026202620262026202620262026202620262026202620%262026202620264B2026204B2026204B2026204B2026204B2026204B2026%204B2026204B4B26204B2026204B2026204B2026204B2026204B2026204B%2026204B2026204B2026204B2026204B2026204B2026204B2026204B2026%204B2026204B2026204B7520204B2026204B2026204B2026204B2026204B%2026204B2026204B2026204B202620202620202026202020262020202620%20202620202026202020262020F8FD042026202020262020202620202026%202020262020202620202026202020262020202620202026202020262020%20262020202620202026202020262020204B202020262020202620202026%202020262020202620202026202020262020202620204B2027204B202720%4B2027204B2027204B2027204B2027204B2027204B2027204B2027204B20%27204B2027204B2027204B2027204B2027204B2027204B2027204B202720%4B2027204B2027204B2027204B2027204B2027204B2027204B204B204B20%27204B2027204B2027204B2027204B2027204B2027204B2027204B202720%202620262026202620262026202620262026202620262026202620262026%202620262026202620262026202620262026202620262026202020262026%202620262026202620262026202620262026202620262026202620262026%202620262026202620262026202620262026202620262026202620262026%202620262026202626204B2026204B2026204B2026204B2026204B202020%26202620272026204B202620262020202720262027202020272026204B20%2620512626204B2026204B20262027202620272026204B2026204B202620%272026204B2026204B2026204B2026204B2026204B2026204B2026204B20%26204B2026204B202620272026204BFD0720F8202020F820F820F8202020%F84B4B754A204A4BFD052026204B4A514A4B4A4B4A4B4A4B4B4B26262020%F82020205175F82020262020202620202026202620262026FD072026FD04%20F8FD0520F8202026202020262020F8FD11204B754A752620202627204B%4B754B754B754B75517651754B754B514B764B764B274B754B4B204B204B%4B754B754B754B515176757C7CC9205175764B272075754B4B4B2027204B%2027207675754B7676A0FD044B20274A75757C754B2076754B4B51757626%4B2027204B20514B754B514B754B514B514B514B754B4B20274BA075514B%4B204BFD0420514B75757B75754BA0A0C976764B4A4A7575752075207575%C97C202026FD09204B4A7575A0A07C20757576762626A04B757C51202620%2620264A754B7526264B264A7C20202675514B2075754B4B764B4B75A0A0%75F826202620264B754B754B754B754B514A754B514B764A2075A04B2026%26207620264B20264A754B75265151A075514B767CA075A075274B75754B%75A7A7A12026204B2026204B2026204B20202026204BA77C7520F8A07C4B%7576A0A77C272026204B202020274BA04A762675754B207575752020F851%752620754B7575A14B26204B2026207551754B754B754B754B514B754B75%757C4BA04B5176767526754B2020262020F8202020F8202020F820F82620%754A514B4B204B4BA0A0A07575202020262020202620202026FD04204AA7%4B754A4B26A04A7575A07C76FD052026FD05207C757C7575757C75752051%4A20F87526204A757576754B2020202620264B754B754B754B754B754B75%4B754B7C51A04B4B7C204B5120A020204B2027204B2027204B2027204B20%27204B2027267575764BA0A6A04B517575204B2027204B2027204B202720%4B2076A04B20769F767C5175A0A0A77C762027204B2027204B20264AA075%4B204B4B752027517620274B75207C75764B4B2627204B20272027202020%27202020272026202720204B4BA04BA04B4BA120A0A04B20202620262026%2026202620262026202620204B75204B51A075767576264B4A2020262026%2026202620262026202626A74A20209F757C75A07CA07CA07CA020202026%202620262020204BFD04204B4BF820514B204B4B7575764B767526202620%262026202620262026202620262026202620514BA07CA776A726757B4B20%2626204B2026204B2026204B2026204B2026204B4B757CA0A67C2076767C%75262026204B2026204B2026204B2026202675A04B7675A04B7675754A27%20274B4B2026204B2026204B2026204B2026204B7576757620204B7C754B%F82020A04B262026204B2026204B2026204B2026204B2026202726A04A76%A77620A0A64BF84BFD042026202020262020202620202026FD0520A0A0A0%4A4B2076F87526FD0420262020202620202026FD04204A754A26204B7576%4B76752620202026202020262020202620202026202020264AA0754B2076%75764B764B4A4A4B202620202026202020262020202620202026FD042075%76F87C7CA17C4B2020202627204B2027204B2027204B2027204B2027204B%202751A0754B75277576754B2027204B2027204B2027204B2027204B2026%202720264AA0A075207C7C26204B2027204B2027204B2027204B2027204B%204B75A07576A076264B2676A04B204B2027204B2027204B2027204B2027%204B2027204B2051A0A1767C76A02027204B202026202620262026202620%26202620262026202620204A75F8754B7575752026202620262026202620%26202620262026202620262075757C7520F8A72620202620262026202620%262026202620262026204A75764B4BF8202020F8517C2620262026202620%26202620262026202620262026202620264B765176A0A0512020264B2026%204B2026204B2026204B2026204B2026204B20265176267C754B2626204B%2026204B2026204B2026204B2026204B2026204B754B20754B7CA0512026%204B2026204B2026204B2026204B20262027207C4B75754B26762626F87C%7520204B2026204B2026204B2026204B2026204B2026204B2020204B4BA0%4B7C20262020262020202620202026202020262020202620202026202620%2075754A262020202620202026202020262020202620202026202020764A%204BC97C754AFD0420262020202620202026202020262020204B75754BA7%7CA04BA020204B76F8202026202020262020202620202026202020262020%20262020204B754B512020204B2027204B2027204B2027204B2027204B20%27204B2027204B20764B752627204B2027204B2027204B2027204B202720%4B202720274BA04B517575204B2027204B2027204B2027204B2027204B20%27204B204B205176A77520757526767520204B2027204B2027204B202720%4B2027204B2027204B202720274AA04B7C20272020262026202620262026%202620262026202620262026202620204B754A4A20262026202620262026%20262026202620262026202620204BFD0475762626202620262026202620%262026202620262026202620262020517CF84B7C26755120262026202620%26202620262026202620262026202620262026204B754B5120202626204B%2026204B2026204B2026204B2026204B2026204B2026204B755120272026%204B2026204B2026204B2026204B2026204B20262026204AF875A0A02027%2026204B2026204B2026204B2026204B2026204B2026204BA07576767576%204B2026204B2026204B2026204B2026204B2026204B2026204B202626A0%4B76204BFD04202620202026202020262020202620202026202020262020%F87575202026202020262020202620202026202020262020202620202026%20202075754A202620202026202020262020202620202026202020262020%20264BA05151202020262020202620202026202020262020202620202026%20202026204B75515120202627204B2027204B2027204B2027204B202720%4B2027204B2027202775A0204B2027204B2027204B2027204B2027204B20%27204B2027204B2027204B757C264B2027204B2027204B2027204B202720%4B2027204B2027204B20207575204B204B2027204B2027204B2027204B20%27204B2027204B2027204B202726A04B76204B2020262026202620262026%202620262026202620262026202620202076762620262026202620262026%202620262026202620262026202620262020207C754A2026202620262026%20262026202620262026202620262026202620517B754A20202620262026%2026202620262026202620262026202620262026204B7551752020264B20%26204B2026204B2026204B2026204B2026204B2026204B20517C7C202620%4B2026204B2026204B2026204B2026204B2026204B2026204B204B757C26%26204B2026204B2026204B2026204B2026204B2026204B2026202075754A%4B2026204B2026204B2026204B2026204B2026204B2026204B202620274A%7C4B7620262020262020202620202026202020262020202620202026FD04%204A7C4B4A20202026202020262020202620202026202020262020202620%2020262026514B2020202620202026202020262020202620202026202020%26202020A04B26F826202020262020202620202026202020262020202620%2020262020204B754B4B2020204B2027204B2027204B2027204B2027204B%2027204B2027204B20267CA02027204B2027204B2027204B2027204B2027%204B2027204B2027204B2027207C4A27204B2027204B2027204B2027204B%2027204B2027204B20272076755126767520204B2027204B2027204B2027%204B2027204B2027204B202720274AA04B76202720202620262026202620%2620262026202620262026202620262026207CA026202620262026202620%262026202620262026202620262026202620262020514B20262026202620%26202620262026202620262026202620262020207620204B75F826202620%262026202620262026202620262026202620262026204B754B4B20202626%204B2026204B2026204B2026204B2026204B2026204B2026204B75A02027%2026204B2026204B2026204B2026204B2026204B2026204B2026204B2076%26272026204B2026204B2026204B2026204B2026204B2026204B20262676%4B4B4B262026204B2026204B2026204B2026204B2026204B2026204B2026%26A04B75204BFD0420262020202620202026202020262020202620202026%202020A07526202620202026202020262020202620202026202020262020%202620202026514A20262020202620202026202020262020202620202026%202020262020207C4A75F826202020262020202620202026202020262020%202620202026204A754B4B20202627204B2027204B2027204B2027204B20%27204B2027204B2027204B5175204B2027204B2027204B2027204B202720%4B2027204B2027204B2027204B2076264B2027204B2027204B2027204B20%27204B2027204B2027204B2027202751A04B272027204B2027204B202720%4B2027204B2027204B2027204B202726A04B75204B202026202620262026%20262026202620262026202620262026202020754B262026202620262026%20262026202620262026202620262026202620262026514A202620262026%20262026202620262026202620262026202620262026204B7651F8262026%202620262026202620262026202620262026202620262026264B26202026%4B2026204B2026204B2026204B2026204B2026204B2026204B2026204B20%26204B2026204B2026204B2026204B2026204B2026204B2026204B202620%752626204B2026204B2026204B2026204B2026204B2026204B2026204B20%2620767520204B2026204B2026204B2026204B2026204B2026204B202620%4B2026202720262020262020202620202026202020262020202620202026%202020262020202620202026202020262020202620202026202020262020%20262020202620204A4A2020202620202026202020262020202620202026%202020262020202620204A51202020262020202620202026202020262020%202620202026202020262020202620204B2027204B2027204B2027204B20%27204B2027204B2027204B2027204B2027204B2027204B2027204B202720%4B2027204B2027204B2027204B2027204B2027204B2027204B2027204B20%27204B2027204B2027204B2027204B2027204B204B204B2027204B202720%4B2027204B2027204B2027204B2027204B2027204B202720202620262026%202620262026202620262026202620262020202620262026202620262026%202620262026202620262026202620262026202620262026202620262026%202620262026202620262026202620262026202620262026202620262026%202620262026202620262026202620262026202620262026202620262026%202626204B2026202720262027202620272026204B202620754B26204B20%26204B2026204B2026204B2026204B2026204B2026204B20262026202620%4B2026204B2026204B20262027202620272020204B202620272026204B20%2620272026204B2026204B2026204B2026204B2026204B2026204B202620%4B2026204B2026204BFD042026264B204B204A204A204A204B2026F82020%4B4B754B20202620202026202020262020F8202020F8202020F8202020F8%2020264B752020202620202026202020262026204B264A204A4B26FD0520%262020F8202026F8FD042026202020262020202620202026202020262020%F8FD0520F8FD0620262720274BA075A0757C75A07CA07CA0A07C7551264B%20274B7620272027204B2027204B202720514B514B754B754B7675765176%754B757675752027204B204B2027204B20274A76517CA0A076A0754B75A0%4BA07551267575A07CA05126204B2027204B2027204B264B264B20202026%204B4B764B4B20204B754B754B4B204B202026204A264A204B204B204B26%4B20517C4B4B7CA076F84B754B20262026202620262026204B4B754B754B%76767C517676A0754B4B75F8204B2020754B4B2026202620262020F82020%264B7620A04B7526754A76767C75754A4B51A77C2020262020204B264B4B%754B754B76757551A77C754B75754B51A0757CA0A7202020264B20262027%20262027202620272026F8A0A075204BA04B4B767CA74B262026204B2026%204B204B204B204B204B4B754B4B4B7C264B4B7575754B7620754B26204B%2026204B20262027204B4B4B75514BA07526207C75202026202020A7A020%204B20264AA075754A4B4A5175A7A7C9A07C4B75207575A07576A0C9A77C%2026202026202020262020202620202026202676764B512075754B75A6A6%75F8FD0420262020202620202026202020264A20F82026A04B75204B207C%20264B2620202026202020262020202620752020267575754B7C75FD0420%4B2020F8A14B202026202020517575757C757C514B2020204B20204B7526%4B75A7A7A0262020204B2027204B2027204B2027204B202720A74B4B75A0%75A075A0A0A77CA04B27204B2027204B2027204B2027204B202620272627%4BA04B7620767551754B2027204B2027204B2027204B20264BA04B274B76%75A0755120264BA1A6C975204B4B204B2027204B2026204B264B20262027%204B20272051757575A7A1A1A07520272020262026202620262026202620%262020517C204B757675A0757C75764B754B202026202620262026202620%262026202020767C4B51204B7CA0A0754B4B762020202620262026202620%2620204BA07575517575752020207C4A264BA74B20202620262026202620%20202620202026202620262026204B75A0A075A0752026202626204B2026%204B2026204B2026204B20264B767575754B7CA0514B20204B752026204B%2026204B2026204B2026204B207C4B4B7575202620764B20755175A02026%204B2026204B2026204B202020FD044B764B4B20754B2020204BA0202720%26204B2026204B2026204B2026204B2026204B202620757CA020A64B2020%4BFD042026202020262020202620202026FD05204A4B764B4B757C204A20%26202020262020202620202026FD04204BA04B75FD04204A75F87C4B2075%26202020262020202620202026FD0420F87575754B204A7C4B4B2020754A%202620202026202020262020202620202026202020262026204B75754B4B%2020202627204B2027204B2027204B2027204B2027204B2027207576A04B%27A075204B2027204B2027204B2027204B2027204B20264B752027204B20%26757C4B754B762027204B2027204B2027204B2027204B20264AA051A020%27A0CFA027207C204B2027204B2027204B2027204B2027204B2027204B20%27204B204B4B4B754B204B20202620262026202620262026202620262026%202620204B754B75F87C5120202620262026202620262026202620262026%202020262026202620264B764B5120262026202620262026202620262026%202620202026757CF8204B4BF87575202026202620262026202620262026%20262026202620262026202620202675262020264B2026204B2026204B20%26204B2026204B2026204B20752026517676762026204B2026204B202620%4B2026204B2026204B2026204B204B4B75757520274B4A204B2026204B20%26204B2026204B2026204B2026204BA0A7514B4BA07C4B2026204B202620%4B2026204B2026204B2026204B2026204B202620274A754B4B2026202026%20202026202020262020202620202026FD0420267520767C4B754B202020%2620202026202020262020202620202026202020264B514A26517C267620%20202620202026202020262020202620202026FD042051A7A7A075202051%2020202620202026202020262020202620202026202020262020204B4B75%FD04204B2027204B2027204B2027204B2027204B2027204B20264BA07575%757C4B26204B2027204B2027204B2027204B2027204B202720274B7C2076%4B2076A07520204B2027204B2027204B2027204B2027204B2027204B2020%20A7512626A1A027204B2027204B2027204B2027204B2027204B2027204B%202720274A7C764B20272020262026202620262026202620262026202620%2620262020204B204B757620262026202620262026202620262026202620%262026202675754B4B204B7575F826202620262026202620262026202620%2620262026202620204BA0A076754B202620262026202620262026202620%262026202620262026202620267576F826202626204B2026204B2026204B%2026204B2026204B2026204B20262027207651262026204B2026204B2026%204B2026204B2026204B2026204B4B4B20264B764B262026204B2026204B%2026204B2026204B2026204B2026204B204B76767C75F84B2026204B2026%204B2026204B2026204B2026204B2026204B202626A04B20204BFD042026%2020202620202026202020262020202620202026202020267575F8262020%202620202026202020262020202620202026FD0720754B75202620202026%20202026202020262020202620202026FD04204BA7204B7575F826202020%262020202620202026202020262020202620202026F875A04B2020202627%204B2027204B2027204B2027204B2027204B2027204B2027204B20765127%2027204B2027204B2027204B2027204B2027204B2027204B2027204B517C%4B4B2027204B2027204B2027204B2027204B2027204B2027204B204B51A0%A075754B2027204B2027204B2027204B2027204B2027204B2027204B2026%7CC97520204B202026202620262026202620262026202620262026202620%26202620267575F826202620262026202620262026202620262026202620%262026202620267551202620262026202620262026202620262026202620%2620262026F8754A75514B4A202026202620262026202620262026202620%2620262026202620A0757C202020264B2026204B2026204B2026204B2026%204B2026204B2026204B202620767520204B2026204B2026204B2026204B%2026204B2026204B2026204B202620755126204B2026204B2026204B2026%204B2026204B2026204B20262026754BF820514B204B2026204B2026204B%2026204B2026204B2026204B20262051A74B762720262020262020202620%2020262020202620202026202020262020202620207575F8202026202020%26202020262020202620202026202020262020202620204B762020202620%202026202020262020202620202026202020262020F84B75754B75202020%26202020262020202620202026202020262020202620204BA72076202620%204B2027204B2027204B2027204B2027204B2027204B2027204B202720A0%7520204B2027204B2027204B2027204B2027204B2027204B2027204B2027%20767527204B2027204B2027204B2027204B2027204B2027204B2027204B%207575767527204B2027204B2027204B2027204B2027204B2027204B2027%2076A74B754B202720202620262026202620262026202620262026202620%262026202620267575202620262026202620262026202620262026202620%2620262026202620204B7620202026202620262026202620262026202620%26202620262026202620204BA02020202620262026202620262026202620%26202620262026202020C94A752026202626204B2026204B2026204B2026%204B2026204B2026204B2026202720A04B262026204B2026204B2026204B%2026204B2026204B2026204B2026204B207651262026204B2026204B2026%204B2026204B2026204B2026204B2026204B204B754B2026204B2026204B%2026204B2026204B2026204B2026204B20267C764B20204BFD0420262020%202620202026202020262020202620202026202020267575F82620202026%2020202620202026202020262020202620202026FD04207575F826202020%262020202620202026202020262020202620202026202020262075202620%2020262020202620202026202020262020202620202026F87575FD042026%27204B2027204B2027204B2027204B2027204B2027204B2027204B20A051%272027204B2027204B2027204B2027204B2027204B2027204B2027204B20%754B272027204B2027204B2027204B2027204B2027204B2027204B202720%4B204B754B2027204B2027204B2027204B2027204B2027204B2027204B20%2720A02627204B2020262026202620262026202620262026202620262026%2026202620264B4B20262026202620262026202620262026202620262026%202620262026202620202026202620262026202620262026202620262026%202620262026202620262026202620262026202620262026202620262026%20262026202620262020264B202620264B2026204B2026204B2026204B20%26204B2026204B2026204B202620262026204B2026204B2026204B202620%4B2026204B2026204B2026204B202620272026204B2026204B2026204B20%26204B2026204B2026204B2026204B2026204B2026204B2026204B202620%4B2026204B2026204B2026204B2026204B2026204B202620202620202026%202020262020202620202026202020262020202620202026202020262020%202620202026202020262020202620202026202020262020202620202026%202020262020202620202026202020262020202620202026202020262020%202620202026202020262020202620202026202020262020202620202026%2020%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Frames_37_B</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2020-03-23T19:10:47+09:00</xap:CreateDate>
         <xap:ModifyDate>2020-03-23T19:10:47+09:00</xap:ModifyDate>
         <xap:MetadataDate>2020-03-23T19:10:47+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgECWAJYAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABACWAAAAAEA&#xA;AQJYAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4AiO7BUUsx6KBUn6BmC7&#xA;ZVNjejrbyf8AAN/TGwmnfU7z/fEn/AN/TGwtNSWtzGvOSF0X+ZlIH3nG0KWFURbadqF1DNNbWs08&#xA;NuOU8scbOsYPd2UEL075EyA5ppWl0PVYtLTVJICllIwVJSQK1rQha8qbdaYBkF11WtrQOTQ7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FW2Vl+0CKgEV8D0wK2scjhiilgoqxAJoPfFVuFUXDpOpzWTX0NtJJaI&#xA;7RvMilgGVPUYGnSib5EyANJpCZJDsVVLe1ubh+FvE8z/AMsalj9wrgJpLp7a4t34TxPC/wDLIpU/&#xA;ccQbVZxbiGoeJJAPao6/rxQ1hV2KuxV2KonTtQudOvob21IWeBuUZIBFaU6HIyjYopBpPZPzF80S&#xA;H4pk+iNRlX5eLLjK+H8yfM0JqjW9fFoIz+sYfAigyKc6T+bWqNJw1LjEQP3V1boQtf5Li2B9GaJv&#xA;ssOPIDcGuQng7lHmnQ8peStT8w6T5lt444PK+sxSGSxZzHFb6nGhrayOKcEZviTcV6DamQlkkIkf&#xA;xD7kAJramDRNHWaFbWK6kktU1G1swBCTcsI2iYB5FLRc+QYEEilduuLORlKt+tfBuAoNeYvI13rm&#xA;iw6dpqv9ZTj9UtUKxwIFoOczNWipGCqjxPftPBko2WEy8q1XyX5m0rT/ANJX1hJBp7SejHcuOKud&#xA;6FA1GKtxqrUoczxkiTV7taW2Op6lYO72N3NaPIOLtBI0ZZa1oSpFRkpRB5hNoy382+abeQSw6veo&#xA;4Nai4l/H4t8j4Ue4LbPPIH5h+ctV1I6RqepSXmntFJNM0x5TqkSFisUlQ1XNF3rQdKZjanDGrplD&#xA;mh7a6E4s44NYjsbnU4mms9PtLeE2cIBosMo3Zm2PxMOtfpZbXtYHzZBU8paPYavrNtqaW0NvqGmX&#xA;Ii1Wx4gQVbkkc6qdgFkoW+Vfm5JECr2PJG3NEXF1Fc6PqfnFlgW6OrxaJaXbwiZbK2VDI116ZVuc&#xA;jV+0VJr9mm2TjGqj5WwJ3TKRLK7traK61pPNvljUbo6abye39C8s7xlrHJE7cn4sfE0oenjXORF0&#xA;OGQF+8JiHkGpWT2Oo3Vk7B3tZpIWYdCY2Kk/hmZCXEAe9BC20vr2zkMlpcSW0jLwZ4nZGKkg0JUj&#xA;aoGEgHmtpvpvnjzXp0iyWuoyB13HqBJh9IlVwfpyBxR7lJLIrL8zNW1nWLNPMU8AtI+ZVhBGkRuO&#xA;B9CScIu6pLxbYU75TPAACY80xKtKdDu9SsdIuNRn1JNTVvrTTzR3DW9yCDHJDJHyVPUIZSob7NK7&#xA;7CPqAMgKpntyQck+o6vqWoWmnXi6NpOkK5jiiJjXhGxXk3EqSTSpJOGhEAkcRKObdx5N1XXdP0a9&#xA;hgWK/u4pPrrsOAbjIEt2Kgf3kqk0/mpXCMoiSOiKtmXl7RdRudOuIdQvUuLWMzQzMgPGZEd0UQen&#xA;/wAV14BAagjj2yiZHFsGV7MN/NTyhDomoQX1rcw3NrqFfhtbdbWGFo1UemIxLKwNPtcqGta5lYcl&#xA;7dzWwXL0Mq8q/mHqflrS7mwsraCQ3Enq+vKGLA8QtDxZaig2zHy6cTNllGVJnH5l1S/0qXWNevUn&#xA;sBL6KaYkMLeo+xoeQqopv45WcQEuGI372XFtZZJ5TTyf5j0C60bgbfT+RkZHIM1jI3SdWr8cPI7t&#xA;+z+18JqIzEoyvr97ElKbryxrGhaZqsOsLbXE+juiRWElrGyy2xXadJ1CSgMtaMD+ya79JGYMhV7+&#xA;aY8km0yW20+3vPMGhwNNA0D2t3aNIVms2mpxlSRRyKgiit1yZsnhl/avLcLfMeja1qtvpF/DY3F5&#xA;qF3ZiW8aCF5CwDFY5H4A7so64cRAsdLRJiDo6OyOpV1JVlYUII2IIOXsWsKuxV2KuxVNNH8zazpM&#xA;E9taTA2V0P8ASbOZFmgkp0LRyBlqPHrlc8YlzSCiYPN+oLe2cs8cUlpYyetDp8SJBB6lNm4xqPiB&#xA;3qcicIo956p4nvf5f+eLVdNF9DpV1LbyuaXtzJBFLO4NG9KPkQQvQDkBtSuYOSIiaJUwMnn3556p&#xA;q2ozWV0dSNxo07P6NkyLE0MybMHA3cgGle30736UiyK3UxoPKMzWLsVRujave6PqcGo2TBbiAkry&#xA;FVIIKsrDwYGmQnASFFINJtaazpTa3DdWGnLY3csgVGkm520TyGhkEfBT8Na0L0GVmB4aJsMrFstt&#xA;p/JHlDW7i7TVrq+1BVaO5tPSSWC6WT+9jkI4CMN824mmxyoccxuKCyADoLW609L248i3Frr3lnV0&#xA;H17y/d8TNERVlSa3Z0kJjP2JYm+nJkj+LY97ClC2h1mC3hubzSl07RtKnN3baPYrLK8t3T4HmZnn&#xA;kXiKVaRhtsBlUyDsDZltZ7myIed3l1Ld3c91MQZriRpZCOnJ2LH8TmZGNCgwJUskh2KuxVUt7iW3&#xA;uIriE8ZYXWSNvBlNQfvGAixSs11uHUb+TTte0i5jtnuIAnpCZbdlfkzSIryGNX+NjUVr7UzFx0Li&#xA;WyW+6d+UNIv57q4vNc8xwRS2iNeyiOVL+dEgUhjJQvEigsKAt12pvjMj+EfoY2qpfagPJt5LJc34&#xA;u4LeK2s7e2Z4BJcOCZZP3Eas6QhRUljGar8VTTAIji2pMnmeq6teanLDJdu0ksESwepIzyOwUlqs&#xA;zliTVj8htmTGIHJiSgsmh2KuxVFaZqWoabfw3unzPBeQtWKROtelKdCD0IOxyJAI3V71ovmPU5tM&#xA;g/xbocFsoT0oqyBQY5BxMRtmBKq/Qx8wP5VXNfkIv0m2YgWFXWhHyn5ha/sLO5bTLuKd3sbqH07a&#xA;WzjiLzwmVpJHLcR8PJOtOuXCRnHev2rSN1PVdWvrW217yz5jvIvLNq8Ueq6baH6te6fDUKzNHDxE&#xA;sfHo+47HphjAR2I9X3sebAvO+s2+r62LqG4a84wxxSXskYiknZK/HIo/a40UnvTLcMSBukpBlzF2&#xA;KuxV2KuxV2KvVLLUobTQo7t7t4LG6sLS3gvI4hcLC8MZjuLd0Kvx5ykvWm5PtmBKJMqrcE/sLcDs&#xA;881/Ul1DU5p43keD4ViMpqxCIsfNv8p+AJzLxx4Q1yNlLssYuxV2KuxV2Kpr5d8r615hvBa6XbmZ&#xA;+SJI9QFT1DRSxPyPTK55BHmkB6SJtOVNIFq1xeW+lCO0EmnAtE81szeuGjLRD/SKcldu2+3fDINm&#xA;+vf9nybOjBPPeh6tpusG71G1SxfV+d9BZq6s8UUkjcVkA6HbMvFIEUOjWWOZah2KuxV2Koqz1XUr&#xA;JXS0uZIY5N5I1YhGI/mXociYg802ynT9PuI/Imq3toGla/hiN24oeK2943roKeHO2c+zZWT6gqfe&#xA;VtaWD8upE0zzPD5du7AXVze2aALeX1z1tlVyykx8AE+GtDWoyEx6txaGI+ari41Kw0rXbxFF/frN&#xA;HcyqoT1zbuFE7KoA5Ny4se5WvWuWY9iQOiSxzLUOxV2Ku6bjFXpX5RappI1MHXbyOMRypHYPcSVI&#xA;muKISEPsvxOxoo22rmJqIE8mV7PU/MGr6XLZwmUctJuZUttNW4WrXDFJQ1wyNQ0m9Qqq0+yK9GoM&#xA;SRN0OYTjHUvOIfJ8Ggtd+Z9H120gNmrvNoVyfjlgavODqecci/CpK+HcVzJGXiFEfFSKLzvzJZ2l&#xA;prVzFZE/UnKzWleohnRZYwfkjgZk4pEx35sSN0tyxDsVdirsVdirsVT3yjrT6dqSxyXRt7Geqzhk&#xA;9WGpFFMkdRVa/aoQafdlOWHEOW7KJRfn3RrKyu7W8s4RbR3yOZrRTySKeJykgjagrG3wunseg6Y4&#xA;ZEjdZBi+XMXYq7FXYq7FU98n2UN3qM63LyC0gtpbi4hiZkMqxjaOq+JbKc0qG3NlEPTPL2iHQLGC&#xA;81XTYLX9JahDpj6fHKZINQsrocWIjLu3KHnyWQUPbvmOZX1uh8lPc8r81QfVvMeo2guHuY7W4khh&#xA;mkYuxjjYqgLHuAKZlYpXEHvQUqyxDsVdirsVdiqfeVvO/mHyy0y6bKjWtyKXVlcRpNBKCpUhkcHq&#xA;pKkihptkJQEuassbzL+XfmnULN9Y0m706WGP0kstMEIsgB8R+CKJJwCanapGY8oZIj0kfFIYz58v&#xA;bi61aI8IItNjgVNJjtGLwC2BNOLEKS3KvLkAa9cswAAefVMmN5exdirsVdirsVTO68x6tc2NhZyT&#xA;H0dOLPbkE8ubuX5sSTVhWg8BlYxgEnvTb0vywPLnnXR3tdWpHJCKzTqQJbN229da9bdz9r+Q9fho&#xA;VxTGWOW39v7WRlbBPP3lHWfKvmBtL1WRZ5BFG9tcofhktwPTjYDqKBOND0p9OZWOQkNmF2xzLFdi&#xA;rsVdirsVdirsVZt+YMZTRvK9TVnsY3Ynqedvbt/HKMPX3/pKSwnL0OxV2KuxV2KozSNWvNK1CK+s&#xA;2CzRHYMOSsCKFWU9QRkZREhRSCyHSfOmlWWsw6hHoVrZsXHry27TMyIx/eGBJZHRGIO223QUyrJi&#xA;Mo1aYmigPPQth5s1A2yLHAzI0aqKCjRq1f8AZVrhwXwC1nzSHLmLsVdirsVdirsVZL5F8w2+iajP&#xA;LNIbdp4wkd2EaQIVdXo6IyOUbjRuLV6dq5RqMZkGUTSzzhH9XayhVXMc8b36XEiiP1vrTn40iDMY&#xA;4/3fwq2/fvjh3sn3fJMmO5ewdirsVdirsVdir0D8sNGvbBLjz7LPBBo+hiZJI5H+O4maAiO2WPuJ&#xA;GkVTXtXKcsgfT1KlIvPumxWeuiW2Vo7HUbeHULGFyWMUNynMRVO9I2LKPlhxSse7ZJY5lqHYq7FX&#xA;Yq7FXYq7FWdfmWynT/K4XoNLtPv+pWtfxyjCdz7/ANaejBcvQ7FXYq7FXYq7FXYqnvndSvmKSvVr&#xA;ezY/NrSJj+vK8fJJSLLEOxV2KuxV2KuxV2Ksn89Xk19Jod3LTlNpUHTp8EkkZ/4ZDlGCNWP6TKRt&#xA;jGXsXYq7FXYq7FXYqr2MK3F5BbSSCGKaVEeRvsqGbjyP+qDkSaFpDN/zlu7GbzFaW9oUZbOzSElC&#xA;DxCu3FDT+UfrzE0V8JJ6llNgOZrB2KuxV2KuxV2KuxVPvM3mC21a00mKJJEewtY7eUuBQmOGKKq0&#xA;J2/dd8px4zEm+pZEpDlzF2KuxV2KuxV2KuxVH65qY1PUWvAhj5Rwx8Ca/wBzCkXX34VyEI0KSUBk&#xA;0OxV2KuxV2KuxV2Kpxrt9Dc6b5fjjcPJaae8E+9SH+vXUig/885F+jIRG59/6AqT5NXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq2qs7BEBZmNFUbkk9ABgVGXmiazZI0l5YXFvGjcWeWJ0UMeg5EUrkRMHkU0&#xA;VK70+9tBGbmFohKOUZYdRsfv3G2ESB5KQh8khFR6TqssayxWc8kTCqusTlSPYgUyPEO9NFs6Rqo6&#xA;2U4/55P/AEx4h3rRcNH1c9LG4Pyif+mPEO9aW3Gl6nbRercWk0MVaepJG6rU9qkAYQQhDYVRmnaT&#xA;dagl41txLWUDXUkZJDNGjKHKbUJXlU+2RlICrSBaDySHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqmCeX9df0fT0+4kNwglhVI2cshNAwCgmhptkPEj3pooGSOSKRopVKSISrowIZWBoQQehGSQr&#xA;afPDBewyzCsSMDIAkch496JKGQ/7IYJDZIZZB5l8pRQOXsPrMpccVmtLRfgoa09FYx18coOOZ6/a&#xA;WYkEXpmv+RDPLdTweikSkrp8lnaSJIeJA4uI+f2qbFh8+2DgmNv0lBITCTzl+W+pJBbfoz9BzCok&#xA;vYbCwnhOxoXikjmkG/dG+jDwTHW/iwQdva6FPIk0WuWsoMyi0igsrSxuvURWkUMeHwVdFQOpK7/R&#xA;kDKQNcJ+ZIbAEKdS06XWEFwJtKaflb32kzoxt2jmkZm9NlHJfjkLqGXY9DTDwnh237it7sy/LfyJ&#xA;p0unJN5hhFxaQzXbFJFZ/UeXjAgRVDMzcYXYBfi3UjIZchv0+TEvO/zF0OHSvM92LKxurHSZn5WC&#xA;3dtNakpQcgiz/GQrbVP3DpmVjlY82KRR6tqscaxR3k6RqKKiyuFA9gDkuEdybLZ1bVT1vZz/AM9X&#xA;/rjwjuWymFh5u1K0hEZRbkhuRkmkuORH8pKSptkDiBTxPSPInmmy85rc+R7/AEpLO21SCR5b+2mm&#xA;f0pbZfVjmKXDy0AKUIDb1ynJDg9V8mJY9dP9T0nTYrbSoNda5ja4eQWqIqwoVUUS3VXU8XXk7GtT&#xA;1OAbyO/DTYeSNsdB07TPMWk6po/P9E67ps1xHbSEs0TgFJoC37aq9OJOOSdxIPMEIhzTqP8ALnyt&#xA;L5XkN88VpeToTp9y5KsXWNUjPBAzyAhAzKFJ3PfK45pcW3JZPGZoZYZXilRo5EJV0YFWBHYg7jM9&#xA;gj9G1660oTrBHHKtxx9QScx9itKGN0P7WRnDiSDTKdE1u/1QtBo101jrlK29hII54Lojf04WmVmS&#xA;U/sq1eXStcqMOHnuEkpqNIub7zAur62LZ9JFrCsN1MII4DIxjEqPEpj4yHlKtONVanhlPEBGo3ds&#xA;63SLRvIeoW08t3rVvGltbpyiWWZBDIxOxd0LfAo3Pj0yyeoB2jzQId6H1DzPqsEzNaRQz6KpEaq9&#xA;nGttIQtGAHGoWoNBzrTJRxDr9XvQZFdJqGn6ZCmtaTYwS22pVgms7xBOtvLHRpY15b8XDKUavSow&#xA;8JlsTyRdMk8saFa/Xyxsg9pFdNdWqmEy8Y5LWjozUI4K8iU5bVQ98oyTJFA71+lmAAx380oNLg81&#xA;NDpthLp8KQRCSOWNI+clDylQIWVlfswO+X4L4dzbWWIZeh6AbGz4L8HlToP+Pm6r9P73MSz/AE/s&#xA;bK9yhJZ2g/Z8s/7Ge4/6qY2f6f2LXuUDaWxalPLo/wCe89P+TmGz/T+xa9yYaTpFlc6ha27p5cdZ&#xA;pUjZI57gykMwBCD1N2NdvfBKRA/i+xCtpfkvRtNhuNY1VItVhuZUi0CysZWlWeZ5GHp1ABbjw4kb&#xA;98E8siRGO3eoA5lZrlteX+oX9vquuONUsrW4uZbCwTlZ2rW8ZcQyzeonxlgsfwq3xGnLJ44iI2CD&#xA;IliusaZDbeX9Fu/Rdby+FxLcStyoyerwh6mlfgc7dRlsZXIjuRSSZYh2KuxV2Ko7R59Ninl+vxl4&#xA;5IXjikC+p6Uj7CTgWQNxFe/v2yEweiQ9f8j+WYdQ0i3uNR1a51PSUAlFvcRwGFF5cFQCRrh6s3w0&#xA;rHx+0dhmHkyUSAKLKkJ/i9dSkl0dZtQGn/UZbvTH0+5FtcSpE7O6OTG5kpFG9ATvxAPxVbJxhW+1&#xA;okGCeYnSPRYVsL19R0q9uWnW4uOQuY5YkC+jLHydEIEpPJSedR4ZdD6t9iFPJjGXMXYq7FWSfl55&#xA;oh8tearbUrlDJZlXgu0X7XpSqVJH+qaN9GVZocUaCp75eXTPLWvyapbeYbebRVSRY0QlrmWJ6MsZ&#xA;hZaoeQUsfbMfNeSHDw+psjsbZNpOqWOqXMd3plnLd2ekWfpRMKRQCa4cyzpWXjSh4/R26ZTKJAqR&#xA;5n7uTIb8kZqX5ga/p+mT3R8r28+miiXVxFeSSAVNAJTEIzTenxCmWY8cTte/ua5B5P5j1Ly7qTJd&#xA;6Zpz6VdOx+s2qyGa3au/NHc81Neq0IzKhGQ5mwjZJMtQ2jujq6MVdSGVlNCCNwQRgVMdZ8xatrRi&#xA;bUpVuJoa0nKIsrcgB+8dQGc/D1apyMMYjyTa7R7y04T6fqErxWN0oHqqC/pSIeSScO46ggeOCYPM&#xA;c0gsln0K4tfJ08lvqMmrWl3WOzto+SxR+lIJpZljlIYkLGwPBdqtU5SJgz5UU1sv8neWG1Ly/Gbm&#xA;GWS1e8a79GCN5ZpIbSPg4RUFaO83Gv8Aktvtkss6O3NAV/MGs66iJ9e8s8tI9SiSagLgRsxanxSQ&#xA;SW8CHfsKr4nBDGByO6k2xTzXb6TDqo/RUnKzlhilEPqCb0GdavD6gJ5cGqK5ZiJI3QUny1DsVdir&#xA;sVROl3rWGp2l8o5NaTRzqvSpjcN/DIyFileyeW77yzpnmby3o1/FKsESzXPl3Vw4WIrqJkZBJG4K&#xA;7c1Cmvwv12zEIJBPz+CZKb+V9Og0+a3vLSbyt5baTlq19q8qfpXUnifkIUVacIua8vhHxGhFaYZZ&#xA;D09UvLkEDd5r5w813Wv3ygBYdMs/3WnWkQKxxxL8K7HuVAy7DiEB5nmyJSDLmLsVdirsVdirI/Kv&#xA;mq+05/0fNfSQ6TOJFZCWaOKSSKSNZQi1Pw+qa8R95plOTGDv1ZAsg8qwWcsIaG5kaTyvJHeR6rbC&#xA;OJWjlPKaA/WHjNOSt6b8e5qtDleU1/nJAtjnmvVZbgxWD26QfV2M3GOR5IlM8aMVhV/7qPavDffp&#xA;tlmKFbokWP5cxdirsVdirsVZzoOvr5Z8p2t3DZRX0up3couHuAXjiSAIPTReiyOHJ5eHY5izhxyq&#xA;6oNgNBlvlny5d2eup5vukttN8o6xbMn6PSeN/rX1mIwC2WJKcmMjByKUX5jaEpVHh5yDA7l4/eQp&#xA;BeTwI3NIpHRX8QrEA/TmYDYUqOFDsVdirsVegeRdT1BtA1CN5oPQs4vStEmYD0zKzP6shJIWKJmL&#xA;/Z5M/FVqKjMXLEA33swmWu+WfPOt6JpkNpcCXSo0SK3sYlS1tVjjj9QzN+9fdVo7mbiw5VA60YTi&#xA;Cb5sSGIRL5h8ozWuqWtxFJaXvqIkkLia2uVhIWaGVDTkvxgEMveo8ctNT2VT86WGn22o2t1p0foW&#xA;eq2kV/Fa1qITLyV4wT1CujU9sGKRIIPMGlISDLkOxV2KuxV2Kso0f8xvMenWsdk7reafEvGK2l5I&#xA;0YoBWKeExTxmg/Zf5g5UcMSbTbLtN8z6drHkzXVvLO7uIUu9NQ291qE1wlZHmA9MsodAtNxy3232&#xA;yqUSJD4oDzzzTY21h5n1ewtVKWtpe3EECkliI45WRRU7nYZfjNxB8lSzJq7FXYq7FXYq7FWQeSpo&#xA;/wBKyWMgZl1KCS0Cg7FpB8IYeFRt4GhynMNr7mUUF5lV11mdJAVdFiVlPUFYlBGTx8llzSzJsXYq&#xA;7FXYq7FU60LzRcaXbTWMlvFfabcMJJbOdarzApzU/stlWTFxG+RZCVMm8s6p5Y1u8k0q70uPTYXj&#xA;aaC6tDS5WaH4xwfiN+PKgymcZRF3abtinmnSbXSdduLG0na5tUEUkE7jizJNEsqkjts+ZEDYYJVk&#xA;1dirsVdirsVZn5O87XMLTaRrOozJo15YXOnI55OtsZ4vTSXgN2CUC0/lqBlOTH1A3Smkfl/6r5Ii&#xA;S7v7Gc3V1NBZ3cs8Ulta2vwtPLApPIzSsqigXmB2U1yo5LnsD+tkAxLzZq1nqOoxLYhv0dYW8dlZ&#xA;M4o7RQg/Gw8XZi2XYYGI35ndEikuWsXYq7FXYq7FXYqzDym1PJ+vjxvdJ/CSfKMn1j3H9CQlHnU1&#xA;85a8fHUbs/8AJd8lh+ge4KUmy1DsVdirsVdirsVZH+X+mrf+ZrdDP6DQhp0oKs3pipCio6D4j3oD&#xA;SvTKspqKQp+fLiK582ahcxArHOY5EBABo8SNUgdzXDiFRAUpBliHYq7FXYq7FXYqnXky+sbHzHbX&#xA;V8/C2jWcM1Cd2gdU6f5ZGV5BYSFXz1T/ABG9P+WWx/6gocOPkhIMmrsVdirsVdirsVZzp7Wdr5Gt&#xA;U1uwmvIZLyaWxUI4EQEcZbkVeI8ZQSV3ptXfMSVnIeE1s2DluwmZo2mdok9ONmJSOvLipOwr3p45&#xA;lBrWYVdirsVdirsVdirLPKzU8qa6PG80v8JJsx8n1j3H9DIJT5vNfNutnxv7o/8AJZsnh+iPuCDz&#xA;SnLUOxV2KuxV2KuxVkX5efWh5z0qa1UPPbzCdEYgV9IF6UJHLp0G5yvKfSbWlT8y/qv+ONV+qALb&#xA;c4/RVfshfSSgFOwwYT6QksZy1DsVdirsVdirsVdiqeedW5eYJD/y7WY+60iGV4uXz+9JSPLEOxV2&#xA;KuxV2KuxVlNjdXvmGzg0u2uHg1aCD6vDCHZY7yGPkyQ0G3qqCQoP2unXKDERN1t9zK9kD5muBPBo&#xA;kghWADTlj4ooQExXE0bMQO7MhJyWMUT7/wBAUlJMtYuxV2KuxV2KuxVlHllqeWtZHjdab+EkuY2X&#xA;64+6X6GceSV+ajXzRrB8b25P/JVsswfRH3BjLmleWodirsVdirsVdiqL0i+Wx1K3u2UusLcio6na&#xA;mRkLFJBdq18t9fPcqpQMsa8T1+CNU/41xiKCkoTJIdirsVdirsVdirsVTjzY4fW5GBqPQtRUe1tG&#xA;MqxfT8/vZS5pPlrF2KuxV2KuxV2KqlvcTW1xFcQOY54XWSKRdirqaqw9wRgKsm/MO9tL3UNPubbi&#xA;FntGuHjQghGubu4uSlB9mnrdMqw8ikhiuXIdirsVdirsVdiqMs9Wu7SzuLSHj6Vy8MklRU1gJZKf&#xA;S2+QlAEg9yQVG9u5by8nu5qercSPLJxFBydixoPmcMYgAAdFJUVUsQqipOwA6k4UK5sb0dbeUf7B&#xA;v6Y2E019SvP98Sf8A39MbC02LC+PS2l/4Bv6Y2EKLI605KV5CoqKVFafwxVMdL0K41CJplnht4hI&#xA;kCNO5XnNJXjGoUMa7bk/CO5GRlOkgWgbm3ntriW3nQxzQsUkQ9QymhGSBsWhTwq7FXYq7FXYq7FV&#xA;e10+/uw5tbaW4EYrIYkZ+I/yuINMiZAc00oZJDsVdirsVcASQAKk7ADAq+e3ngkMc8bRSChKOpVt&#xA;9xscQVWqjsGKqSEFWIHQVAqfpOKtYVdirsVdirsVdirsVdirsVdirsVXwTSQTxzxECSJg6EgMOSm&#xA;oqGBB+nAQqeSee/M8hq9zHX2trYfqjGVeBH8EsuMq0H5ieaofsTWp/17Cxf/AIlAcPgx/BKCSqR/&#xA;mb5wS4inFzAGhdZFCWlrEKowYbxRI3bscHgR/BK2y7zrawx3SSz2LakJjFx0ULWa0nvYzdvapcoO&#xA;boivVfh707VymB32NebIckiv/LuhXsWlatoNtcaezX66dquk3DGRoJwPUVo3YBmUorcuQqCMs8Qg&#xA;EE3taAN08178r59U0nUfNUVw6TKs10bX0w4kjT7BVqqVqi8j1yrFnoiKZc3lOZrB2KpnpWq2VlBI&#xA;k9it1I7Bg7+nQKB0o8ch+4jISiT1ZAo+HzPpaMC+jxOB2Atx+u3bI+Ge/wDHzXiTu280eWpLd7pN&#xA;OtbRo3AeK7t7G7DAjZYoore1kPQklnCj+bcDIGEgf7VFIux1HTNfLWmgaZo8GrlT9WtLiyMbzsoq&#xA;RC7zzw+of2VYCvbIGBH1E17/ANi2Alhub9LOwt01U6L6kTXJPxwxS3X1iRbj1fSX7aBQoWlKADDQ&#xA;s7cTJB6rp+ltJLrd00kltfSsumW0KiKS6MdFlnNQ3pRmT/JLE7bUJycZH6R0+xB70p8w21ra6gLe&#xA;CL0HjijFzEGLhZivJ1qxJqteLe4OTxmxaJJZljFF2esatYxmOzvZ7aNmDtHFI6KWHQlVIBOQlAHm&#xA;E2zTy3+YnnTUbmLS7rUHvViink0+CVI2/wBKSB2hqxXk3xgcQT9qmUZcMALpMTuqReY7fXn0sSh7&#xA;/WtPt5pJZrqNGBkd49lRKGQQpzkCkV2yJx8F9IlmDaMefW49UjjsEg1q4uBLBfyekEhktGZGjSdl&#xA;CpzBVunbtkAI1v6R+lJtK9f17Q9F1H0tN0bT21OFRHcSBJJLaJxUlY0ldyzgnd2PsAMuhEzFkmms&#xA;7KNt+aN/Kyw65pdhq+nHZ7aSBYmC/wDFUsYBRvA0OS8ADkSEWg/OXl3Rra2ste8uzPNoGqF0SKX+&#xA;+tbiMAyW0tOpAYMp7jx6mcJHkeaGNWxthcR/Wg5tuQ9UREB+PfiWBFfnkz5Ky/TPLeizwM+nS22s&#xA;SseSQ3M72cqLT7JgUbkH9oSkZjyykc7H2tgiE1sPIjzNW90O2t7evxTfX5Igo+bCb9WVnP3H7Fry&#xA;Rknlz8kNLuUbUdZu7uQbtY2jrPFXwaeONNvkeWTjPIRyaykesaz5TiaX9GW+mm2QUt7aOzuZHeo2&#xA;9Wa5kVx7lT9GTAl1v5stkbZaL5JinW/1AG3ke1s7i002DnMryTx+o7COQTO6A/DQk0oa9RlUpzIo&#xA;d5ZAB6VoXkPyq2mzX+qaZbpBG/1n0mjYR8+JSrLGCwi6HoB45RHJK+aJnoHz1qttbWupXVtbXAu4&#xA;IZWjjuVXgsgU05qtWoD23zYxNhihckh2KuxV2Kswu/NFpqt3barNqF1pWrxLELxoUMsc0kCCJJ0A&#xA;dOLmNaMrCnvvTMfwyARQIZAsv0bXtM1W/LRwtPFO76jfSkjhbcIRbQrM7FVDOisW3/apv1zFOKUR&#xA;v029/Vsu0TqfnDVbyKe10Wy0zXfSQu9vcSm8PBaVaOz+CE8f+eh98shEDnYa5B5vrer2GqaWlzLb&#xA;WVrqhnCpFYQfV1EAVuZkRKRVL8eNN+te2ZEYkS60vRj+XMXYq7FXYqz+Ly3bW2k2jQ6bIXu7K3vr&#xA;DzPE83GK5EimdJSG9BUhHNT8IcFRvuMxzk8/gkC0quvOVtLrGpPd6fFqekXl3Ncx2speJkMjk8o5&#xA;EIZC37WGOIgDeiAkllV1qVnqWreWdP0HSrbTJL+1gt7XU5XkuntwWbmkIcqgkRifi48iT1GU8O0r&#xA;PI8u9PJiWpaFpMujX+pWL3kN7plwkWo2d+FLlZmZUkVlCkNyX4kYbfzHLxMggHqxpjGXIdiq+Cea&#xA;CaOeFzHNEweORTQqymoIPtgItWTf4s0i6lW71HSaamvxNf2UzWzO38xRfh5HuRlHhSGwO3mz4gzD&#xA;Q9fe60yG+gSWKObVLbTwzymd6M6NM7lxRF4OEFO7dcx54qNeVsuLZhPlmxlufMlyby1+vXVpHdXT&#xA;2Lgn1p4EZ+DKN2HMVZe4BGZcz6dmtkCfmn5vs7lLDzPYQ3uiyAetol1aRwL6D94SER0IH2Gqd8j4&#xA;MeY5oYv5usk0rXL/AEiyuJJNJjn9ezRmPExyoHicrWnL0nAJyyBsWqSZNXYq7FXYq7FWceQvM9rb&#xA;X1pFqksRjHGygYp+8SN3LgvIaJ6SsdwTX6BmLmxXy97OMno2r+eL22XzDIsd1CtkIR5fR4XBYqj+&#xA;u7FBRopOSg8mIAAbZt8x+AGhtvzURPN4Lc3Elzcy3EtPUmdpHoKDkxqaD6c2IFCmKnhQ7FXYq7FX&#xA;YqyHyZdXkF3eNZKJr5LZ5bG3Yc1aeMij+maq7xxNIyAg75TmAIF8mUWVaXqV/d3um+dJ7uxhuNGh&#xA;kkvI45OV9O0XJQJLdFqvqbDkfhANSe2V8Ijce9SbYd5z05rDzPqUIj9O3e4kmsyv2Ht5HLROh7qU&#xA;Ipl2OVxCCElyxDsVdirsVVBcXAgMAlf0CeRi5Hhy8ePSuClRek6RNqMj0dYbeHiZp3DMF5niqqqh&#xA;md3OyqoqfkCRGUqSBbK9Ms51tLrSrT0tZNoGuW0TUbea2uFCryeS2MciyclX4iocVH7Jym7N8vMJ&#xA;KU+Yru9/RFk3pRWdtqpkvGtojK8j8HMaSTyzPI7knlxFad6b5OAHEe8KeTG8uYuxV2KuxVMLDzBr&#xA;NhYXVhZ3TRWl4Y2uIgFIYxOHQgkEqQyg1WnTIGAJsptnmlQweZtUtdf8t6tb6L50jYNc2F0whjmm&#xA;pxMts5DI3qftRsO57dafpHCRcUFMPPOj+ZdT1CDUfzH1PT9Mg0+P0vqlm8ct5KoPIpFDGX+Nztyc&#xA;hV69MEJACoBQ828w3l1qOpzatNbtbw37tJaqQQnpqeCqjH7QQALX2y+AoUlLMmh2KuxV2KuxV2Ks&#xA;p8nx3Nw8DerNJw1CxtIbcOfTpcNI0hZelOEJH05Rlr7CyBYsaVNDUdjlzF2FXYq7FXYq7FV8M00E&#xA;qTQu0csZDJIhKspHQgjARapz/jfzOZEdr1n4MGKFU4v/AJMgAHNT3DZV4EO5lxFMfzIhgj1PT2hh&#xA;jgWSyDNHCGWOq3EyfAjM/AUQbA0xw8llzYllzF2KuxV2KuxVNNI1e2tbS7sby3M9pdmKQtG3CWOW&#xA;Dl6ckbEMOkjAinfK5wJIISCjdO1vULjzZpN5YAwT2slvHaVcswWJhQyPReW1eRoBT2wGIETaeZV/&#xA;Ptzb3V5p81qhjtFtWhhUjjQRXMw407UyOAEXff8AoCZsXy9g7FXYq7FXYq4Gm464q9d1GXy/caV5&#xA;e1PzXYKupaxZsU1Mq8jt9XKoZryKNkLiQfEsi/FTrXML1WRE8iyFMP8AzG1fWr7UbO2v4ba3sbG3&#xA;WLSYrCptDbnpJCxJ5B6bn8Bl2ECrHxQQxLL0OxV2KuxV2KuxVn/kCG7sPK2v6+sHqx24CWj90uFh&#xA;lTmK/wAi3Fcxc284j8fjZkOTAMymLsVdirsVdirsVdirsVZd+Y4IvNJDdRp+/wBN3cH+OU4eRZS5&#xA;sRy5i7FXYq7FXYq7FVSC5ngLmFzGZEMbldiVbZhX3GxwEWllP5gvJNPY3LqFa6SS4IXpWeQyn8Xy&#xA;nAKCZMSy9i7FXYq7FXYq7FWdeVtf8z6d5ehu9GU3b2960eoRhTLILYJG0ER6skLP6v2dq5i5YRlK&#xA;pd2zIWlnmiS6bTIWvrY2c1ze3N1Z2R2MNvLxJXiQCqs/2dh0Jpvhw1xGjdAC0y5MYzJYOxV2KuxV&#xA;2KuxV7XogSx8k+V9Bagj8x2WtTXR6fELdzAdq+IGYchcie6leKZmK7FXYq7FXYq7FXYq7FWZfmjx&#xA;/TViq9EslX/kvNlGHkfeksNy9DsVdirsVdirsVdirK/P9I30W3Q1jj06Ir4j4mjpX2EYyrEefvSW&#xA;KZah2KuxV2KuxV2Koiy1C/sZDLZXMtrIw4s8LtGxHgSpG2RlES5i0gp95quUu9E8v3YDNK8MyXE0&#xA;hLySSpJ8bO7Ek9dq9BlWKNEjomR5MZy9i7FXYq7FXYq7FXpy67b3PkXytqLuFm8uHUrCcb1LTwtL&#xA;a/QacfvzFkDxEd9ftTEdXmOZSHYq7FXYq7FXYq7FXYqmGta3eaxcx3F0qLJFGIl9MEAqGZt6lt6u&#xA;chCAjySTaX5NDsVdirsVdirsVdiqIvdQvL10e6lMrRII4yaCiAkgbe5OREQOSSUPkkOxV2KuxV2K&#xA;uxV2Kq81/dzWtvaSvyt7Tn9XSgHH1G5PuBU1PjgpVDCrsVdirsVdirsVRdpqdza2l3aJRre9VVnj&#xA;apFY25I4oRRlPQ+5yJiCQe5IKEySH//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B33AAEC4276DEA11B31BD48D1B70E2B0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B43AAEC4276DEA11B31BD48D1B70E2B0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:918100fc-ceae-8647-9402-9ed5cff1bfca</stRef:instanceID>
            <stRef:documentID>uuid:D31E29DF256DEA11B31BD48D1B70E2B0</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>209.999994</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>ÂàùÊúüË®≠ÂÆö„ÅÆ„Çπ„Ç¶„Ç©„ÉÉ„ÉÅ„Ç∞„É´„Éº„Éó</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=53 Y=53 K=91 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>52.999996</xapG:magenta>
                           <xapG:yellow>52.999996</xapG:yellow>
                           <xapG:black>91.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -594.99 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 594.99 li
793.321 594.99 li
793.321 0 li
cp
clp
[1 0 0 1 0 0 ]ct
793.321 594.99 mo
0 594.99 li
0 0 li
793.321 0 li
793.321 594.99 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0.53 0.53 0.91 cmyk
f
531.577 286.32 mo
537.167 288.911 540.328 298.072 533.053 301.031 cv
527.82 303.16 521.656 298.807 524.08 293.062 cv
526.317 287.757 535.35 292.203 532.018 297.385 cv
531.999 297.417 531.957 297.419 531.925 297.436 cv
531.427 298.1 530.508 298.406 529.85 298.234 cv
528.889 297.974 528.411 296.684 528.766 295.354 cv
529.005 294.462 529.639 293.848 530.427 293.612 cv
529.785 292.621 527.885 292.534 526.59 293.684 cv
523.581 296.362 526.824 300.492 530.34 299.779 cv
535.671 298.699 537.813 288.392 530.177 287.417 cv
526.86 286.992 523.477 289.52 520.857 291.163 cv
517.828 293.066 514.311 295.433 511.439 297.573 cv
509.454 299.053 508.298 297.76 510.171 296.147 cv
515.11 291.903 524.766 283.163 531.577 286.32 cv
cp
level3{
gsave
clp
[20.8201 12.0205 -12.0205 20.8201 514.279 288.593 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.188235 0.368627 0.654902 0 ]
/C1 [0.33 0.52 0.81 0.16 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.04 0.11 0.4 0.03 ]
/C1 [0.33 0.52 0.81 0.16 ]
/N 1.09714 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.04 0.11 0.4 0.03 ]
/C1 [0.345098 0.52549 0.921569 0 ]
/N 1.09585 
>>
]
/Bounds [0.274725 0.650538 ]
/Encode [0 1 1 0 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[20.8201 12.0205 -12.0205 20.8201 514.279 288.593 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~0/,+81,:XA1c.'I2E!KQ3&ioY3]]>a4?Pbi5!D1q5X7V$6:4+.6q'O67Ros>84cBF8kVfN9MJ5V:/=Y^
:f1(f;H$Lm;Gg:f:JOVX9M7uL84Q0>779L06:!k$5!;%k4$#A^3&``Q2)I*E0ek@8/hJY+.k2ts-mp>g
,pX]Z+sA'N+!)FB*#fe6)&O/+()7Mt'+toi&.f?^%LigT$OR4J$O[@P%1Wm[&.oNg',2/s(Dmu,)B0Y9
*?H:F+X/*T,UFcb-n-Sp.kE8)0/,+81,CaE2E*TU3]fDc4[)(q5sdq,77Kd;84cEH9MJ8X:f1+h<)lt#
~>
<~?!^lF?smDO@U`hXA7]=aAnPaiBPD3rCMRa&D/F0/DfBZ8EH6)@F*)PIG'8(RG^+LZH@(!dI!pElIXclu
JUrE)K7ei0Jq8H%I=-BfH$=FSFE;JADf0E.CM@HpAn>L^@:3GK?!LQ9=BAO'<)ZXj:JOVX91h`F7R]^4
6:!k$5!1nf3B/rU2)I*E0eb75/M&D%.4?Pj,pX]Z+WqjJ*??+>*?H:F+<_sT,pjuf.4Qi!/M8\21,CaE
2E*WW4$5Yi5X@_(6q0[;8P2ZN:/=\a;cHau=BSg4?!^lH@Uiq\B4u!pCi+'/EH6,CG'A4XH[L9lJ:`E,
~>
<~Vl-JlWMuntX/rD)Xfeh1YHY::ZEggC['d<M[^W`U\@K2^]=Y_g]tV4q^VIY$_8=+-`5KX6`lH-@aN;QH
b0/#Qc-=PYbfe/Ma2Z*:_nj.'^:h1j\[],W[Bm0DYck42X/`.tVl$8bU7n6PSt):=R@'>,Q'@GoOH5E]
N/NRMLPCM9K7\Z)IsufnH[9s^GBS+NF)l8>Df0E.CMIQsB4kggB4u!oCi+'/EH6,CG'J:YI!pHoJV/W1
LP^nHNK0*_PE_B"R@9Y:T:hpRV5C2jX0&P/Z*UgG\%0,`^;%M$`5]j>b08,VdF-Opf@em5hV[;OjQ>Xi
~>
<~!!!$#!WiH,"9er5"pYD>#mgqH$OdFQ%1WmZ&.fEc&ebom'GVB!(Ddo*)&aD4)]Tk=*ZcCF+<_mP+sS<X
,palb-R^Ak-mpAi-71#b,pX`],9nBV+sA*Q+<VaJ+!)IE*??.?*#fh9)B'M3)&X8.(`*u(()@W"'bh>r
',)#l&eYcg&J,Kb%hB0\%LrpW%1EXR$O[=L$47(G#mgkC#RCY?#6tJ=#6tJ="pP89"pP89"pP89"pG/6
"U,&5"U,&5"U"r2"9\i1"9\i1"9S`.!s8W-!s8W-!WiE)!WiE)!WiE(!<E3%!<E3%!<E0#z!!!!!~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
517.941 272.68 mo
515.351 267.094 506.186 263.93 503.228 271.209 cv
501.097 276.444 505.455 282.608 511.201 280.183 cv
516.503 277.947 512.055 268.914 506.876 272.242 cv
506.843 272.264 506.84 272.307 506.824 272.333 cv
506.16 272.831 505.854 273.754 506.027 274.414 cv
506.284 275.37 507.579 275.852 508.906 275.497 cv
509.798 275.257 510.413 274.623 510.65 273.833 cv
511.639 274.479 511.727 276.375 510.575 277.67 cv
507.9 280.681 503.769 277.434 504.481 273.92 cv
505.562 268.59 515.87 266.447 516.844 274.086 cv
517.268 277.402 514.74 280.784 513.097 283.403 cv
511.197 286.433 508.825 289.949 506.684 292.82 cv
505.208 294.806 506.502 295.964 508.116 294.088 cv
512.355 289.148 521.1 279.496 517.941 272.68 cv
cp
level3{
gsave
clp
[15.0827 8.70801 -8.70801 15.0827 500.353 276.022 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.0827 8.70801 -8.70801 15.0827 500.353 276.022 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
578.757 394.211 mo
578.757 348.297 li
573.136 351.783 li
575.686 356 576.727 361.988 577.04 369.951 cv
577.273 375.885 577.352 392.598 577.352 394.264 cv
577.352 395.928 578.757 396.084 578.757 394.211 cv
cp
level3{
gsave
clp
[22.8702 13.2041 -13.2041 22.8702 565.717 364.634 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[22.8702 13.2041 -13.2041 22.8702 565.717 364.634 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
553.24 345.674 mo
552.027 356.252 561.693 359.777 567.337 366.775 cv
573.853 374.852 574.89 384.707 574.932 394.861 cv
574.935 395.729 573.634 395.879 573.631 394.855 cv
573.589 384.291 570.334 373.533 563.004 365.533 cv
559.852 362.092 555.766 359.832 552.827 356.145 cv
550.354 353.045 549.485 349.172 549.927 345.297 cv
550.038 344.35 553.347 344.727 553.24 345.674 cv
553.24 345.674 li
cp
level3{
gsave
clp
[40.3336 23.2866 -23.2866 40.3336 542.438 358.204 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.3336 23.2866 -23.2866 40.3336 542.438 358.204 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
536.358 269.004 mo
537.064 268.931 537.739 268.756 538.019 268.49 cv
543.706 263.102 552.67 255.914 560.864 255.628 cv
565.336 255.474 571.657 256.814 573.182 261.808 cv
573.569 263.07 573.887 264.378 573.772 265.711 cv
573.792 265.477 573.23 270.342 572.171 268.209 cv
571.562 266.982 567.66 268.069 568.062 268.878 cv
569.482 271.739 575.983 271.293 577.183 268.284 cv
579.546 262.359 575.906 257.087 570.406 254.948 cv
561.066 251.316 550.685 255.735 542.362 261.627 cv
548.255 253.304 552.673 242.922 549.041 233.584 cv
546.902 228.084 541.631 224.443 535.707 226.806 cv
532.697 228.007 532.251 234.507 535.11 235.928 cv
535.92 236.331 537.008 232.426 535.781 231.819 cv
533.648 230.76 538.512 230.199 538.278 230.218 cv
539.612 230.102 540.92 230.421 542.18 230.806 cv
547.174 232.333 548.515 238.653 548.361 243.126 cv
548.077 251.319 540.887 260.285 535.5 265.97 cv
535.233 266.251 535.058 266.924 534.985 267.632 cv
534.813 268.504 535.301 269.191 536.358 269.004 cv
cp
level3{
gsave
clp
[49.6696 28.6768 -28.6768 49.6696 526.899 240.729 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[49.6696 28.6768 -28.6768 49.6696 526.899 240.729 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
551.522 254.114 mo
552.22 254.168 552.886 254.094 553.21 253.795 cv
558.209 249.174 569.549 242.583 575.585 248.43 cv
577.681 250.775 579.666 249.078 578.966 247.651 cv
577.752 245.181 576.287 244.504 574.004 243.626 cv
569.765 241.997 561.583 244.995 555.308 248.682 cv
558.995 242.407 561.994 234.223 560.364 229.985 cv
559.485 227.703 558.809 226.237 556.338 225.024 cv
554.913 224.325 553.215 226.309 555.56 228.404 cv
561.407 234.439 554.816 245.78 550.194 250.779 cv
549.895 251.103 549.821 251.769 549.876 252.468 cv
550.073 253.558 550.716 254.115 551.522 254.114 cv
cp
level3{
gsave
clp
[28.3666 16.3774 -16.3774 28.3666 548.311 236.434 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[28.3666 16.3774 -16.3774 28.3666 548.311 236.434 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
563.008 242.307 mo
563.704 242.271 564.368 242.139 564.662 241.9 cv
567.456 239.626 572.404 239.042 575.845 238.941 cv
576.448 238.921 578.072 238.832 578.327 238.078 cv
579.328 235.123 579.634 230.973 577.502 228.432 cv
577.235 228.113 576.614 228.014 575.937 228.052 cv
575.975 227.376 575.876 226.756 575.558 226.488 cv
573.017 224.355 568.867 224.663 565.913 225.663 cv
565.158 225.918 565.069 227.542 565.049 228.144 cv
564.946 231.585 564.364 236.533 562.089 239.328 cv
561.851 239.623 561.717 240.286 561.682 240.981 cv
561.621 241.766 562.107 242.432 563.008 242.307 cv
cp
level3{
gsave
clp
[14.8569 8.57764 -8.57764 14.8569 562.764 230.745 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.8569 8.57764 -8.57764 14.8569 562.764 230.745 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
569.352 332.911 mo
569.78 337.554 563.137 334.485 561.73 332.516 cv
561.619 332.359 561.518 332.201 561.412 332.043 cv
564.375 330.394 569.006 329.173 569.352 332.911 cv
cp
467.208 239.005 mo
467.034 238.887 466.858 238.776 466.684 238.652 cv
464.498 237.09 461.093 229.718 466.245 230.193 cv
470.393 230.577 469.039 235.717 467.208 239.005 cv
cp
565.949 317.902 mo
573.65 314.822 578.325 306.729 579.256 298.662 cv
580.298 289.618 576.591 281.77 569.383 276.237 cv
557.253 266.929 541.403 267.41 529.027 274.961 cv
536.58 262.586 537.061 246.737 527.752 234.607 cv
522.22 227.399 514.373 223.692 505.328 224.734 cv
497.261 225.664 489.168 230.34 486.087 238.042 cv
485.533 239.427 485.156 240.883 484.92 242.373 cv
479.548 243.461 474.003 242.94 468.839 240.024 cv
469.601 238.603 470.156 237.058 470.504 235.458 cv
471.053 232.929 470.352 226.494 466.432 226.95 cv
463.465 227.296 461.929 230.919 461.93 233.597 cv
461.93 237.301 463.13 239.495 465.316 241.501 cv
463.009 243.48 460.062 244.417 457.068 243.951 cv
452.342 243.21 448.441 238.438 451.185 233.812 cv
451.705 232.936 451.649 230.02 450.548 231.876 cv
448.321 235.626 447.612 239.692 450.166 243.464 cv
453.207 247.955 459.187 248.033 463.45 245.635 cv
464.787 244.884 465.927 243.918 466.899 242.815 cv
467.359 243.166 467.848 243.519 468.366 243.882 cv
473.572 247.539 479.276 248.697 484.688 247.833 cv
484.929 251.548 485.921 255.244 487.42 258.455 cv
490.715 265.506 497.835 267.955 505.143 266.255 cv
511.35 264.811 514.663 259.658 513.942 253.364 cv
513.616 250.505 512.812 248.114 510.579 246.233 cv
508.051 244.104 503.97 244.543 502.213 247.28 cv
501.618 248.208 502.272 252.136 503.085 250.869 cv
504.75 248.273 507.913 248.918 510.169 250.252 cv
513.278 252.088 512.544 256.532 510.822 258.982 cv
508.199 262.716 501.429 263.044 497.424 262.405 cv
491.043 261.388 487.656 255.313 486.619 249.467 cv
486.5 248.798 486.433 248.142 486.393 247.494 cv
492.443 246.036 498.012 242.043 501.949 236.182 cv
502.439 235.451 502.985 232.435 502.101 233.231 cv
497.763 237.139 492.556 240.289 487.087 241.844 cv
488.211 238.381 490.583 235.422 493.894 233.175 cv
498.998 229.715 505.34 228.287 511.434 228.782 cv
517.782 229.296 523.02 233.49 526.943 238.21 cv
537.132 250.477 533.545 267.149 523.174 277.927 cv
522.858 278.256 522.751 278.949 522.769 279.672 cv
522.709 280.643 523.427 281.208 524.317 281.22 cv
525.04 281.239 525.734 281.131 526.063 280.814 cv
536.84 270.444 553.513 266.857 565.78 277.047 cv
570.5 280.969 574.692 286.208 575.208 292.555 cv
575.703 298.65 574.274 304.992 570.815 310.096 cv
567.74 314.63 563.333 317.416 558.116 317.622 cv
558.961 311.44 562.269 305.426 566.615 300.602 cv
567.332 299.806 564.615 300.297 563.956 300.739 cv
557.916 304.796 554.08 310.775 553.342 317.128 cv
547.884 315.863 542.534 312.517 541.585 306.564 cv
540.944 302.561 541.274 295.791 545.008 293.167 cv
547.458 291.446 551.901 290.712 553.738 293.819 cv
555.072 296.078 555.715 299.238 553.122 300.904 cv
551.852 301.717 555.781 302.371 556.709 301.775 cv
559.446 300.02 559.885 295.939 557.757 293.411 cv
555.875 291.177 553.484 290.374 550.625 290.046 cv
544.332 289.326 539.177 292.64 537.735 298.846 cv
536.035 306.154 538.483 313.273 545.535 316.568 cv
547.894 317.671 550.517 318.499 553.216 318.958 cv
553.131 323.013 554.318 327.157 557.017 331 cv
557.345 331.467 557.663 331.907 557.978 332.322 cv
556.984 333.197 556.115 334.225 555.437 335.43 cv
553.277 339.271 553.347 344.66 557.393 347.4 cv
560.792 349.701 564.456 349.063 567.835 347.056 cv
569.508 346.063 566.88 346.014 566.091 346.481 cv
561.922 348.954 557.623 345.438 556.956 341.181 cv
556.536 338.482 557.378 335.826 559.163 333.748 cv
560.97 335.717 562.947 336.799 566.285 336.799 cv
568.698 336.8 571.962 335.416 572.275 332.742 cv
572.685 329.21 566.886 328.578 564.607 329.073 cv
563.166 329.387 561.774 329.887 560.493 330.573 cv
558.456 326.964 557.719 323.148 557.947 319.359 cv
560.708 319.352 563.441 318.906 565.949 317.902 cv
cp
level3{
gsave
clp
[138.039 79.6968 -79.6968 138.039 448.476 235.463 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[138.039 79.6968 -79.6968 138.039 448.476 235.463 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
409.779 225.232 mo
455.694 225.232 li
452.207 230.854 li
447.989 228.303 442.002 227.262 434.038 226.95 cv
428.104 226.717 411.393 226.637 409.727 226.637 cv
408.06 226.637 407.904 225.232 409.779 225.232 cv
cp
level3{
gsave
clp
[35.2034 20.3247 -20.3247 35.2034 414.367 215.511 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[35.2034 20.3247 -20.3247 35.2034 414.367 215.511 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
458.316 250.75 mo
447.737 251.963 444.211 242.297 437.214 236.652 cv
429.139 230.136 419.283 229.098 409.127 229.058 cv
408.261 229.055 408.111 230.354 409.134 230.358 cv
419.699 230.4 430.458 233.656 438.458 240.986 cv
441.896 244.136 444.158 248.223 447.844 251.163 cv
450.945 253.635 454.818 254.505 458.694 254.062 cv
459.641 253.951 459.262 250.642 458.316 250.75 cv
458.316 250.75 li
cp
level3{
gsave
clp
[48.4644 27.981 -27.981 48.4644 410.458 226.028 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[48.4644 27.981 -27.981 48.4644 410.458 226.028 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
578.295 56.8145 mo
577.895 57.2168 577.463 57.5693 577.001 57.8877 cv
576.536 58.1973 576.298 58.3613 576.288 58.375 cv
576.261 58.4014 576.209 58.4639 576.134 58.5605 cv
576.047 58.6494 575.97 58.7256 575.91 58.79 cv
575.284 59.4121 574.82 59.5771 574.52 59.2773 cv
574.117 58.874 574.289 58.3047 575.026 57.5664 cv
575.427 57.166 575.998 56.7637 576.736 56.3633 cv
577.472 55.9629 577.927 55.6816 578.09 55.5225 cv
578.364 55.2441 578.447 54.7754 578.341 54.1191 cv
578.235 53.4639 578.025 52.9785 577.712 52.665 cv
576.483 51.4365 574.388 50.8301 571.418 50.8398 cv
568.338 50.8652 564.588 51.5596 560.166 52.9268 cv
558.564 53.4287 556.954 54.0986 555.337 54.9346 cv
553.962 55.6631 552.815 56.3467 551.899 56.9854 cv
551.588 57.1982 551.385 57.3193 551.299 57.3594 cv
551.098 57.4111 550.863 57.3594 550.586 57.2119 cv
550.622 57.0459 550.692 56.9131 550.792 56.8145 cv
550.867 56.7393 551.163 56.5459 551.675 56.2334 cv
552.389 55.7686 553.016 55.3574 553.556 54.9932 cv
554.293 54.377 555.777 53.332 558.006 51.8594 cv
562.174 49.3896 566.014 48.0791 569.522 47.9297 cv
572.927 47.8027 575.659 48.7686 577.712 50.8203 cv
578.689 51.7998 579.224 52.8496 579.32 53.9697 cv
579.414 55.0889 579.073 56.0371 578.295 56.8145 cv
cp
567.211 45.3936 mo
567.047 45.5537 566.423 45.8311 565.333 46.2178 cv
563.805 46.748 562.452 47.2832 561.275 47.8359 cv
560.275 48.3125 559.033 49.1123 557.556 50.2422 cv
556.829 50.791 555.238 52.0801 552.783 54.1113 cv
552.283 54.5352 551.777 54.9561 551.263 55.3691 cv
550.899 55.6563 550.661 55.7461 550.548 55.6328 cv
550.397 55.4814 550.68 55.0498 551.395 54.3359 cv
551.544 54.1865 551.762 53.9766 552.051 53.7148 cv
552.339 53.4512 552.552 53.25 552.689 53.1133 cv
552.839 52.9658 li
554.706 51.0977 556.179 49.4785 557.253 48.1016 cv
558.18 46.8945 558.569 46.2197 558.42 46.0684 cv
558.282 45.9297 558.006 46.0684 557.593 46.4844 cv
557.63 46.4453 557.412 46.7031 556.935 47.2529 cv
556.383 47.8799 555.758 48.5547 555.058 49.2803 cv
554.633 49.7324 554.018 50.4434 553.216 51.4248 cv
552.463 52.3262 551.875 52.9873 551.45 53.415 cv
549.885 54.9805 549.045 55.708 548.932 55.5947 cv
548.897 55.5566 li
548.657 55.3184 548.845 54.8291 549.458 54.0898 cv
550.386 53.0127 551.326 51.9365 552.278 50.8594 cv
553.441 49.4941 554.405 48.0791 555.168 46.6133 cv
555.432 46.1035 556.279 44.166 557.706 40.8086 cv
558.683 38.5059 559.239 37.2861 559.379 37.1475 cv
559.552 36.9736 559.796 36.8838 560.11 36.8838 cv
560.423 36.8838 560.65 36.9531 560.788 37.0918 cv
560.887 37.1914 560.984 37.4688 561.08 37.9258 cv
561.169 38.3818 561.265 38.6553 561.351 38.7422 cv
561.427 38.8164 561.633 38.8262 561.971 38.7627 cv
562.433 38.6748 562.899 38.5879 563.359 38.4971 cv
564.625 38.2852 565.395 38.3164 565.669 38.5918 cv
565.885 38.8027 565.996 39.0557 566.01 39.3447 cv
566.008 39.4961 565.976 39.8379 565.915 40.3799 cv
565.901 40.4648 565.814 41.0518 565.653 42.1436 cv
565.576 42.5703 565.57 42.8115 565.633 42.876 cv
565.708 42.9502 565.982 43.0332 566.46 43.1221 cv
566.937 43.208 567.219 43.2949 567.306 43.3838 cv
567.545 43.6211 567.653 43.9502 567.635 44.3691 cv
567.614 44.7881 567.475 45.1299 567.211 45.3936 cv
cp
548.52 54.4258 mo
548.306 54.6406 548.093 54.6426 547.881 54.4316 cv
547.716 54.2666 547.669 54.0801 547.729 53.8643 cv
547.771 53.7285 547.9 53.459 548.125 53.0576 cv
549.928 49.8271 551.286 46.6895 552.202 43.6465 cv
553.427 39.6123 554.087 36.1494 554.175 33.2559 cv
554.262 30.5908 553.865 28.8184 552.99 27.9414 cv
552.453 27.4053 551.84 27.1416 551.16 27.1631 cv
550.476 27.1807 549.847 27.4766 549.27 28.0547 cv
549.123 28.2031 548.955 28.4658 548.771 28.8311 cv
548.592 29.2051 548.439 29.4502 548.313 29.5732 cv
548.162 29.7236 547.89 29.8877 547.495 30.0557 cv
547.103 30.2227 546.87 30.2764 546.809 30.2168 cv
546.608 30.0137 546.647 29.5898 546.924 28.9375 cv
547.235 28.1768 547.761 27.4229 548.5 26.6836 cv
548.964 26.2217 549.471 25.9521 550.021 25.875 cv
550.7 25.7744 551.438 25.8623 552.24 26.1387 cv
553.003 26.377 553.604 26.7139 554.042 27.1543 cv
555.082 28.1934 555.809 29.6074 556.221 31.3975 cv
556.622 33.2529 556.646 35.3564 556.296 37.71 cv
555.809 40.9297 554.587 44.0918 552.633 47.1953 cv
551.594 48.8643 550.625 50.5586 549.723 52.2871 cv
549.02 53.6133 548.62 54.3271 548.52 54.4258 cv
cp
level3{
gsave
clp
[35.7557 20.6436 -20.6436 35.7557 542.522 36.4624 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[35.7557 20.6436 -20.6436 35.7557 542.522 36.4624 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
583.529 48.2607 mo
582.989 48.8008 582.261 49.0605 581.338 49.04 cv
580.417 49.0215 579.401 48.6797 578.288 48.0176 cv
571.836 44.2227 568.405 42.1191 567.993 41.7051 cv
567.503 41.2178 567.384 40.8477 567.635 40.5967 cv
567.835 40.3955 568.4 40.4082 569.325 40.6357 cv
569.716 40.7256 570.999 41.0908 573.176 41.7441 cv
577.309 42.9688 579.421 43.6045 579.507 43.6426 cv
581.298 44.2559 582.571 44.9355 583.322 45.6875 cv
584.249 46.6152 584.318 47.4717 583.529 48.2607 cv
cp
582.026 41.0459 mo
581.611 41.4609 580.806 41.6318 579.602 41.5566 cv
578.951 41.5049 577.421 41.2803 575.02 40.8799 cv
570.447 40.1143 567.974 39.5449 567.598 39.1719 cv
567.407 38.9814 567.384 38.7061 567.522 38.3418 cv
568.274 38.042 li
569.802 38.0166 571.5 37.9346 573.365 37.7988 cv
575.369 37.6465 576.541 37.5684 576.877 37.5557 cv
579.633 37.4775 581.5 37.9307 582.477 38.9092 cv
583.039 39.4707 582.89 40.1836 582.026 41.0459 cv
cp
574.793 32.0859 mo
574.618 32.2617 574.073 32.6318 573.157 33.1963 cv
572.08 33.8213 571.004 34.4453 569.928 35.0732 cv
568.688 35.7891 567.72 36.4375 567.033 37.0264 cv
566.646 37.3643 566.388 37.5625 566.263 37.6104 cv
566.1 37.6963 565.95 37.6719 565.813 37.5361 cv
565.676 37.3975 565.644 37.2539 565.719 37.1016 cv
565.731 37.0918 565.868 36.9014 566.132 36.54 cv
566.771 35.6514 567.759 34.1602 569.099 32.0664 cv
570.078 30.5146 570.835 29.4688 571.374 28.9316 cv
572.014 28.293 572.685 27.9502 573.394 27.9082 cv
574.1 27.8643 574.725 28.1104 575.265 28.6504 cv
575.689 29.0742 575.859 29.6152 575.77 30.2637 cv
575.683 30.9141 575.356 31.5254 574.793 32.0859 cv
cp
564.722 36.2959 mo
564.472 36.5469 564.218 36.5381 563.954 36.2754 cv
563.842 36.1631 563.709 35.4795 563.558 34.2295 cv
563.371 32.7402 563.232 30.9209 563.148 28.7803 cv
563.07 27.3799 563.006 25.9736 562.958 24.5732 cv
562.971 23.5103 563.215 22.7383 563.69 22.2642 cv
564.055 21.8994 564.505 21.7153 565.052 21.7075 cv
565.598 21.7026 566.07 21.8994 566.472 22.3018 cv
567.098 22.9253 567.387 23.7788 567.335 24.8555 cv
567.322 25.3447 567.107 26.5195 566.698 28.3877 cv
565.608 33.4326 564.951 36.0684 564.722 36.2959 cv
cp
562.432 36.1084 mo
562.168 36.3691 561.929 36.3965 561.717 36.1826 cv
561.503 35.9697 561.192 35.4443 560.779 34.6045 cv
560.276 33.5771 559.769 32.543 559.255 31.5039 cv
557.441 27.8857 556.333 25.4619 555.932 24.2354 cv
555.344 22.418 555.429 21.1284 556.196 20.3667 cv
556.996 19.564 557.96 19.7261 559.088 20.8535 cv
559.538 21.3022 559.982 22.4502 560.421 24.292 cv
560.759 25.7559 561.208 28.21 561.772 31.6563 cv
561.824 31.9063 562.019 32.9512 562.358 34.7939 cv
562.506 35.5693 562.534 36.0068 562.432 36.1084 cv
cp
level3{
gsave
clp
[32.7094 18.8848 -18.8848 32.7094 553.794 24.3857 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[32.7094 18.8848 -18.8848 32.7094 553.794 24.3857 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
561.364 66.584 mo
562.005 67.002 562.594 66.9434 563.131 66.4033 cv
563.496 66.041 563.67 65.5947 563.654 65.0752 cv
563.639 64.5527 563.442 63.8555 563.062 62.9883 cv
562.697 62.0986 562.474 61.4922 562.396 61.1563 cv
562.317 60.8271 562.291 60.4512 562.312 60.0313 cv
562.393 59.4463 562.665 58.8955 563.131 58.3799 cv
562.594 58.5391 562.191 58.7529 561.921 59.0205 cv
561.391 59.5518 561.09 60.29 561.017 61.2314 cv
560.979 61.6504 561.055 62.5303 561.245 63.8779 cv
561.323 64.3027 561.375 64.7686 561.391 65.2715 cv
561.413 65.7744 561.403 66.2119 561.364 66.584 cv
cp
558.764 61.541 mo
558.764 60.793 558.847 60.1797 559.007 59.6914 cv
559.169 59.2061 559.459 58.7529 559.88 58.3301 cv
560.269 57.9463 560.731 57.6465 561.275 57.4365 cv
561.817 57.2275 562.383 57.1211 562.971 57.1172 cv
563.561 57.1133 564.122 57.209 564.651 57.3955 cv
565.182 57.582 565.631 57.8682 566.001 58.2373 cv
566.392 58.625 566.61 59.0742 566.658 59.5801 cv
566.704 60.0879 566.572 60.5 566.254 60.8154 cv
566.065 61.0029 565.835 61.1084 565.569 61.1289 cv
565.307 61.1475 565.084 61.0693 564.9 60.8838 cv
564.719 60.7031 564.638 60.4248 564.663 60.0557 cv
564.799 60.2842 564.88 60.416 564.913 60.4492 cv
565.023 60.5557 565.159 60.6055 565.315 60.5977 cv
565.473 60.5928 565.616 60.5264 565.744 60.3955 cv
565.957 60.1846 566.056 59.916 566.033 59.5977 cv
566.014 59.2783 565.881 58.9941 565.634 58.75 cv
565.336 58.4492 564.995 58.3008 564.618 58.3008 cv
564.237 58.3008 563.895 58.4482 563.595 58.749 cv
563.2 59.1455 563.015 59.6299 563.044 60.1992 cv
563.071 60.7793 563.327 61.6289 563.808 62.7607 cv
564.251 63.7744 564.459 64.6162 564.431 65.2939 cv
564.403 65.9697 564.148 66.5527 563.667 67.0352 cv
563.333 67.3662 562.963 67.5527 562.555 67.5996 cv
562.148 67.6445 561.715 67.5313 561.255 67.2568 cv
560.94 68.6836 560.253 69.9199 559.204 70.9727 cv
558.543 71.6338 557.777 72.1768 556.902 72.6104 cv
556.023 73.0488 555.104 73.3389 554.152 73.4834 cv
553.198 73.6318 552.196 73.6318 551.144 73.4805 cv
550.265 73.3457 549.397 73.0488 548.538 72.5947 cv
547.679 72.1387 546.914 71.5781 546.242 70.9072 cv
545.883 70.5459 545.585 70.166 545.338 69.7656 cv
545.73 69.4688 li
546.032 69.8652 546.285 70.1631 546.489 70.3691 cv
547.4 71.2813 548.478 71.9131 549.72 72.2686 cv
550.96 72.625 552.189 72.6582 553.404 72.3691 cv
554.619 72.0811 555.658 71.5029 556.522 70.6436 cv
557.295 69.8682 557.825 69.0039 558.105 68.0479 cv
558.386 67.0938 558.409 66.1504 558.171 65.2168 cv
557.933 64.2861 557.454 63.457 556.734 62.7373 cv
556.165 62.166 555.522 61.7568 554.806 61.5098 cv
554.088 61.2578 553.382 61.2051 552.688 61.3486 cv
551.99 61.4893 551.395 61.8066 550.906 62.2979 cv
550.295 62.9072 549.989 63.624 549.98 64.4463 cv
549.974 65.2715 550.271 65.9883 550.882 66.5967 cv
551.299 67.0156 551.741 67.2568 552.2 67.3193 cv
552.659 67.3799 553.037 67.2617 553.339 66.96 cv
553.56 66.7441 553.666 66.4854 553.654 66.1973 cv
553.641 65.9092 553.508 65.6348 553.257 65.3838 cv
553.146 65.2715 552.968 65.1582 552.723 65.042 cv
553.401 64.4883 553.965 64.4336 554.408 64.874 cv
554.687 65.1514 554.796 65.5166 554.74 65.9766 cv
554.685 66.4355 554.474 66.8486 554.111 67.2129 cv
553.604 67.7158 552.999 67.9482 552.293 67.9014 cv
551.591 67.8535 550.94 67.5322 550.347 66.9385 cv
549.823 66.417 549.483 65.792 549.315 65.0635 cv
549.148 64.3369 549.168 63.6045 549.375 62.8662 cv
549.58 62.1328 549.959 61.4854 550.515 60.9326 cv
551.177 60.2686 552.015 59.8574 553.022 59.6914 cv
554.034 59.5293 555.06 59.6133 556.107 59.9502 cv
557.15 60.2803 558.036 60.8135 558.764 61.541 cv
cp
level3{
gsave
clp
[12.7257 7.34717 -7.34717 12.7257 550.153 61.2422 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.7257 7.34717 -7.34717 12.7257 550.153 61.2422 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
540.455 44.3359 mo
540.958 44.3525 541.423 44.4033 541.849 44.4824 cv
543.196 44.6709 544.076 44.7471 544.496 44.708 cv
545.438 44.6357 546.173 44.3359 546.705 43.8057 cv
546.974 43.5361 547.187 43.1309 547.346 42.5957 cv
546.831 43.0625 546.282 43.333 545.695 43.4141 cv
545.276 43.4365 544.899 43.4102 544.57 43.3301 cv
544.235 43.2529 543.627 43.0303 542.738 42.665 cv
541.872 42.2852 541.174 42.0879 540.65 42.0723 cv
540.131 42.0557 539.686 42.2314 539.324 42.5957 cv
538.783 43.1309 538.725 43.7217 539.143 44.3633 cv
539.514 44.3232 539.953 44.3145 540.455 44.3359 cv
cp
545.776 49.6211 mo
546.112 50.667 546.197 51.6934 546.035 52.7041 cv
545.87 53.71 545.458 54.5488 544.794 55.2119 cv
544.241 55.7666 543.593 56.1465 542.861 56.3525 cv
542.123 56.5566 541.39 56.5781 540.663 56.4111 cv
539.934 56.2432 539.309 55.9033 538.788 55.3799 cv
538.195 54.7861 537.873 54.1357 537.825 53.4326 cv
537.777 52.7295 538.01 52.123 538.514 51.6152 cv
538.878 51.252 539.292 51.042 539.75 50.9873 cv
540.209 50.9307 540.576 51.0391 540.852 51.3174 cv
541.293 51.7607 541.239 52.3242 540.684 53.0029 cv
540.568 52.7588 540.455 52.5811 540.342 52.4707 cv
540.091 52.2178 539.818 52.085 539.529 52.0723 cv
539.241 52.0615 538.983 52.166 538.766 52.3877 cv
538.464 52.6895 538.347 53.0674 538.406 53.5264 cv
538.469 53.9863 538.711 54.4258 539.13 54.8447 cv
539.74 55.4561 540.455 55.7539 541.281 55.7461 cv
542.103 55.7383 542.819 55.4307 543.428 54.8203 cv
543.919 54.332 544.237 53.7363 544.376 53.0381 cv
544.521 52.3428 544.467 51.6387 544.218 50.9199 cv
543.97 50.2051 543.56 49.5625 542.99 48.9932 cv
542.269 48.2725 541.44 47.793 540.51 47.5557 cv
539.576 47.3174 538.631 47.3408 537.677 47.6221 cv
536.723 47.9023 535.858 48.4316 535.083 49.2041 cv
534.223 50.0693 533.645 51.1084 533.357 52.3232 cv
533.068 53.5381 533.102 54.7676 533.458 56.0059 cv
533.814 57.249 534.446 58.3262 535.358 59.2373 cv
535.562 59.4424 535.861 59.6943 536.257 59.9961 cv
535.961 60.3877 li
535.559 60.1426 535.18 59.8428 534.819 59.4844 cv
534.149 58.8135 533.588 58.0459 533.13 57.1885 cv
532.677 56.3291 532.381 55.4629 532.247 54.583 cv
532.096 53.5293 532.096 52.5283 532.244 51.5752 cv
532.386 50.6211 532.677 49.7041 533.115 48.8242 cv
533.55 47.9502 534.091 47.1826 534.752 46.5225 cv
535.806 45.4727 537.042 44.7852 538.469 44.4707 cv
538.196 44.0107 538.083 43.5781 538.126 43.1699 cv
538.173 42.7637 538.361 42.3926 538.693 42.0605 cv
539.173 41.5771 539.756 41.3242 540.433 41.2949 cv
541.111 41.2666 541.953 41.4756 542.964 41.9189 cv
544.098 42.3994 544.948 42.6553 545.527 42.6826 cv
546.095 42.7119 546.582 42.5283 546.979 42.1318 cv
547.279 41.8311 547.426 41.4902 547.426 41.1094 cv
547.426 40.7324 547.278 40.3896 546.978 40.0908 cv
546.733 39.8447 546.449 39.7119 546.127 39.6934 cv
545.81 39.6709 545.542 39.7705 545.331 39.9834 cv
545.199 40.1094 545.133 40.252 545.128 40.4121 cv
545.121 40.5674 545.169 40.7031 545.277 40.8135 cv
545.311 40.8457 545.442 40.9287 545.672 41.0635 cv
545.301 41.0869 545.024 41.0068 544.843 40.8262 cv
544.657 40.6426 544.58 40.4189 544.597 40.1572 cv
544.618 39.8906 544.723 39.6611 544.912 39.4727 cv
545.227 39.1563 545.639 39.0234 546.147 39.0684 cv
546.652 39.1162 547.101 39.333 547.489 39.7246 cv
547.858 40.0938 548.143 40.5449 548.331 41.0752 cv
548.519 41.6055 548.614 42.166 548.609 42.7549 cv
548.606 43.3438 548.5 43.9082 548.289 44.4521 cv
548.08 44.9971 547.78 45.458 547.395 45.8457 cv
546.974 46.2676 546.52 46.5566 546.035 46.7188 cv
545.546 46.8799 544.933 46.9619 544.187 46.9619 cv
544.915 47.6904 545.445 48.5762 545.776 49.6211 cv
cp
level3{
gsave
clp
[11.6677 6.73633 -6.73633 11.6677 534.74 45.9722 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.6677 6.73633 -6.73633 11.6677 534.74 45.9722 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
567.535 112.671 mo
572.171 111.384 576.264 108.409 578.878 103.301 cv
585.161 91.0244 579.63 73.3193 564.131 73.2324 cv
556.354 73.1895 551.345 80.7188 553.098 88.0957 cv
554.532 94.1318 560.852 98.1641 565.912 93.957 cv
566.221 93.7178 566.521 93.4521 566.791 93.1396 cv
568.629 91.0078 568.661 88.0156 566.856 86.458 cv
565.05 84.8975 562.096 85.3623 560.253 87.4932 cv
559.227 88.6826 558.786 90.1367 558.891 91.4658 cv
557.309 91.3008 555.486 89.9365 555.257 87.6826 cv
554.88 83.9951 557.232 80.3711 560.545 79.0029 cv
565.014 77.1611 571.424 77.5518 575.177 80.9033 cv
583.883 88.6787 577.068 103.947 567.442 107.411 cv
561.291 109.625 554.355 109.029 548.594 106.158 cv
550.5 105.854 552.403 105.327 554.253 104.619 cv
554.771 104.423 556.135 103.571 555.775 102.105 cv
555.396 100.555 554.027 100.584 553.708 100.729 cv
550.82 102.029 547.361 103.049 543.975 103.113 cv
541.616 101.129 539.643 98.6733 538.301 95.7695 cv
533.801 86.0332 539.189 73.1279 545.077 65.0146 cv
545.423 64.5361 545.696 63.5122 545.367 62.3721 cv
545.35 61.9497 545.027 61.4019 544.546 61.0015 cv
544.171 60.6523 543.751 60.4526 543.417 60.4668 cv
542.245 60.187 541.283 60.4307 540.825 60.7637 cv
532.713 66.6514 519.805 72.0391 510.072 67.5381 cv
507.167 66.1963 504.711 64.2236 502.727 61.8647 cv
502.792 58.479 503.812 55.0195 505.112 52.1328 cv
505.253 51.8125 505.283 50.4434 503.732 50.0635 cv
502.269 49.7061 501.417 51.0684 501.22 51.585 cv
500.512 53.436 499.986 55.3394 499.682 57.2446 cv
496.811 51.4844 496.214 44.5488 498.428 38.3984 cv
501.894 28.7725 517.161 21.9561 524.937 30.6621 cv
528.287 34.415 528.678 40.8262 526.836 45.2939 cv
525.469 48.6074 521.845 50.96 518.158 50.583 cv
515.903 50.3535 514.54 48.5313 514.373 46.9482 cv
515.701 47.0537 517.155 46.6133 518.345 45.5859 cv
520.476 43.7432 520.942 40.7891 519.381 38.9834 cv
517.824 37.1787 514.832 37.209 512.701 39.0488 cv
512.389 39.3193 512.125 39.6191 511.882 39.9277 cv
507.675 44.9873 511.71 51.3086 517.745 52.7412 cv
525.122 54.4932 532.651 49.4854 532.606 41.708 cv
532.518 26.21 514.815 20.6777 502.537 26.9609 cv
497.429 29.5752 494.456 33.6665 493.167 38.3018 cv
490.958 33.0894 487.774 28.4248 482.674 26.0674 cv
474.653 22.3633 465.787 26.623 464.707 35.5723 cv
463.727 43.6982 475.423 49.1602 480.866 43.2568 cv
487.44 36.124 475.419 29.9238 472.589 37.5625 cv
472.585 37.5752 472.598 37.5879 472.595 37.5977 cv
472.185 38.9844 472.765 40.4014 473.937 40.7939 cv
475.143 41.2051 476.51 40.3828 476.991 38.9609 cv
477.274 38.125 477.18 37.2734 476.818 36.627 cv
477.892 35.7793 479.308 36.2109 479.514 38.2129 cv
479.64 39.4365 478.867 40.7314 478.302 41.7188 cv
475.749 46.1777 470.799 43.29 468.941 40.0293 cv
466.247 35.3105 469.555 29.1621 473.882 26.834 cv
480.365 23.3467 486.353 30.4795 488.52 35.6084 cv
489.963 39.0264 491.346 42.4912 492.484 46.0298 cv
492.96 51.9268 495.524 57.8936 499.457 62.3838 cv
499.751 66.1299 501.128 69.7065 504 72.7119 cv
508.264 77.1738 515.774 78.5215 521.678 77.9873 cv
523.918 77.7852 522.302 76.5332 520.875 76.6631 cv
514.569 77.2305 508.369 74.8789 504.777 69.54 cv
504.005 68.3926 503.49 67.1465 503.163 65.8491 cv
513.962 74.0249 527.939 72.5303 539.361 66.478 cv
533.309 77.9014 531.813 91.8765 539.991 102.677 cv
538.693 102.35 537.447 101.833 536.299 101.062 cv
530.96 97.4727 528.61 91.2715 529.176 84.9639 cv
529.306 83.5391 528.053 81.9209 527.852 84.1631 cv
527.318 90.0664 528.666 97.5752 533.127 101.838 cv
536.133 104.711 539.71 106.088 543.457 106.384 cv
547.945 110.314 553.91 112.877 559.805 113.354 cv
563.345 114.492 566.812 115.875 570.231 117.319 cv
575.359 119.486 582.493 125.475 579.005 131.959 cv
576.677 136.283 570.529 139.594 565.81 136.899 cv
562.549 135.038 559.661 130.092 564.122 127.538 cv
565.108 126.973 566.403 126.197 567.627 126.325 cv
569.629 126.532 570.058 127.945 569.213 129.021 cv
568.566 128.659 567.714 128.566 566.879 128.848 cv
565.458 129.331 564.635 130.699 565.046 131.903 cv
565.438 133.074 566.855 133.654 568.242 133.245 cv
568.252 133.241 568.264 133.254 568.277 133.251 cv
575.916 130.421 569.715 118.4 562.583 124.973 cv
556.68 130.414 562.141 142.114 570.267 141.134 cv
579.218 140.052 583.476 131.187 579.772 123.165 cv
577.415 118.064 572.749 114.881 567.535 112.671 cv
cp
level3{
gsave
clp
[130.19 75.165 -75.165 130.19 462.967 36.4209 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[130.19 75.165 -75.165 130.19 462.967 36.4209 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
578.765 142.983 mo
578.765 142.983 578.765 191.684 578.765 193.959 cv
578.765 196.233 577.215 196.33 577.215 193.8 cv
577.215 181.118 575.664 165.627 573.176 156.735 cv
571.138 149.442 573.388 148.153 577.081 142.582 cv
577.694 141.654 578.765 141.535 578.765 142.983 cv
cp
level3{
gsave
clp
[24.2682 14.0112 -14.0112 24.2682 565.601 161.587 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.2682 14.0112 -14.0112 24.2682 565.601 161.587 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
463.197 25.7607 mo
463.197 25.7607 414.497 25.7607 412.221 25.7607 cv
409.948 25.7607 409.851 27.3115 412.38 27.3115 cv
425.063 27.3115 440.553 28.8633 449.446 31.3486 cv
456.738 33.3877 458.028 31.1377 463.597 27.4453 cv
464.525 26.832 464.644 25.7607 463.197 25.7607 cv
cp
level3{
gsave
clp
[40.441 23.3486 -23.3486 40.441 417.209 14.7998 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.441 23.3486 -23.3486 40.441 417.209 14.7998 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
140.801 21.7412 mo
142.631 21.8193 144.22 22.542 145.582 23.9033 cv
146.944 25.2656 148.047 26.9736 148.884 29.0371 cv
149.72 31.1055 150.19 32.1797 150.283 32.2715 cv
150.44 32.4297 150.616 32.5205 150.823 32.5439 cv
152.731 26.1465 154.224 22.4014 155.315 21.3115 cv
157.036 19.5908 159.043 18.5811 161.337 18.2871 cv
162.131 18.1719 162.835 18.4229 163.448 19.0352 cv
165.193 20.7832 165.374 23.21 163.989 26.3174 cv
163.602 27.1992 162.854 28.4697 161.749 30.1279 cv
160.543 31.877 159.708 33.2334 159.23 34.2109 cv
158.298 36.1406 157.924 37.7637 158.106 39.0801 cv
159.19 38.2168 159.953 37.5674 160.384 37.1367 cv
160.497 37.0244 160.634 36.8652 160.794 36.6582 cv
161.001 36.4531 161.145 36.3086 161.236 36.2168 cv
162.911 34.5391 164.762 33.666 166.783 33.5986 cv
167.496 34.3135 li
167.517 35.9258 166.963 37.7949 165.831 39.9287 cv
164.6 42.2861 162.914 44.543 160.76 46.6973 cv
159.144 48.3115 157.257 49.9932 155.095 51.75 cv
152.925 53.5088 151.672 54.5586 151.335 54.8994 cv
150.698 55.5361 149.99 56.3984 149.208 57.498 cv
148.428 58.6006 147.875 59.3125 147.557 59.6279 cv
147.107 60.0801 146.366 60.5215 145.345 60.9531 cv
144.96 60.7061 144.64 60.4551 144.393 60.2051 cv
143.417 59.2305 143.141 58.0967 143.577 56.8037 cv
143.803 56.123 144.281 55.2852 145.001 54.2861 cv
145.661 53.3564 146.026 52.6777 146.092 52.2422 cv
146.888 47.5039 147.146 43.9902 146.875 41.6943 cv
146.603 39.4072 146.027 37.4561 145.139 35.8467 cv
144.417 34.4824 143.233 32.9854 141.601 31.3545 cv
141.195 30.9463 140.401 30.4229 139.221 29.7871 cv
138.04 29.1514 137.271 28.6543 136.906 28.291 cv
136.116 27.498 135.667 26.6299 135.566 25.6904 cv
135.46 24.7461 135.723 23.957 136.362 23.3184 cv
137.496 22.1885 138.976 21.6621 140.801 21.7412 cv
cp
169.979 42.2422 mo
172.36 41.0879 173.97 40.9248 174.813 41.7666 cv
175.377 42.3301 175.265 43.3281 174.467 44.7588 cv
172.905 47.5938 171.984 49.3525 171.713 50.0361 cv
172.667 50.2139 173.655 50.0107 174.679 49.4229 cv
175.697 48.834 176.692 48.2305 177.668 47.6152 cv
183.567 44.4395 187.481 43.8213 189.408 45.748 cv
190.044 46.3828 190.145 47.3457 189.717 48.6377 cv
189.24 50.0234 188.285 51.4287 186.858 52.8574 cv
183.979 55.7402 179.722 57.3818 174.097 57.7881 cv
175.255 59.1523 li
176.252 59.7861 177.374 60.3203 178.62 60.752 cv
179.392 61.0225 180.167 61.3037 180.955 61.5859 cv
181.734 61.8691 182.696 62.5781 183.827 63.709 cv
185.685 65.5703 186.776 67.4766 187.091 69.4277 cv
187.413 71.377 186.949 72.9766 185.7 74.2246 cv
185.155 74.7656 184.607 75.1318 184.063 75.3105 cv
183.52 75.4932 183.139 75.4746 182.908 75.248 cv
182.818 75.1563 182.334 74.3213 181.465 72.7422 cv
180.591 71.168 179.644 69.8711 178.62 68.8477 cv
174.426 64.6533 168.979 62.6348 162.294 62.7939 cv
159.68 62.8623 157.154 63.1689 154.703 63.7139 cv
153.182 64.0957 151.661 64.5059 150.143 64.9346 cv
149.577 65.0938 149.198 65.085 149.012 64.9023 cv
148.156 64.041 148.569 62.7725 150.25 61.0918 cv
150.566 60.7734 151.108 60.2949 151.879 59.6592 cv
152.651 59.0254 153.235 58.5039 153.646 58.0938 cv
155.075 56.666 156.652 54.8301 158.376 52.5869 cv
160.103 50.3389 161.255 48.9209 161.846 48.3301 cv
164.703 45.4727 167.42 43.4434 169.979 42.2422 cv
cp
level3{
gsave
clp
[59.294 34.2334 -34.2334 59.294 133.187 28.6118 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[59.294 34.2334 -34.2334 59.294 133.187 28.6118 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
20.5112 24.4346 mo
86.9487 24.4346 li
95.2505 24.4346 102.075 28.3574 106.374 35.5186 cv
110.771 42.8467 115.835 54.5518 126.038 54.1504 cv
136.24 53.752 139.577 39.0928 131.899 33.3584 cv
126.95 29.6631 121.739 33.8008 122.077 39.3105 cv
122.226 41.7227 123.679 44.8525 125.856 45.4629 cv
127.662 45.9717 128.84 44.7773 129.163 43.2158 cv
128.419 42.7158 127.78 41.9502 127.408 40.9746 cv
126.59 38.8262 127.335 36.5488 129.072 35.8867 cv
130.809 35.2246 132.883 36.4277 133.702 38.5742 cv
138.167 50.8672 113.745 51.7656 116.761 37.3359 cv
117.986 31.4736 124.56 29.4941 129.781 29.5381 cv
135.892 29.5889 140.557 33.6914 141.875 39.5195 cv
145.03 53.4775 126.771 59.4287 116.446 55.0732 cv
102.597 49.2314 102.627 26.8486 85.5942 26.8486 cv
20.4175 26.8486 li
17.6479 26.8486 17.4634 24.4346 20.5112 24.4346 cv
cp
level3{
gsave
clp
[101.773 58.7588 -58.7588 101.773 31.5845 2.38135 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[101.773 58.7588 -58.7588 101.773 31.5845 2.38135 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
96.208 37.7192 mo
92.0562 32.4385 87.9487 29.2417 80.7173 29.2417 cv
20.5112 29.2417 li
17.4634 29.2417 17.6479 31.6558 20.4175 31.6558 cv
79.3628 31.6558 li
85.0327 31.6563 88.812 34.1362 91.8418 37.6611 cv
93.0171 39 95.8608 41.3438 97.3608 41.9063 cv
98.4365 42.3096 98.9858 42.0938 98.6108 41.4063 cv
98.2358 40.7188 97.4614 39.3135 96.208 37.7192 cv
cp
level3{
gsave
clp
[65.3756 37.7446 -37.7446 65.3756 26.7651 15.5342 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[65.3756 37.7446 -37.7446 65.3756 26.7651 15.5342 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
170.798 112.309 mo
176.079 116.461 179.275 120.568 179.275 127.8 cv
179.275 188.006 li
179.275 191.054 176.861 190.869 176.861 188.1 cv
176.861 129.154 li
176.861 123.484 174.381 119.705 170.856 116.675 cv
169.517 115.5 167.173 112.656 166.611 111.156 cv
166.208 110.081 166.423 109.531 167.111 109.906 cv
167.798 110.281 169.204 111.056 170.798 112.309 cv
cp
level3{
gsave
clp
[43.8544 25.3193 -25.3193 43.8544 150.604 137.427 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[43.8544 25.3193 -25.3193 43.8544 150.604 137.427 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
184.351 188.274 mo
184.351 121.836 li
184.351 113.534 180.427 106.711 173.264 102.41 cv
165.94 98.0137 154.234 92.9502 154.634 82.7471 cv
155.033 72.5449 169.69 69.207 175.425 76.8867 cv
179.121 81.834 174.982 87.0469 169.474 86.707 cv
167.061 86.5596 163.934 85.1074 163.32 82.9297 cv
162.813 81.1221 164.007 79.9443 165.568 79.6201 cv
166.068 80.3652 166.835 81.0039 167.81 81.377 cv
169.959 82.1953 172.234 81.4502 172.898 79.7109 cv
173.561 77.9736 172.357 75.9023 170.209 75.084 cv
157.918 70.6152 157.02 95.0391 171.449 92.0244 cv
177.309 90.7979 179.292 84.2246 179.246 79.002 cv
179.196 72.8926 175.094 68.2266 169.264 66.9102 cv
155.308 63.7539 149.356 82.0117 153.711 92.3398 cv
159.552 106.188 181.934 106.158 181.934 123.189 cv
181.934 188.365 li
181.934 191.139 184.351 191.322 184.351 188.274 cv
cp
level3{
gsave
clp
[72.0197 41.5806 -41.5806 72.0197 136.671 105.573 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[72.0197 41.5806 -41.5806 72.0197 136.671 105.573 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
319.971 46.8608 mo
317.612 43.0542 316.405 36.7407 317.028 32.8433 cv
317.742 28.3862 321.386 25.4966 324.644 25.228 cv
329.619 24.8169 331.635 28.4907 328.796 30.7661 cv
326.503 32.605 325.053 34.3569 323.842 36.4341 cv
322.63 38.5103 322.042 42.0737 322.739 45.1313 cv
323.583 48.8286 321.886 49.9546 319.971 46.8608 cv
cp
level3{
gsave
clp
[11.4427 6.60645 -6.60645 11.4427 316.582 32.3672 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.4427 6.60645 -6.60645 11.4427 316.582 32.3672 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
317.591 62.6968 mo
313.783 60.3384 307.469 59.1294 303.573 59.7544 cv
299.116 60.4683 296.226 64.1108 295.958 67.3696 cv
295.546 72.3433 299.22 74.3599 301.496 71.5229 cv
303.334 69.23 305.085 67.7798 307.165 66.5669 cv
309.24 65.3579 312.803 64.7681 315.861 65.4653 cv
319.558 66.3081 320.684 64.6118 317.591 62.6968 cv
cp
level3{
gsave
clp
[17.0981 9.87158 -9.87158 17.0981 298.222 62.0898 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[17.0981 9.87158 -9.87158 17.0981 298.222 62.0898 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
365.66 97.2319 mo
368.253 99.269 372.777 100.669 375.68 100.529 cv
379.001 100.372 381.413 97.9399 381.875 95.5767 cv
382.582 91.9683 380.058 90.1938 378.16 92.0835 cv
376.626 93.6128 375.227 94.5317 373.608 95.2485 cv
371.989 95.9653 369.333 96.1069 367.153 95.3462 cv
364.513 94.4292 363.551 95.5776 365.66 97.2319 cv
cp
level3{
gsave
clp
[13.2889 7.67236 -7.67236 13.2889 367.132 90.9697 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.2889 7.67236 -7.67236 13.2889 367.132 90.9697 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
349.789 89.2515 mo
349.61 92.5444 347.679 96.8667 345.662 98.9585 cv
343.354 101.349 339.935 101.56 337.853 100.351 cv
334.673 98.5024 335.003 95.4341 337.677 95.2554 cv
339.837 95.1108 341.45 94.6636 343.056 93.9185 cv
344.664 93.1743 346.52 91.27 347.387 89.1304 cv
348.436 86.5386 349.934 86.5747 349.789 89.2515 cv
cp
level3{
gsave
clp
[8.82348 5.09424 -5.09424 8.82348 338.812 91.0742 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.82348 5.09424 -5.09424 8.82348 338.812 91.0742 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
272.337 27.0532 mo
270.281 27.9624 267.001 31.3052 265.952 33.7729 cv
265.245 35.4341 264.708 35.3579 263.377 33.5356 cv
261.442 30.8843 258.185 29.3813 254.033 28.5171 cv
249.877 27.6509 217.773 27.5249 213.448 27.4126 cv
210.95 27.3472 211.013 25.4009 213.535 25.4009 cv
218.725 25.4009 269.077 25.4009 272.192 25.4009 cv
273.473 25.4009 273.62 26.4858 272.337 27.0532 cv
cp
level3{
gsave
clp
[46.2173 26.6836 -26.6836 46.2173 219.293 12.9302 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.2173 26.6836 -26.6836 46.2173 219.293 12.9302 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
375.084 127.721 mo
374.173 129.779 370.833 133.059 368.364 134.107 cv
366.703 134.816 366.779 135.354 368.602 136.684 cv
371.253 138.62 372.755 141.875 373.621 146.031 cv
374.485 150.182 374.612 182.289 374.724 186.613 cv
374.79 189.112 376.735 189.046 376.735 186.528 cv
376.735 181.334 376.735 130.983 376.735 127.869 cv
376.735 126.587 375.651 126.442 375.084 127.721 cv
cp
level3{
gsave
clp
[29.8829 17.2529 -17.2529 29.8829 359.538 148.202 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[29.8829 17.2529 -17.2529 29.8829 359.538 148.202 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
267.358 37.4341 mo
272.314 26.3813 288.284 24.0835 298.527 27.7759 cv
310.455 32.0728 315.806 45.3589 322.12 55.2642 cv
328.734 65.645 341.697 74.2036 354.415 69.937 cv
360.468 67.9058 365.583 63.103 368.146 57.2905 cv
370.582 51.7651 369.793 45.1157 367.412 39.7163 cv
362.773 29.2065 347.407 23.1489 339.613 33.7944 cv
333.557 42.064 338.879 54.8931 349.045 56.4858 cv
354.21 57.2954 357.699 52.6509 357.655 47.8901 cv
357.632 45.4595 356.124 43.3667 354.385 41.8198 cv
354.021 41.4966 353.547 41.1382 353.019 40.7925 cv
352.676 42.1753 351.249 43.4253 349.324 43.8442 cv
346.873 44.3765 344.57 43.3638 344.18 41.5767 cv
343.824 39.9341 345.218 38.2261 347.349 37.5444 cv
347.581 37.4644 347.785 37.4048 347.916 37.3765 cv
352.76 36.3071 357.656 37.8823 360.792 41.8042 cv
363.991 45.8032 362.827 51.9028 359.042 55.1128 cv
350.387 62.4556 337.449 58.5845 332.97 48.6528 cv
330.78 43.7935 332.152 38.1655 335.011 33.9233 cv
338.077 29.3706 343.445 26.9683 348.679 26.0376 cv
359.888 24.0435 370.323 30.8706 373.617 41.5737 cv
377.347 53.6968 370.358 64.7573 359.577 70.1245 cv
348.466 75.6538 334.822 73.7622 325.224 66.0845 cv
315.698 58.4663 311.955 45.7935 304.073 36.7388 cv
299.524 31.5132 293.048 28.3804 286.083 28.5044 cv
279.491 28.6216 273.898 32.2104 271.635 38.4263 cv
269.931 43.105 270.351 48.4614 272.826 52.7681 cv
275.712 57.7876 282.541 60.5552 288.08 58.7534 cv
293.744 56.9136 294.827 50.0903 293.191 45.1235 cv
292.308 42.4448 290.247 40.1177 287.669 38.98 cv
285.503 38.0239 283.379 38.5688 282.423 40.2476 cv
283.253 41.0464 283.798 42.2954 283.798 43.7144 cv
283.798 46.1284 282.249 48.0845 280.336 48.0845 cv
278.425 48.0845 276.876 46.1284 276.876 43.7144 cv
276.887 38.2329 282.608 36.5142 287.191 36.1587 cv
292.597 35.7427 296.821 39.5806 298.439 44.4956 cv
302.537 56.9243 288.13 63.2134 278.091 61.2427 cv
267.071 59.0815 263.078 46.9751 267.358 37.4341 cv
cp
level3{
gsave
clp
[87.6673 50.6147 -50.6147 87.6673 277.173 20.2646 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[87.6673 50.6147 -50.6147 87.6673 277.173 20.2646 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
338.799 118.274 mo
339.123 112.142 342.531 107.1 348.518 105.424 cv
355.705 103.417 364.606 107.794 363.953 116.084 cv
363.662 119.777 361.045 122.391 357.588 123.285 cv
354.454 124.096 349.916 123.963 347.772 121.171 cv
346.505 119.551 346.458 117.476 347.662 116.534 cv
348.867 115.591 350.87 116.14 352.136 117.761 cv
352.873 118.703 353.184 119.796 353.088 120.735 cv
355.755 123.538 358.38 118.806 358.767 116.364 cv
359.317 112.915 357.287 109.742 354.506 107.903 cv
351.296 105.778 347.906 108.179 346.103 110.948 cv
344.167 113.92 343.746 117.771 344.028 121.225 cv
344.618 128.42 352.657 133.287 359.427 131.571 cv
366.219 129.852 370.519 122.921 370.086 116.152 cv
369.641 109.149 364.063 104.11 359.495 99.4302 cv
354.777 94.5991 349.587 89.8335 350.365 82.4819 cv
350.987 76.6021 355.381 73.2007 360.869 72.1353 cv
366.069 71.1274 372.365 72.6489 374.48 78.021 cv
376.276 82.5845 374.17 87.2368 369.864 89.4087 cv
366.059 91.3247 360.007 90.187 358.156 86.1235 cv
357.148 84.0903 357.685 81.77 359.355 80.9429 cv
361.024 80.1157 363.197 81.0923 364.205 83.1274 cv
364.884 84.5005 364.847 85.9937 364.248 87.0796 cv
364.823 87.7905 365.515 88.3657 366.117 88.1401 cv
367.535 87.6118 368.509 86.1665 369.224 84.9175 cv
370.956 81.8862 369.764 78.2554 367.575 75.853 cv
365.234 73.2817 361.667 73.6401 359.056 75.5229 cv
356.304 77.5073 355.404 81.2495 355.444 84.4478 cv
355.537 91.6421 362.95 96.981 367.469 101.714 cv
371.906 106.362 375.691 111.618 375.277 118.375 cv
374.469 131.521 358.298 136.981 347.556 132.386 cv
341.56 129.823 338.458 124.711 338.799 118.274 cv
cp
level3{
gsave
clp
[36.4923 21.0688 -21.0688 36.4923 342.771 93.6123 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[36.4923 21.0688 -21.0688 36.4923 342.771 93.6123 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
732.46 460.879 mo
733.217 460.748 733.845 460.93 734.342 461.426 cv
735.178 462.265 735.1 463.181 734.107 464.173 cv
732.927 465.351 731.807 465.398 730.733 464.326 cv
729.851 463.444 729.716 462.683 730.341 462.055 cv
730.998 461.397 731.706 461.01 732.46 460.879 cv
cp
738.183 454.447 mo
739.098 454.266 739.805 454.42 740.299 454.914 cv
740.72 455.335 740.938 456.007 740.946 456.936 cv
740.964 457.864 740.706 458.592 740.187 459.114 cv
739.531 459.77 738.751 460.179 737.852 460.353 cv
736.952 460.516 736.265 460.364 735.792 459.893 cv
735.195 459.295 734.865 458.628 734.811 457.899 cv
734.758 457.165 734.996 456.536 735.52 456.014 cv
736.379 455.153 737.265 454.629 738.183 454.447 cv
cp
735.239 450.722 mo
740.503 448.394 744.172 448.277 746.266 450.369 cv
747.388 451.493 747.932 453.132 747.893 455.292 cv
747.854 457.446 747.262 459.102 746.11 460.255 cv
745.956 460.41 745.597 460.537 745.048 460.643 cv
744.502 460.751 744.131 460.89 743.947 461.073 cv
743.279 461.739 li
743.831 462.29 li
744.432 462.893 745.707 462.226 747.641 460.29 cv
749.18 458.75 749.875 456.932 749.712 454.843 cv
749.556 452.747 748.644 450.863 746.97 449.192 cv
745.51 447.729 743.67 447.027 741.458 447.094 cv
739.251 447.161 737.495 447.843 736.184 449.151 cv
735.976 449.362 735.664 449.883 735.239 450.722 cv
cp
743.48 433.15 mo
744.866 434.536 745.825 436.163 746.364 438.033 cv
746.897 439.904 746.927 441.676 746.46 443.343 cv
746.382 443.587 746.2 444.054 745.91 444.76 cv
745.7 445.175 745.637 445.504 745.714 445.74 cv
746.208 445.872 746.736 445.661 747.286 445.109 cv
748.565 443.834 749.088 441.698 748.851 438.719 cv
748.611 435.738 747.532 433.286 745.597 431.35 cv
745.281 431.035 744.82 430.821 744.205 430.698 cv
743.594 430.582 743.256 430.496 743.207 430.447 cv
742.448 429.687 742.629 428.744 743.751 427.62 cv
743.857 427.519 744.539 427.177 745.799 426.601 cv
745.769 426.519 745.741 426.471 745.714 426.443 cv
745.558 426.287 745.299 426.21 744.932 426.206 cv
743.936 426.106 743.063 426.433 742.307 427.187 cv
742.07 427.427 741.793 427.754 741.479 428.165 cv
741.165 428.589 740.958 428.854 740.856 428.957 cv
740.57 429.243 740.278 429.239 739.992 428.951 cv
739.208 428.165 739.524 427.075 740.931 425.664 cv
741.923 424.672 743.3 424.308 745.065 424.581 cv
746.831 424.855 748.357 425.631 749.64 426.914 cv
751.6 428.873 752.501 431.846 752.338 435.814 cv
752.162 440.187 750.657 444.068 747.831 447.467 cv
748.436 447.6 748.831 447.569 749.01 447.387 cv
750.004 446.395 751 444.984 751.991 443.15 cv
753.219 440.878 754.003 438.684 754.344 436.563 cv
754.658 434.683 754.619 433.023 754.225 431.584 cv
754.149 431.296 753.875 430.598 753.405 429.506 cv
753.011 428.642 752.802 427.938 752.777 427.386 cv
752.752 426.994 752.906 426.339 753.243 425.424 cv
753.559 424.641 753.754 424.207 753.833 424.13 cv
754.38 423.581 755.088 423.736 755.949 424.602 cv
756.997 425.647 757.692 427.305 758.03 429.58 cv
758.267 428.665 758.237 427.44 757.954 425.897 cv
757.745 424.588 757.725 423.841 757.908 423.656 cv
758.092 423.476 758.252 423.453 758.38 423.581 cv
758.408 423.608 758.475 423.727 758.577 423.937 cv
760.253 427.177 759.507 431.714 756.343 437.546 cv
756.812 437.227 757.141 436.979 757.318 436.796 cv
757.74 436.38 758.571 434.924 759.818 432.425 cv
761.054 429.93 762.105 428.247 762.968 427.382 cv
763.572 426.781 764.095 426.525 764.54 426.604 cv
764.777 426.679 765.012 426.758 765.244 426.838 cv
765.587 426.554 765.952 426.261 766.345 425.975 cv
766.945 425.579 767.577 425.713 768.227 426.365 cv
768.57 426.706 768.737 427.185 768.72 427.799 cv
768.706 428.414 768.538 428.873 768.221 429.188 cv
768.199 429.214 768.082 429.306 767.873 429.467 cv
767.797 429.541 767.771 429.673 767.797 429.861 cv
768.31 430.049 li
768.541 430.441 768.137 431.165 767.089 432.212 cv
766.361 432.941 763.597 434.944 758.814 438.211 cv
758.709 438.523 758.656 438.731 758.658 438.841 cv
766.214 435.258 770.71 434.184 772.146 435.622 cv
772.439 435.911 772.627 436.258 772.713 436.661 cv
772.806 437.064 772.818 437.311 772.741 437.391 cv
772.61 437.519 772.33 437.58 771.913 437.584 cv
770.242 436.801 768.935 436.459 767.992 436.564 cv
767.715 436.916 li
768.367 437.203 769.077 437.465 769.834 437.701 cv
770.41 437.854 770.722 437.961 770.774 438.013 cv
771.14 438.381 771.334 438.858 771.346 439.446 cv
771.358 440.035 771.195 440.496 770.856 440.838 cv
769.992 441.703 769.088 442.055 768.147 441.898 cv
767.339 441.664 766.525 441.429 765.716 441.191 cv
764.411 440.982 762.605 441.136 760.311 441.664 cv
757.563 442.265 755.139 443.215 753.047 444.523 cv
751.753 445.817 li
751.566 446.001 751.401 446.356 751.25 446.879 cv
751.642 447.037 li
755.244 444.84 758.526 443.675 761.478 443.54 cv
764.435 443.416 766.818 444.25 768.619 446.053 cv
769.823 447.255 770.43 448.599 770.443 450.073 cv
770.458 451.552 769.892 452.862 768.737 454.017 cv
767.665 455.089 766.721 455.22 765.912 454.412 cv
765.795 454.291 li
766.081 454.002 766.41 453.74 766.773 453.504 cv
767.144 453.271 767.339 453.141 767.363 453.117 cv
768.176 452.308 768.613 451.409 768.678 450.427 cv
768.745 449.447 768.448 448.629 767.792 447.972 cv
767.637 447.819 767.523 447.727 767.445 447.702 cv
767.704 449.638 767.3 451.14 766.229 452.209 cv
765.952 452.484 li
765.216 452.901 764.685 452.944 764.343 452.604 cv
764.266 452.528 764.083 452.172 763.794 451.541 cv
763.505 450.916 763.179 450.418 762.818 450.057 cv
762.712 449.949 762.541 449.831 762.303 449.702 cv
762.264 449.664 li
762.107 449.506 761.966 449.281 761.834 448.997 cv
761.704 448.707 761.614 448.539 761.561 448.483 cv
760.724 447.648 759.272 447.269 757.206 447.348 cv
754.827 447.426 752.698 448.226 750.814 449.739 cv
751.129 450.292 li
753.451 449.531 755.506 449.438 757.286 450.014 cv
758.769 450.512 760.422 451.663 762.229 453.466 cv
763.797 455.038 764.567 456.919 764.54 459.114 cv
764.512 461.312 763.836 463.073 762.502 464.405 cv
761.379 465.53 759.89 466.029 758.03 465.901 cv
756.515 465.794 755.482 465.467 754.931 464.917 cv
754.775 464.76 754.667 464.522 754.621 464.213 cv
754.856 463.978 li
755.116 463.715 755.503 463.687 756.031 463.898 cv
758.412 464.764 760.109 464.686 761.129 463.662 cv
762.017 462.773 762.384 461.991 762.226 461.312 cv
760.5 462.093 759.233 462.522 758.423 462.606 cv
757.375 462.762 756.526 462.512 755.876 461.862 cv
754.88 460.864 755.167 459.583 756.732 458.018 cv
758.617 456.131 758.58 454.213 756.615 452.246 cv
756.066 451.701 755.13 451.349 753.793 451.191 cv
752.46 451.038 751.596 451.151 751.204 451.543 cv
750.994 451.752 750.931 452.214 751.009 452.914 cv
751.14 454.044 751.196 454.799 751.168 455.194 cv
751.03 457.779 750.118 459.924 748.423 461.623 cv
747.424 462.617 746.325 463.304 745.11 463.681 cv
743.892 464.064 743.024 464.065 742.5 463.7 cv
742.186 463.493 741.624 463.324 740.815 463.192 cv
740.004 463.061 739.546 462.947 739.439 462.836 cv
739.05 462.45 739.062 462.04 739.479 461.623 cv
739.637 461.466 739.968 461.212 740.479 460.86 cv
740.991 460.508 741.389 460.188 741.678 459.897 cv
742.487 459.088 742.878 458.096 742.851 456.919 cv
742.827 455.9 742.551 455.128 742.031 454.604 cv
740.958 453.533 739.827 452.937 738.635 452.821 cv
737.445 452.701 736.426 453.074 735.561 453.938 cv
735.35 454.146 735.13 454.402 734.911 454.704 cv
734.689 455.001 734.535 455.191 734.459 455.266 cv
733.932 455.79 733.427 455.806 732.93 455.309 cv
732.511 454.89 732.43 453.923 732.695 452.409 cv
733.039 450.601 733.847 449.062 735.13 447.782 cv
737.326 445.586 740.486 444.721 744.612 445.188 cv
744.727 444.301 744.811 443.4 744.892 442.484 cv
744.969 441.572 744.853 440.752 744.543 440.014 cv
744.25 439.517 743.901 439.063 743.48 438.639 cv
742.851 438.013 742.031 437.69 741.006 437.663 cv
739.989 437.635 739.062 438.041 738.229 438.875 cv
737.909 439.191 737.583 439.517 737.244 439.858 cv
736.931 440.22 736.763 440.417 736.732 440.445 cv
736.445 440.731 735.949 440.766 735.269 440.547 cv
734.573 440.319 733.935 439.922 733.362 439.348 cv
732.027 438.013 732.262 436.055 734.066 433.468 cv
733.595 433.62 li
733.336 433.779 733.163 433.896 733.087 433.97 cv
731.907 435.149 731.341 436.453 731.38 437.881 cv
731.417 439.298 731.967 440.538 733.008 441.58 cv
733.217 441.787 733.427 441.947 733.634 442.055 cv
733.845 442.631 733.885 442.982 733.755 443.111 cv
733.388 443.479 732.688 443.141 731.638 442.093 cv
730.568 441.021 730.046 439.498 730.085 437.522 cv
730.125 435.551 730.694 434.011 731.792 432.913 cv
735.61 429.1 739.508 429.175 743.48 433.15 cv
cp
level3{
gsave
clp
[37.1993 21.4771 -21.4771 37.1993 730.671 434.496 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[37.1993 21.4771 -21.4771 37.1993 730.671 434.496 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
615.883 432.907 mo
623.479 439.249 638.523 446.17 651.018 446.17 cv
661.542 446.17 676.681 441.988 684.61 438.095 cv
692.541 434.202 700.902 428.292 709.411 428.292 cv
717.918 428.292 722.643 430.829 724.372 431.982 cv
720.671 440.412 724.003 450.199 728.688 453.775 cv
730.425 455.101 731.039 454.245 730.029 452.658 cv
727.144 448.334 723.397 437.952 726.856 430.453 cv
714.169 424.687 701.193 425.265 685.909 431.608 cv
670.627 437.952 658.802 439.971 649.575 439.971 cv
640.348 439.971 626.506 437.183 616.702 431.608 cv
615.742 431.032 614.636 431.946 615.883 432.907 cv
cp
level3{
gsave
clp
[96.0104 55.4316 -55.4316 96.0104 629.271 407.746 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[96.0104 55.4316 -55.4316 96.0104 629.271 407.746 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
762.102 579.124 mo
755.76 571.531 748.839 556.488 748.839 543.992 cv
748.839 533.467 753.022 518.328 756.915 510.398 cv
760.806 502.469 766.717 494.105 766.717 485.598 cv
766.717 477.093 764.178 472.368 763.026 470.637 cv
754.596 474.339 744.812 471.007 741.233 466.32 cv
739.91 464.584 740.766 463.974 742.353 464.98 cv
746.677 467.864 757.06 471.612 764.556 468.152 cv
770.321 480.84 769.747 493.818 763.403 509.101 cv
757.06 524.383 755.04 536.206 755.04 545.435 cv
755.04 554.663 757.828 568.503 763.403 578.307 cv
763.978 579.27 763.066 580.375 762.102 579.124 cv
cp
level3{
gsave
clp
[66.7761 38.5532 -38.5532 66.7761 720.755 499.143 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[66.7761 38.5532 -38.5532 66.7761 720.755 499.143 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
374.458 472.15 mo
368.231 472.064 365.622 466.181 368.87 461.017 cv
371.598 456.682 377.791 456.078 382.217 457.595 cv
387.923 459.549 390.432 466.166 388.401 471.607 cv
386.372 477.048 379.942 480.197 374.452 480.436 cv
368.266 480.703 361.891 478.93 357.136 474.877 cv
351.236 469.85 350.394 460.416 351.32 453.279 cv
353.167 439.039 364.775 430.277 378.48 428.674 cv
381.053 428.375 379.419 430.133 377.811 430.322 cv
368.098 431.457 359.461 437.521 356.33 446.985 cv
353.071 456.844 354.038 470.414 363.954 476.037 cv
368.364 478.537 374.702 479.898 379.433 477.698 cv
384.001 475.576 386.063 470.632 385.149 465.89 cv
384.35 461.732 379.112 456.945 374.615 458.848 cv
369.588 460.975 369.898 470.373 376.045 470.458 cv
378.5 470.492 375.606 472.166 374.458 472.15 cv
374.458 472.15 li
cp
level3{
gsave
clp
[37.7245 21.7803 -21.7803 37.7245 354.281 443.873 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[37.7245 21.7803 -21.7803 37.7245 354.281 443.873 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
336.286 434.033 mo
336.37 440.26 342.255 442.869 347.419 439.62 cv
351.754 436.893 352.357 430.699 350.841 426.273 cv
348.887 420.568 342.27 418.059 336.829 420.088 cv
331.388 422.119 328.238 428.549 328 434.039 cv
327.731 440.223 329.504 446.6 333.557 451.354 cv
338.583 457.255 348.02 458.098 355.156 457.171 cv
369.396 455.323 378.158 443.715 379.76 430.012 cv
380.06 427.438 378.302 429.07 378.113 430.68 cv
376.979 440.393 370.915 449.029 361.45 452.16 cv
351.592 455.42 338.021 454.452 332.399 444.537 cv
329.899 440.127 328.536 433.789 330.735 429.057 cv
332.859 424.489 337.803 422.428 342.545 423.342 cv
346.704 424.141 351.489 429.379 349.587 433.875 cv
347.461 438.903 338.062 438.592 337.977 432.445 cv
337.944 429.991 336.269 432.884 336.286 434.033 cv
336.286 434.033 li
cp
level3{
gsave
clp
[41.3857 23.894 -23.894 41.3857 330.604 425.521 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[41.3857 23.894 -23.894 41.3857 330.604 425.521 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
234.277 428.27 mo
234.277 428.27 259.86 427.106 268.921 427.111 cv
278.701 427.117 289.059 427.623 298.346 429.656 cv
308.324 431.842 317.036 430.232 324.694 425.609 cv
327.114 424.15 326.719 422.993 324.142 423.814 cv
318.026 426.289 308.222 426.942 298.307 426.258 cv
288.821 425.603 277.376 425.066 268.324 425.451 cv
259.271 425.836 234.22 426.902 234.22 426.902 cv
233.008 426.953 232.805 428.332 234.277 428.27 cv
cp
level3{
gsave
clp
[68.3365 39.4541 -39.4541 68.3365 245.586 406.122 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[68.3365 39.4541 -39.4541 68.3365 245.586 406.122 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
283.425 434.69 mo
280.156 433.299 276.22 432.21 266.443 431.987 cv
257.385 431.782 234.267 432.378 234.267 432.378 cv
232.793 432.408 233.027 431.033 234.24 431.01 cv
234.24 431.01 256.824 430.498 265.884 430.315 cv
274.941 430.131 285.02 431.266 290.151 432.969 cv
291.079 433.276 290.637 433.771 289.185 434.386 cv
287.733 435.002 285.918 435.751 283.425 434.69 cv
cp
level3{
gsave
clp
[43.8375 25.3096 -25.3096 43.8375 239.974 419.949 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[43.8375 25.3096 -25.3096 43.8375 239.974 419.949 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
372.243 526.342 mo
373.635 529.611 374.724 533.547 374.946 543.324 cv
375.151 552.383 374.556 575.5 374.556 575.5 cv
374.525 576.974 375.9 576.74 375.924 575.527 cv
375.924 575.527 376.436 552.943 376.618 543.883 cv
376.803 534.826 375.668 524.747 373.965 519.616 cv
373.657 518.688 373.163 519.131 372.548 520.582 cv
371.932 522.034 371.183 523.85 372.243 526.342 cv
cp
level3{
gsave
clp
[26.5296 15.3169 -15.3169 26.5296 361.139 540.206 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[26.5296 15.3169 -15.3169 26.5296 361.139 540.206 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
315.1 462.26 mo
318.145 457.951 315.547 453.113 310.509 452.661 cv
306.28 452.283 302.798 456.211 301.599 460.029 cv
300.051 464.951 303.181 470.102 307.795 471.532 cv
312.411 472.963 317.696 470.189 320.59 466.555 cv
323.846 462.455 325.847 457.169 325.533 451.811 cv
325.142 445.161 319.313 439.693 314.127 436.627 cv
303.778 430.508 292.194 433.917 284.309 442.474 cv
282.829 444.079 284.807 443.874 285.734 442.869 cv
291.322 436.803 299.639 434.031 307.464 436.794 cv
315.616 439.674 324.12 447.374 322.903 457.082 cv
322.363 461.398 320.109 466.447 316.295 468.547 cv
312.616 470.574 308.314 469.423 305.63 466.339 cv
303.274 463.636 302.715 457.565 306.211 455.471 cv
310.125 453.131 316.194 458.217 313.188 462.473 cv
311.988 464.17 314.538 463.059 315.1 462.26 cv
315.1 462.26 li
cp
level3{
gsave
clp
[37.9402 21.9048 -21.9048 37.9402 285.815 439.688 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[37.9402 21.9048 -21.9048 37.9402 285.815 439.688 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
378.885 575.406 mo
378.885 575.406 380.048 549.824 380.043 540.762 cv
380.038 530.982 379.532 520.624 377.499 511.338 cv
375.313 501.359 376.922 492.646 381.545 484.988 cv
383.004 482.57 384.162 482.965 383.341 485.541 cv
380.866 491.658 380.212 501.461 380.897 511.378 cv
381.553 520.861 382.089 532.307 381.704 541.36 cv
381.318 550.412 380.253 575.465 380.253 575.465 cv
380.201 576.675 378.824 576.879 378.885 575.406 cv
cp
level3{
gsave
clp
[38.3487 22.1406 -22.1406 38.3487 362.031 518.771 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[38.3487 22.1406 -22.1406 38.3487 362.031 518.771 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
344.895 494.583 mo
349.203 491.538 354.042 494.136 354.494 499.174 cv
354.872 503.402 350.943 506.885 347.125 508.086 cv
342.205 509.633 337.054 506.502 335.623 501.887 cv
334.193 497.271 336.964 491.986 340.601 489.094 cv
344.699 485.837 349.983 483.836 355.345 484.15 cv
361.993 484.541 367.461 490.371 370.529 495.557 cv
376.648 505.904 373.238 517.488 364.682 525.375 cv
363.075 526.855 363.282 524.877 364.287 523.951 cv
370.351 518.361 373.124 510.045 370.361 502.219 cv
367.481 494.066 359.781 485.563 350.073 486.781 cv
345.756 487.32 340.708 489.574 338.605 493.388 cv
336.581 497.067 337.731 501.367 340.814 504.053 cv
343.52 506.408 349.588 506.969 351.685 503.472 cv
354.023 499.558 348.938 493.49 344.682 496.494 cv
342.985 497.694 344.097 495.146 344.895 494.583 cv
344.895 494.583 li
cp
level3{
gsave
clp
[35.8724 20.7109 -20.7109 35.8724 337.893 491.735 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[35.8724 20.7109 -20.7109 35.8724 337.893 491.735 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
134.225 432.947 mo
130.605 429.009 125.582 427.951 120.418 427.637 cv
115.27 427.324 109.134 427.131 107.701 421.019 cv
107.441 419.909 103.707 420.593 103.941 421.593 cv
106.453 432.313 120.476 427.12 127.53 431.278 cv
127.743 431.403 127.938 431.539 128.141 431.669 cv
124.475 430.772 120.528 430.953 116.811 432.193 cv
110.023 434.456 107.639 441.941 111.088 448.099 cv
111.69 449.174 115.191 447.89 114.765 447.128 cv
112.667 443.383 112.017 435.403 117.313 433.637 cv
123.154 431.688 129.214 433.612 133.404 437.945 cv
133.52 438.064 133.7 438.131 133.913 438.163 cv
137.925 446.669 134.127 458.404 128.292 465.453 cv
127.35 466.592 131.014 466.49 131.654 465.715 cv
139.216 456.581 143.052 442.554 134.225 432.947 cv
cp
level3{
gsave
clp
[40.4207 23.3369 -23.3369 40.4207 98.7515 430.363 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.4207 23.3369 -23.3369 40.4207 98.7515 430.363 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
143.396 412.684 mo
145.203 412.839 146.898 413.7 148.479 415.283 cv
151.803 418.604 153.361 423.018 153.16 428.527 cv
152.917 434.197 150.802 440.408 146.808 447.154 cv
144.416 450.761 142.73 453.16 141.73 454.356 cv
141.15 455.23 140.479 456.245 139.73 457.399 cv
139.223 458.225 138.912 458.701 138.786 458.825 cv
138.629 458.985 138.416 459.098 138.15 459.157 cv
137.908 458.71 137.827 458.328 137.912 458.003 cv
137.968 457.862 138.171 457.536 138.514 457.029 cv
139.549 455.552 140.654 453.7 141.828 451.477 cv
143.186 448.856 144.27 446.253 145.081 443.663 cv
147.284 436.509 148.41 430.444 148.452 425.463 cv
148.473 420.659 147.486 417.267 145.501 415.281 cv
144.998 414.777 144.21 414.436 143.149 414.263 cv
142.087 414.093 141.327 414.231 140.885 414.673 cv
140.622 414.938 140.164 415.667 139.513 416.858 cv
138.869 418.057 138.219 418.98 137.573 419.623 cv
136.38 420.821 135.458 421.101 134.807 420.449 cv
134.319 419.957 134.582 419.211 135.599 418.197 cv
135.698 418.099 135.82 417.972 135.961 417.833 cv
136.121 417.709 136.227 417.63 136.268 417.588 cv
136.285 417.568 136.551 417.185 137.056 416.434 cv
137.566 415.685 138.144 414.987 138.786 414.338 cv
140.045 413.085 141.583 412.531 143.396 412.684 cv
cp
158.919 431.584 mo
159.598 431.557 160.128 431.728 160.517 432.115 cv
160.656 432.258 160.797 432.71 160.937 433.479 cv
161.083 434.251 161.217 434.7 161.335 434.82 cv
161.437 434.92 161.831 434.913 162.517 434.784 cv
164.283 434.527 165.23 434.386 165.378 434.363 cv
166.253 434.26 166.805 434.213 167.05 434.209 cv
167.515 434.232 167.917 434.412 168.266 434.757 cv
168.709 435.207 168.76 436.45 168.413 438.495 cv
168.272 439.241 168.133 439.998 167.985 440.744 cv
167.886 441.289 167.896 441.625 168.022 441.746 cv
168.161 441.888 168.603 442.036 169.344 442.187 cv
170.077 442.339 170.532 442.495 170.693 442.653 cv
170.917 442.878 171.029 443.245 171.029 443.753 cv
171.029 444.256 170.881 444.654 170.603 444.933 cv
170.378 445.157 168.405 446.059 164.679 447.642 cv
159.244 449.948 156.117 451.316 155.285 451.745 cv
152.917 452.978 150.627 454.542 148.421 456.425 cv
146.684 457.961 144.934 459.481 143.196 460.98 cv
141.996 461.975 141.21 462.278 140.825 461.896 cv
140.765 461.834 li
140.584 461.652 141.758 460.294 144.29 457.762 cv
144.979 457.071 146.053 456.121 147.508 454.9 cv
149.089 453.607 150.243 452.615 150.977 451.925 cv
152.144 450.792 153.243 449.782 154.253 448.885 cv
155.146 448.118 155.562 447.76 155.498 447.824 cv
156.17 447.15 156.392 446.712 156.17 446.488 cv
155.928 446.247 154.834 446.872 152.886 448.371 cv
150.656 450.112 148.035 452.495 145.019 455.513 cv
144.773 455.755 li
144.552 455.979 144.228 456.321 143.801 456.79 cv
143.374 457.253 143.043 457.609 142.802 457.849 cv
141.647 459.005 140.947 459.461 140.703 459.216 cv
140.521 459.036 140.665 458.648 141.13 458.062 cv
141.798 457.23 142.476 456.411 143.164 455.599 cv
146.445 451.634 148.536 449.057 149.421 447.886 cv
151.246 445.494 152.543 443.487 153.313 441.866 cv
154.208 439.967 155.074 437.777 155.928 435.304 cv
156.551 433.542 156.998 432.53 157.264 432.268 cv
157.691 431.843 158.241 431.612 158.919 431.584 cv
cp
146.108 460.553 mo
148.905 459.098 151.648 457.523 154.348 455.844 cv
159.369 452.684 164.481 450.712 169.688 449.921 cv
173.498 449.354 176.904 449.396 179.901 450.041 cv
182.796 450.712 185.083 451.886 186.766 453.564 cv
187.475 454.28 188.021 455.251 188.409 456.486 cv
188.853 457.781 188.996 458.974 188.836 460.068 cv
188.71 460.956 188.273 461.782 187.523 462.531 cv
186.332 463.724 185.114 464.572 183.879 465.085 cv
182.828 465.529 182.138 465.595 181.813 465.268 cv
181.712 465.167 181.8 464.79 182.072 464.155 cv
182.346 463.519 182.604 463.078 182.849 462.832 cv
183.052 462.629 183.449 462.388 184.049 462.093 cv
184.646 461.796 185.066 461.523 185.311 461.284 cv
186.24 460.35 186.724 459.337 186.752 458.231 cv
186.783 457.133 186.359 456.139 185.493 455.269 cv
184.072 453.851 181.205 453.213 176.891 453.351 cv
172.211 453.497 166.611 454.561 160.09 456.546 cv
155.166 458.028 150.092 460.224 144.865 463.14 cv
144.221 463.505 143.78 463.712 143.556 463.777 cv
143.214 463.876 142.913 463.799 142.647 463.532 cv
142.303 463.188 142.303 462.846 142.647 462.5 cv
142.812 462.334 143.965 461.691 146.108 460.553 cv
cp
level3{
gsave
clp
[58.4745 33.7603 -33.7603 58.4745 128.813 429.546 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[58.4745 33.7603 -33.7603 58.4745 128.813 429.546 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
22.7803 420.927 mo
98.0781 420.927 li
98.5498 420.927 100.491 420.954 100.436 421.805 cv
100.089 427.195 102.847 432.963 108.353 434.509 cv
108.611 434.581 109.583 434.977 109.173 435.42 cv
102.674 442.438 102.826 452.948 110.727 458.953 cv
115.283 462.417 122.333 461.325 125.194 456.308 cv
126.458 454.09 126.576 451.671 125.822 449.561 cv
124.825 450.466 123.223 450.815 121.627 450.323 cv
119.397 449.638 118.048 447.589 118.614 445.749 cv
119.152 444.003 121.223 443.088 123.339 443.586 cv
123.474 443.604 123.594 443.626 123.681 443.66 cv
123.683 443.661 123.685 443.661 123.686 443.663 cv
124.106 443.793 124.482 443.982 124.833 444.199 cv
129.243 446.534 131.445 451.485 129.101 456.369 cv
126.628 461.523 120.238 463.055 114.945 462.416 cv
108.545 461.644 103.2 457.126 101.197 451.015 cv
99.3525 445.386 101.411 439.535 105.106 435.283 cv
99.8174 433.23 96.5869 428.144 96.6191 422.452 cv
23.7002 422.452 li
22.0977 422.452 20.1797 420.927 22.7803 420.927 cv
cp
level3{
gsave
clp
[95.9072 55.3721 -55.3721 95.9072 31.2534 404.413 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[95.9072 55.3721 -55.3721 95.9072 31.2534 404.413 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
182.027 494.077 mo
175.916 492.646 175.723 486.51 175.409 481.36 cv
175.095 476.197 174.037 471.173 170.1 467.555 cv
160.493 458.727 146.466 462.562 137.331 470.124 cv
136.556 470.766 136.454 474.429 137.594 473.486 cv
144.643 467.651 156.377 463.854 164.883 467.865 cv
164.915 468.079 164.981 468.26 165.101 468.375 cv
169.434 472.564 171.357 478.623 169.409 484.465 cv
167.643 489.761 159.663 489.112 155.918 487.014 cv
155.157 486.587 153.872 490.088 154.947 490.691 cv
161.104 494.141 168.589 491.755 170.854 484.968 cv
172.093 481.251 172.273 477.305 171.377 473.639 cv
171.508 473.841 171.643 474.036 171.768 474.248 cv
175.927 481.303 170.734 495.325 181.453 497.837 cv
182.454 498.071 183.137 494.337 182.027 494.077 cv
cp
level3{
gsave
clp
[45.4367 26.2329 -26.2329 45.4367 139.812 465.735 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[45.4367 26.2329 -26.2329 45.4367 139.812 465.735 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
182.119 578.998 mo
182.119 503.7 li
182.119 503.229 182.093 501.287 181.242 501.342 cv
175.852 501.688 170.083 498.932 168.538 493.426 cv
168.465 493.167 168.07 492.195 167.627 492.606 cv
160.608 499.104 150.098 498.952 144.094 491.053 cv
140.629 486.495 141.721 479.445 146.738 476.584 cv
148.957 475.32 151.376 475.203 153.485 475.957 cv
152.58 476.953 152.231 478.557 152.723 480.151 cv
153.408 482.381 155.457 483.73 157.298 483.163 cv
159.043 482.626 159.958 480.555 159.46 478.439 cv
159.443 478.306 159.42 478.186 159.386 478.099 cv
159.385 478.096 159.385 478.094 159.384 478.093 cv
159.254 477.673 159.064 477.296 158.848 476.946 cv
156.512 472.536 151.562 470.333 146.678 472.678 cv
141.523 475.15 139.991 481.54 140.631 486.833 cv
141.403 493.234 145.921 498.579 152.032 500.582 cv
157.66 502.427 163.512 500.368 167.763 496.672 cv
169.815 501.961 174.903 505.191 180.595 505.16 cv
180.595 578.079 li
180.595 579.681 182.119 581.599 182.119 578.998 cv
cp
level3{
gsave
clp
[74.4148 42.9634 -42.9634 74.4148 127.286 502.903 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[74.4148 42.9634 -42.9634 74.4148 127.286 502.903 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
781.468 246.583 mo
781.015 246.032 779.5 246.474 776.919 247.928 cv
776.063 248.227 li
776.401 247.544 li
777.984 244.477 779.008 240.919 779.483 236.893 cv
779.951 233.344 779.919 231.249 779.394 230.609 cv
778.623 229.657 777.875 229.482 777.165 230.056 cv
776.882 230.293 776.721 230.654 776.669 231.157 cv
777.691 235.881 776.838 241.007 774.101 246.554 cv
771.154 252.405 766.397 258.025 759.823 263.401 cv
754.203 268.015 748.127 271.278 741.613 273.21 cv
735.974 274.883 730.602 275.422 725.509 274.836 cv
724.923 269.747 725.462 264.374 727.138 258.73 cv
729.068 252.215 732.332 246.144 736.944 240.523 cv
742.323 233.95 747.94 229.195 753.792 226.244 cv
759.341 223.507 764.466 222.654 769.189 223.678 cv
769.693 223.627 770.053 223.46 770.291 223.185 cv
770.867 222.466 770.69 221.726 769.737 220.951 cv
769.098 220.425 767.004 220.395 763.454 220.86 cv
759.43 221.338 755.871 222.361 752.803 223.943 cv
752.122 224.284 li
752.419 223.428 li
753.872 220.843 754.316 219.328 753.765 218.874 cv
752.223 217.613 748.772 220.254 743.425 226.789 cv
742.161 228.331 741.019 230.024 740.008 231.868 cv
738.987 233.719 738.507 234.592 738.576 234.514 cv
738.478 234.636 738.355 234.712 738.215 234.727 cv
738.206 234.326 738.274 233.109 738.403 231.102 cv
738.457 230.146 738.38 229.596 738.176 229.426 cv
737.542 228.917 736.501 229.546 735.047 231.328 cv
732.908 233.944 731.035 237.958 729.432 243.395 cv
728.046 248.543 726.686 253.68 725.339 258.799 cv
722.45 269.198 721.896 275.13 723.674 276.589 cv
723.689 276.601 723.71 276.609 723.726 276.621 cv
723.738 276.636 723.746 276.658 723.758 276.673 cv
725.214 278.452 731.148 277.898 741.546 275.01 cv
746.664 273.661 751.803 272.302 756.949 270.915 cv
762.386 269.313 766.402 267.44 769.019 265.299 cv
770.798 263.845 771.431 262.805 770.917 262.172 cv
770.75 261.967 770.197 261.891 769.243 261.946 cv
767.236 262.072 766.019 262.139 765.62 262.134 cv
765.632 261.992 765.709 261.867 765.832 261.773 cv
765.751 261.841 766.625 261.36 768.48 260.338 cv
770.321 259.329 772.016 258.187 773.556 256.921 cv
780.092 251.576 782.729 248.125 781.468 246.583 cv
cp
level3{
gsave
clp
[42.5596 24.5718 -24.5718 42.5596 730.167 239.3 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[42.5596 24.5718 -24.5718 42.5596 730.167 239.3 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
741.788 258.436 mo
741.817 257.999 741.841 257.563 741.905 257.116 cv
743.519 245.694 751.512 237.484 763.393 236.831 cv
762.741 248.713 754.531 256.706 743.107 258.322 cv
742.663 258.382 742.224 258.409 741.788 258.436 cv
cp
764.036 235.088 mo
763.8 235.058 763.541 235.043 763.242 235.062 cv
750.642 235.75 737.664 244.461 737.452 258.124 cv
730.542 256.619 725.885 250.392 727.686 242.29 cv
727.794 241.81 728.026 239.465 727.073 239.465 cv
620.892 239.465 li
619.558 239.465 619.319 243.808 620.511 243.808 cv
725.625 243.808 li
724.601 252.863 728.623 260.668 737.796 262.427 cv
739.558 271.598 747.365 275.624 756.417 274.602 cv
756.417 379.713 li
756.417 380.905 760.76 380.668 760.76 379.334 cv
760.76 273.15 li
760.76 272.199 758.416 272.43 757.937 272.539 cv
749.834 274.341 743.608 269.684 742.101 262.772 cv
755.765 262.564 764.475 249.587 765.166 236.983 cv
765.183 236.687 765.167 236.427 765.135 236.188 cv
765.025 235.535 764.589 235.143 764.036 235.088 cv
cp
level3{
gsave
clp
[165.842 95.749 -95.749 165.842 625.968 229.968 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[165.842 95.749 -95.749 165.842 625.968 229.968 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
769.451 279.878 mo
754.903 283.718 739.693 282.442 728.288 271.918 cv
717.781 260.513 716.51 245.313 720.347 230.773 cv
720.503 230.182 720.398 228.857 719.512 228.857 cv
620.918 228.857 li
619.515 228.857 619.293 231.75 620.665 231.75 cv
717.95 231.75 li
714.614 246.029 715.962 260.824 725.309 272.357 cv
725.306 272.542 725.391 272.739 725.604 272.939 cv
725.899 273.217 726.208 273.463 726.508 273.729 cv
726.77 274.024 727.012 274.329 727.286 274.619 cv
727.485 274.832 727.681 274.917 727.866 274.915 cv
739.401 284.262 754.193 285.612 768.474 282.275 cv
768.474 379.562 li
768.474 380.932 771.37 380.708 771.37 379.307 cv
771.37 280.712 li
771.37 279.826 770.043 279.721 769.451 279.878 cv
cp
level3{
gsave
clp
[178.525 103.071 -103.071 178.525 618.551 231.963 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[178.525 103.071 -103.071 178.525 618.551 231.963 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
693.92 73.1035 mo
694.112 72.9111 694.825 72.4229 696.065 71.6387 cv
697.776 70.5537 699.497 69.6035 701.225 68.7822 cv
704.713 67.1436 708.475 66.1904 712.508 65.9326 cv
715.771 65.7051 718.999 65.8594 722.194 66.4023 cv
724.657 66.8057 726.007 67.125 726.254 67.374 cv
726.531 67.6504 726.522 67.9395 726.225 68.2354 cv
726.104 68.3545 725.431 68.4697 724.209 68.5781 cv
722.481 68.7324 720.831 69.0029 719.26 69.3877 cv
714.324 70.5918 710.386 72.6572 707.452 75.5938 cv
706.79 76.2559 706.124 77.0205 705.452 77.8828 cv
704.78 78.748 704.379 79.2393 704.257 79.3584 cv
703.946 79.6729 703.631 79.6729 703.317 79.3584 cv
703.125 79.1689 703.221 78.6006 703.608 77.6592 cv
703.869 77.0518 704.131 76.4365 704.393 75.8281 cv
704.547 75.4248 704.548 75.1475 704.39 74.9902 cv
704.112 74.709 702.584 74.7178 699.808 75.0166 cv
696.581 75.3447 694.53 75.0801 693.659 74.2061 cv
693.377 73.9229 693.465 73.5566 693.92 73.1035 cv
cp
723.319 76.5869 mo
721.102 78.8047 718.511 81.8818 715.545 85.8252 cv
715.248 86.1914 714.952 86.5605 714.653 86.9287 cv
714.446 87.208 714.393 87.3984 714.499 87.5059 cv
714.672 87.6826 715.403 87.2783 716.696 86.3018 cv
718.232 85.1494 720.004 83.5654 722.011 81.5586 cv
724.245 79.3262 725.919 77.3516 727.038 75.6426 cv
727.927 74.3027 728.25 73.5068 728.007 73.2627 cv
727.551 72.8076 725.99 73.918 723.319 76.5869 cv
cp
705.571 83.9688 mo
705.815 83.7227 706.374 83.2998 707.245 82.6846 cv
708.116 82.0771 708.788 81.5352 709.26 81.0654 cv
710.483 79.8428 711.698 78.5322 712.901 77.1357 cv
714.102 75.7393 714.743 75.0049 714.809 74.9365 cv
715.753 73.9932 716.997 73.1689 718.542 72.4629 cv
720.087 71.7559 721.731 71.2305 723.477 70.8809 cv
724.489 70.7041 725.5 70.5303 726.513 70.3574 cv
727.092 70.1621 727.674 69.9648 728.268 69.7539 cv
728.913 69.6289 729.499 69.8311 730.02 70.3574 cv
730.335 70.6689 730.493 71.0703 730.493 71.5615 cv
730.442 74.8945 730.285 77.3896 730.02 79.0488 cv
729.833 80.251 729.348 81.666 728.583 83.2881 cv
727.811 84.9102 726.901 86.3604 725.833 87.6328 cv
724.402 89.3438 721.434 92.4541 716.932 96.9561 cv
716.549 97.3389 716.209 97.3838 715.912 97.085 cv
715.371 96.5459 715.334 95.6533 715.806 94.4121 cv
716.104 93.6299 716.259 93.1768 716.279 93.0527 cv
716.365 92.6533 716.286 92.3301 716.042 92.0859 cv
715.571 91.6143 714.789 91.4961 713.698 91.7314 cv
712.609 91.9658 711.451 92.5742 710.229 93.5508 cv
709.374 94.3018 708.518 95.0498 707.665 95.8037 cv
707.106 96.2568 706.66 96.3174 706.328 95.9844 cv
705.944 95.5996 705.813 95.2266 705.936 94.8623 cv
706.338 94.4238 707.165 93.1914 708.422 91.1699 cv
709.053 89.9824 709.444 88.7666 709.598 87.5293 cv
709.725 86.499 709.663 85.8604 709.418 85.6211 cv
709.157 85.3564 708.455 85.4336 707.31 85.8447 cv
706.167 86.25 705.436 86.3018 705.125 85.9873 cv
704.6 85.4639 704.75 84.7881 705.571 83.9688 cv
cp
731.225 72.9746 mo
731.506 72.6953 732.012 72.9229 732.746 73.6553 cv
734.037 74.9482 734.978 76.9717 735.57 79.7275 cv
736.216 82.7129 736.339 86.168 735.937 90.0977 cv
735.589 93.4492 734.306 97.1602 732.091 101.222 cv
730.52 104.085 729.166 106.082 728.034 107.216 cv
727.001 108.249 726.27 108.545 725.833 108.108 cv
725.537 107.813 725.579 106.772 725.961 104.991 cv
726.452 102.69 726.61 100.717 726.436 99.0762 cv
725.807 98.3955 li
725.09 98.583 724.096 99.1113 722.823 99.9658 cv
721.932 100.54 721.332 100.674 721.016 100.359 cv
720.491 99.8359 720.458 99.3477 720.911 98.8926 cv
721 98.8057 721.165 98.667 721.407 98.4746 cv
721.653 98.2822 721.826 98.1348 721.932 98.0293 cv
728.409 91.5508 731.942 85.7832 732.538 80.7246 cv
732.765 78.6475 732.317 76.333 731.2 73.7842 cv
731.043 73.418 731.053 73.1455 731.225 72.9746 cv
cp
level3{
gsave
clp
[40.8833 23.604 -23.604 40.8833 695.543 70.1387 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.8833 23.604 -23.604 40.8833 695.543 70.1387 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
712.853 39.0352 mo
711.994 47.1963 716.211 56.4775 724.542 58.9512 cv
726.854 59.6416 722.535 60.9092 721.414 60.5781 cv
712.409 57.9023 702.926 47.1123 705.139 38.2627 cv
705.333 37.4932 706.088 36.2109 708.707 35.9482 cv
710.635 35.7559 713.13 36.3994 712.853 39.0352 cv
cp
level3{
gsave
clp
[24.3282 14.0459 -14.0459 24.3282 703.335 41.2085 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.3282 14.0459 -14.0459 24.3282 703.335 41.2085 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
732.802 61.8203 mo
730.673 62.2822 728.566 62.5635 726.479 62.7061 cv
726.163 62.5684 725.82 62.4629 725.475 62.4189 cv
704.116 59.6953 695.612 35.9766 680.559 23.8271 cv
679.635 23.083 677.66 23.2217 677.081 25.7285 cv
676.51 28.0713 676.674 30.4883 677.853 31.6104 cv
684.469 37.8896 690 43.8447 696.655 49.832 cv
702.324 54.9355 709.04 59.5757 717.065 62.3008 cv
709.646 61.1445 702.616 58.0645 696.178 53.4609 cv
688.878 48.2432 683.279 40.833 676.346 35.127 cv
664.184 25.1133 646.473 20.8857 631.571 25.5361 cv
629.16 26.3086 627.811 30.165 629.354 32.0918 cv
630.896 34.0215 633.885 35.7559 637.645 34.5029 cv
648.098 31.2422 657.797 27.9463 665.317 31.2842 cv
667.792 32.3848 670.095 33.9507 672.345 35.7036 cv
669.228 35.1406 666.005 35.291 662.778 36.2109 cv
659.002 37.2861 652.733 40.8945 652.998 45.5605 cv
653.169 47.4238 654.809 48.8701 656.254 48.9668 cv
657.701 49.0625 659.823 48.7734 659.823 47.1328 cv
659.69 44.8164 660.233 42.2959 661.847 40.8662 cv
666.25 36.9697 671.331 36.3799 676.334 39.3594 cv
676.468 39.4395 676.667 39.5039 676.9 39.5547 cv
682.525 44.7104 687.434 50.5996 693.686 55.0674 cv
705.963 63.8457 721.278 66.667 735.907 63.4961 cv
738.226 62.9893 733.927 61.5781 732.802 61.8203 cv
cp
level3{
gsave
clp
[95.8438 55.3354 -55.3354 95.8438 635.208 17.3833 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[95.8438 55.3354 -55.3354 95.8438 635.208 17.3833 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
742.339 61.8555 mo
757.068 69.873 772.976 84.1826 772.453 102.188 cv
772.359 105.341 774.366 103.291 774.423 101.292 cv
774.992 81.7461 760.269 66.7422 743.997 57.7734 cv
735.027 41.502 720.026 26.7803 700.479 27.3457 cv
698.479 27.4043 696.43 29.4111 699.579 29.3174 cv
717.586 28.7939 731.895 44.7012 739.914 59.4307 cv
740.333 60.3457 741.068 61.1816 742.339 61.8555 cv
cp
level3{
gsave
clp
[89.1905 51.4941 -51.4941 89.1905 693.035 37.1431 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[89.1905 51.4941 -51.4941 89.1905 693.035 37.1431 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
762.735 88.917 mo
754.572 89.7764 745.292 85.5576 742.818 77.2295 cv
742.128 74.915 740.859 79.2344 741.192 80.3564 cv
743.867 89.3604 754.657 98.8457 763.505 96.6299 cv
764.279 96.4375 765.558 95.6816 765.82 93.0625 cv
766.013 91.1348 765.373 88.6396 762.735 88.917 cv
cp
level3{
gsave
clp
[25.4107 14.6709 -14.6709 25.4107 739.597 80.9131 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[25.4107 14.6709 -14.6709 25.4107 739.597 80.9131 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
748.308 105.592 mo
743.706 99.1533 740.625 92.1235 739.469 84.7056 cv
742.194 92.731 746.833 99.4463 751.937 105.115 cv
757.927 111.772 763.88 117.3 770.159 123.917 cv
771.281 125.096 773.7 125.257 776.041 124.689 cv
778.547 124.109 778.687 122.133 777.942 121.208 cv
765.793 106.157 742.074 97.6553 739.35 76.2959 cv
739.306 75.9512 739.201 75.6084 739.064 75.2915 cv
739.207 73.2041 739.488 71.0967 739.95 68.9678 cv
740.191 67.8428 738.781 63.543 738.274 65.8643 cv
735.101 80.4922 737.925 95.8086 746.702 108.082 cv
751.169 114.333 757.056 119.242 762.213 124.869 cv
762.265 125.103 762.33 125.301 762.41 125.436 cv
765.39 130.44 764.799 135.52 760.903 139.923 cv
759.474 141.538 756.953 142.08 754.636 141.946 cv
752.996 141.946 752.708 144.068 752.804 145.514 cv
752.9 146.962 754.347 148.601 756.208 148.772 cv
760.876 149.037 764.482 142.768 765.558 138.991 cv
766.478 135.764 766.628 132.541 766.066 129.423 cv
767.818 131.672 769.384 133.977 770.484 136.454 cv
773.824 143.972 770.527 153.671 767.266 164.123 cv
766.013 167.884 767.749 170.874 769.677 172.416 cv
771.605 173.958 775.462 172.608 776.234 170.198 cv
780.882 155.295 776.656 137.587 766.643 125.424 cv
760.935 118.49 753.527 112.892 748.308 105.592 cv
cp
level3{
gsave
clp
[73.7948 42.6055 -42.6055 73.7948 719.241 98.6294 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[73.7948 42.6055 -42.6055 73.7948 719.241 98.6294 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
747.111 57.4844 mo
751.15 54.335 757.974 51.9707 763.177 52.0811 cv
766.957 52.166 771.167 53.123 773.471 56.4707 cv
775.908 60.0078 773.697 62.9141 771.591 63.0215 cv
771.494 62.6182 771.376 62.2119 771.163 61.8203 cv
770.138 59.9209 768.108 59.0313 766.634 59.832 cv
765.305 60.5498 764.941 62.3877 765.619 64.1367 cv
765.67 64.3711 765.734 64.5762 765.817 64.7119 cv
766.091 65.1602 766.402 65.5566 766.734 65.9063 cv
766.757 65.9297 766.785 65.9492 766.808 65.9727 cv
769.021 68.2324 772.332 68.3643 774.89 65.9844 cv
777.595 63.4658 777.599 59.1328 776.685 56.0664 cv
773.697 46.0273 760.753 46.377 751.81 49.959 cv
755.392 41.0137 755.74 28.0732 745.702 25.083 cv
742.636 24.1699 738.304 24.1748 735.787 26.8789 cv
733.404 29.4375 733.539 32.749 735.798 34.96 cv
735.822 34.9863 735.839 35.0117 735.865 35.0352 cv
736.215 35.3691 736.609 35.6787 737.057 35.9531 cv
737.193 36.0381 737.398 36.0986 737.633 36.1504 cv
739.38 36.8291 741.218 36.4648 741.937 35.1367 cv
742.738 33.6621 741.85 31.6318 739.951 30.6064 cv
739.558 30.3926 739.152 30.2754 738.748 30.1787 cv
738.857 28.0732 741.761 25.8623 745.298 28.2988 cv
748.646 30.6035 749.605 34.8125 749.687 38.5918 cv
749.8 43.7949 747.435 50.6191 744.286 54.6582 cv
743.869 55.1396 743.869 56.2334 744.64 57.0693 cv
745.443 57.8721 746.628 58.0293 747.111 57.4844 cv
cp
level3{
gsave
clp
[46.6698 26.9448 -26.9448 46.6698 731.884 33.2656 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.6698 26.9448 -26.9448 46.6698 731.884 33.2656 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
147.327 256.41 mo
145.274 257.476 143.259 258.625 141.28 259.854 cv
137.59 262.167 133.835 263.611 130.012 264.188 cv
127.212 264.601 124.716 264.572 122.513 264.1 cv
120.386 263.611 118.708 262.75 117.472 261.519 cv
116.95 261.002 116.55 260.29 116.268 259.385 cv
115.938 258.439 115.836 257.564 115.954 256.766 cv
116.044 256.112 116.364 255.513 116.915 254.965 cv
117.793 254.09 118.687 253.469 119.591 253.098 cv
120.366 252.774 120.869 252.726 121.109 252.965 cv
121.183 253.036 121.119 253.307 120.921 253.776 cv
120.718 254.245 120.525 254.563 120.348 254.741 cv
120.199 254.888 119.909 255.072 119.467 255.289 cv
119.03 255.503 118.72 255.697 118.542 255.876 cv
117.856 256.555 117.502 257.303 117.484 258.108 cv
117.459 258.915 117.77 259.641 118.409 260.275 cv
119.448 261.313 121.555 261.779 124.721 261.677 cv
128.157 261.571 132.272 260.792 137.062 259.343 cv
140.68 258.26 144.403 256.654 148.244 254.52 cv
148.718 254.255 149.039 254.101 149.201 254.053 cv
149.458 253.98 149.679 254.041 149.875 254.232 cv
150.127 254.484 150.124 254.734 149.869 254.987 cv
149.752 255.103 148.903 255.579 147.327 256.41 cv
cp
level3{
gsave
clp
[24.8703 14.3589 -14.3589 24.8703 119.663 249.931 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.8703 14.3589 -14.3589 24.8703 119.663 249.931 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
145.029 252.721 mo
142.741 252.39 140.434 252.144 138.112 251.984 cv
133.764 251.707 129.875 250.683 126.433 248.925 cv
123.923 247.621 121.909 246.139 120.395 244.472 cv
118.957 242.826 118.096 241.151 117.813 239.429 cv
117.69 238.707 117.782 237.894 118.079 236.996 cv
118.366 236.038 118.792 235.264 119.355 234.683 cv
119.811 234.209 120.421 233.912 121.185 233.783 cv
122.409 233.589 123.499 233.608 124.451 233.833 cv
125.27 234.018 125.706 234.279 125.76 234.612 cv
125.777 234.714 125.568 234.897 125.132 235.162 cv
124.696 235.42 124.354 235.569 124.105 235.606 cv
123.9 235.643 123.556 235.619 123.072 235.538 cv
122.593 235.456 122.226 235.433 121.977 235.475 cv
121.022 235.626 120.301 236.023 119.814 236.67 cv
119.322 237.308 119.149 238.08 119.299 238.967 cv
119.536 240.417 120.977 242.026 123.604 243.791 cv
126.457 245.711 130.251 247.485 134.983 249.108 cv
138.553 250.337 142.515 251.208 146.877 251.721 cv
147.42 251.782 147.771 251.844 147.93 251.901 cv
148.18 251.995 148.323 252.169 148.372 252.438 cv
148.429 252.792 148.279 252.995 147.924 253.05 cv
147.762 253.076 146.794 252.965 145.029 252.721 cv
cp
level3{
gsave
clp
[29.6994 17.147 -17.147 29.6994 117.897 236.936 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[29.6994 17.147 -17.147 29.6994 117.897 236.936 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
153.63 258.753 mo
153.686 258.4 153.887 258.251 154.24 258.308 cv
154.509 258.354 154.685 258.498 154.777 258.748 cv
154.834 258.906 154.897 259.26 154.957 259.802 cv
155.471 264.166 156.34 268.125 157.57 271.696 cv
159.194 276.425 160.967 280.222 162.888 283.077 cv
164.652 285.7 166.261 287.142 167.711 287.379 cv
168.599 287.526 169.371 287.357 170.008 286.865 cv
170.655 286.377 171.051 285.655 171.205 284.702 cv
171.246 284.452 171.224 284.087 171.141 283.608 cv
171.06 283.123 171.035 282.779 171.072 282.575 cv
171.11 282.325 171.259 281.981 171.517 281.547 cv
171.78 281.112 171.965 280.902 172.067 280.918 cv
172.399 280.974 172.66 281.408 172.847 282.227 cv
173.072 283.179 173.09 284.269 172.896 285.496 cv
172.768 286.258 172.468 286.867 171.995 287.322 cv
171.415 287.888 170.642 288.313 169.684 288.601 cv
168.785 288.897 167.973 288.991 167.248 288.868 cv
165.527 288.582 163.853 287.721 162.207 286.284 cv
160.539 284.769 159.059 282.753 157.754 280.248 cv
155.994 276.805 154.972 272.915 154.695 268.566 cv
154.534 266.247 154.289 263.938 153.956 261.648 cv
153.714 259.883 153.604 258.917 153.63 258.753 cv
cp
level3{
gsave
clp
[26.2869 15.1768 -15.1768 26.2869 148.814 266.983 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[26.2869 15.1768 -15.1768 26.2869 148.814 266.983 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
137.923 277.601 mo
137.424 277.622 137.034 277.493 136.751 277.211 cv
136.646 277.105 136.543 276.772 136.439 276.208 cv
136.335 275.646 136.236 275.321 136.147 275.232 cv
136.073 275.161 135.786 275.163 135.279 275.252 cv
133.982 275.446 133.287 275.548 133.181 275.565 cv
132.539 275.642 132.133 275.673 131.952 275.677 cv
131.608 275.661 131.311 275.53 131.061 275.276 cv
130.73 274.951 130.695 274.04 130.946 272.543 cv
131.056 271.996 131.157 271.448 131.26 270.9 cv
131.337 270.5 131.326 270.255 131.237 270.162 cv
131.137 270.062 130.809 269.954 130.269 269.843 cv
129.725 269.731 129.393 269.616 129.275 269.498 cv
129.112 269.336 129.028 269.068 129.031 268.7 cv
129.028 268.327 129.134 268.041 129.344 267.833 cv
129.509 267.669 130.957 267.009 133.692 265.855 cv
137.681 264.166 139.979 263.165 140.588 262.857 cv
142.329 261.953 144.011 260.806 145.631 259.431 cv
146.91 258.306 148.188 257.193 149.467 256.099 cv
150.348 255.372 150.927 255.149 151.209 255.43 cv
151.255 255.474 li
151.39 255.61 150.526 256.601 148.667 258.454 cv
148.158 258.958 147.373 259.652 146.304 260.543 cv
145.142 261.492 144.293 262.219 143.757 262.719 cv
142.895 263.548 142.09 264.291 141.347 264.94 cv
140.695 265.505 140.389 265.763 140.435 265.717 cv
139.94 266.209 139.776 266.537 139.94 266.699 cv
140.12 266.876 140.921 266.414 142.352 265.32 cv
143.99 264.044 145.913 262.306 148.131 260.095 cv
148.308 259.918 li
148.473 259.758 148.708 259.506 149.024 259.165 cv
149.337 258.823 149.582 258.566 149.762 258.387 cv
150.608 257.543 151.123 257.208 151.302 257.387 cv
151.436 257.52 151.327 257.801 150.989 258.231 cv
150.495 258.839 149.997 259.439 149.494 260.031 cv
147.082 262.936 145.55 264.817 144.897 265.676 cv
143.557 267.422 142.605 268.891 142.041 270.077 cv
141.385 271.47 140.744 273.069 140.12 274.877 cv
139.658 276.166 139.329 276.905 139.141 277.096 cv
138.822 277.412 138.421 277.574 137.923 277.601 cv
cp
level3{
gsave
clp
[12.1379 7.00781 -7.00781 12.1379 133.325 260.867 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.1379 7.00781 -7.00781 12.1379 133.325 260.867 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
149.324 291.422 mo
147.994 291.309 146.749 290.674 145.585 289.52 cv
143.147 287.09 142.002 283.863 142.149 279.833 cv
142.329 275.682 143.883 271.139 146.815 266.209 cv
148.57 263.574 149.813 261.817 150.541 260.946 cv
150.974 260.306 151.461 259.564 152.014 258.72 cv
152.386 258.112 152.618 257.764 152.704 257.676 cv
152.822 257.558 152.981 257.474 153.176 257.43 cv
153.352 257.757 153.413 258.039 153.352 258.275 cv
153.306 258.38 153.158 258.619 152.907 258.985 cv
152.149 260.069 151.337 261.425 150.476 263.052 cv
149.478 264.963 148.683 266.868 148.086 268.766 cv
146.467 273.994 145.642 278.432 145.608 282.077 cv
145.596 285.587 146.314 288.07 147.773 289.522 cv
148.148 289.892 148.724 290.14 149.505 290.265 cv
150.285 290.39 150.839 290.291 151.169 289.965 cv
151.359 289.774 151.692 289.241 152.17 288.365 cv
152.646 287.492 153.122 286.817 153.599 286.342 cv
154.477 285.471 155.151 285.269 155.629 285.744 cv
155.987 286.1 155.791 286.646 155.049 287.386 cv
154.975 287.463 154.885 287.548 154.779 287.655 cv
154.661 287.745 154.589 287.802 154.559 287.833 cv
154.543 287.846 154.348 288.127 153.979 288.68 cv
153.604 289.224 153.182 289.736 152.704 290.209 cv
151.782 291.13 150.655 291.535 149.324 291.422 cv
cp
level3{
gsave
clp
[15.4768 8.93555 -8.93555 15.4768 144.24 270.661 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.4768 8.93555 -8.93555 15.4768 144.24 270.661 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
185.118 275.588 mo
185.011 275.582 184.86 275.813 184.647 276.278 cv
184.445 276.745 184.341 277.101 184.333 277.353 cv
184.323 277.561 184.389 277.899 184.527 278.37 cv
184.668 278.836 184.735 279.193 184.727 279.449 cv
184.691 280.416 184.387 281.178 183.807 281.741 cv
183.233 282.308 182.486 282.575 181.589 282.538 cv
180.12 282.477 178.347 281.246 176.271 278.855 cv
174.019 276.256 171.791 272.712 169.599 268.216 cv
168.295 265.549 167.188 262.606 166.264 259.404 cv
167.203 259.666 168.117 259.95 169.008 260.256 cv
173.739 261.881 177.535 263.653 180.39 265.574 cv
183.014 267.338 184.455 268.947 184.694 270.398 cv
184.839 271.285 184.67 272.058 184.178 272.694 cv
183.691 273.341 182.968 273.738 182.016 273.892 cv
181.766 273.933 181.4 273.911 180.922 273.828 cv
180.436 273.746 180.092 273.723 179.889 273.758 cv
179.637 273.798 179.294 273.946 178.86 274.205 cv
178.426 274.467 178.215 274.65 178.23 274.754 cv
178.287 275.085 178.722 275.346 179.54 275.534 cv
180.491 275.759 181.581 275.778 182.809 275.582 cv
183.571 275.455 184.18 275.155 184.635 274.681 cv
185.2 274.102 185.628 273.33 185.914 272.371 cv
186.21 271.473 186.303 270.658 186.18 269.935 cv
185.896 268.213 185.033 266.539 183.596 264.894 cv
182.082 263.227 180.067 261.746 177.561 260.442 cv
174.118 258.681 170.229 257.658 165.88 257.382 cv
165.824 257.378 165.769 257.372 165.713 257.368 cv
165.659 257.153 165.595 256.95 165.542 256.733 cv
165.417 256.202 165.312 255.857 165.235 255.709 cv
165.114 255.472 164.923 255.351 164.652 255.336 cv
164.292 255.324 164.11 255.495 164.097 255.853 cv
164.093 255.965 164.198 256.438 164.405 257.252 cv
162.582 257.097 160.764 256.905 158.962 256.643 cv
157.196 256.399 156.229 256.291 156.066 256.316 cv
155.713 256.373 155.565 256.574 155.621 256.926 cv
155.667 257.195 155.812 257.373 156.062 257.464 cv
156.22 257.52 156.572 257.584 157.115 257.643 cv
159.867 257.968 162.44 258.45 164.874 259.058 cv
165.441 261.168 165.941 263.303 166.363 265.461 cv
167.169 269.744 168.665 273.477 170.829 276.678 cv
172.433 279.009 174.148 280.827 175.993 282.123 cv
177.802 283.348 179.568 283.998 181.313 284.067 cv
182.044 284.1 182.84 283.911 183.694 283.504 cv
184.612 283.102 185.328 282.585 185.834 281.954 cv
186.247 281.441 186.469 280.799 186.502 280.029 cv
186.543 278.789 186.393 277.711 186.052 276.791 cv
185.766 276.002 185.454 275.6 185.118 275.588 cv
cp
150.627 241.101 mo
150.477 241.024 150.135 240.919 149.604 240.794 cv
149.496 240.768 149.396 240.736 149.288 240.709 cv
149.003 236.397 147.985 232.535 146.237 229.118 cv
144.933 226.611 143.452 224.595 141.784 223.083 cv
140.14 221.645 138.465 220.783 136.743 220.5 cv
136.021 220.376 135.206 220.468 134.308 220.766 cv
133.35 221.051 132.577 221.478 131.996 222.043 cv
131.523 222.5 131.225 223.108 131.097 223.871 cv
130.901 225.098 130.92 226.188 131.146 227.138 cv
131.331 227.957 131.592 228.392 131.925 228.449 cv
132.027 228.463 132.211 228.252 132.475 227.819 cv
132.733 227.383 132.882 227.042 132.92 226.79 cv
132.956 226.585 132.933 226.244 132.851 225.756 cv
132.77 225.279 132.745 224.913 132.787 224.663 cv
132.94 223.712 133.336 222.987 133.984 222.501 cv
134.62 222.007 135.393 221.839 136.28 221.985 cv
137.73 222.222 139.34 223.665 141.104 226.29 cv
143.025 229.144 144.797 232.939 146.422 237.67 cv
146.698 238.473 146.95 239.301 147.19 240.143 cv
143.888 239.204 140.857 238.077 138.12 236.738 cv
133.625 234.545 130.078 232.318 127.481 230.063 cv
125.091 227.99 123.856 226.214 123.799 224.748 cv
123.763 223.85 124.028 223.102 124.595 222.529 cv
125.158 221.95 125.922 221.645 126.887 221.61 cv
127.142 221.601 127.5 221.668 127.967 221.808 cv
128.437 221.947 128.774 222.014 128.982 222.003 cv
129.234 221.996 129.591 221.891 130.058 221.689 cv
130.522 221.476 130.753 221.324 130.748 221.218 cv
130.735 220.882 130.333 220.57 129.545 220.285 cv
128.627 219.945 127.548 219.792 126.31 219.834 cv
125.535 219.868 124.895 220.088 124.383 220.501 cv
123.752 221.007 123.234 221.724 122.832 222.641 cv
122.427 223.496 122.236 224.292 122.27 225.023 cv
122.338 226.767 122.987 228.534 124.214 230.342 cv
125.512 232.187 127.327 233.904 129.657 235.506 cv
132.858 237.67 136.593 239.167 140.874 239.973 cv
143.125 240.413 145.354 240.934 147.553 241.531 cv
148.195 244.044 148.699 246.709 149.036 249.565 cv
149.095 250.106 149.158 250.458 149.214 250.617 cv
149.307 250.869 149.482 251.01 149.752 251.056 cv
150.104 251.113 150.307 250.965 150.363 250.613 cv
150.389 250.448 150.279 249.481 150.035 247.716 cv
149.761 245.828 149.561 243.922 149.403 242.011 cv
150.02 242.164 150.386 242.242 150.482 242.239 cv
150.839 242.226 151.013 242.044 151 241.684 cv
150.984 241.414 150.864 241.221 150.627 241.101 cv
cp
186.832 248.273 mo
184.402 245.834 181.175 244.689 177.146 244.836 cv
172.995 245.016 168.452 246.571 163.521 249.502 cv
160.887 251.256 159.131 252.5 158.259 253.228 cv
157.619 253.662 156.877 254.147 156.033 254.699 cv
155.424 255.072 155.076 255.303 154.99 255.391 cv
154.872 255.507 154.788 255.667 154.744 255.864 cv
155.071 256.039 155.353 256.101 155.588 256.039 cv
155.693 255.993 155.931 255.845 156.299 255.595 cv
157.381 254.836 158.738 254.024 160.366 253.164 cv
162.276 252.166 164.182 251.369 166.079 250.773 cv
171.308 249.154 175.745 248.329 179.39 248.295 cv
182.901 248.283 185.382 249 186.834 250.458 cv
187.205 250.835 187.453 251.411 187.579 252.192 cv
187.704 252.969 187.604 253.528 187.279 253.855 cv
187.088 254.044 186.553 254.38 185.679 254.857 cv
184.807 255.334 184.131 255.809 183.655 256.285 cv
182.783 257.164 182.581 257.841 183.057 258.316 cv
183.413 258.674 183.959 258.479 184.698 257.735 cv
184.775 257.662 184.863 257.573 184.967 257.466 cv
185.057 257.349 185.115 257.277 185.146 257.248 cv
185.159 257.231 185.44 257.035 185.993 256.664 cv
186.538 256.291 187.05 255.868 187.522 255.391 cv
188.442 254.469 188.847 253.34 188.734 252.011 cv
188.622 250.681 187.987 249.435 186.832 248.273 cv
cp
159.017 247.736 mo
160.183 246.308 161.074 245.268 161.69 244.606 cv
162.708 243.548 163.619 242.56 164.416 241.649 cv
165.11 240.848 165.428 240.469 165.372 240.528 cv
165.974 239.922 166.375 239.72 166.577 239.922 cv
166.793 240.142 166.224 241.128 164.881 242.882 cv
163.316 244.896 161.182 247.258 158.468 249.978 cv
158.25 250.198 li
158.053 250.397 157.743 250.687 157.324 251.078 cv
156.903 251.459 156.59 251.761 156.37 251.981 cv
155.333 253.021 154.921 253.652 155.141 253.873 cv
155.305 254.036 155.651 253.902 156.177 253.487 cv
156.927 252.882 157.661 252.271 158.389 251.654 cv
161.954 248.69 164.266 246.807 165.32 246.007 cv
167.463 244.361 169.268 243.195 170.722 242.503 cv
172.435 241.692 174.397 240.907 176.619 240.142 cv
178.201 239.576 179.109 239.169 179.342 238.938 cv
179.73 238.548 179.932 238.057 179.962 237.442 cv
179.989 236.831 179.831 236.353 179.485 236.005 cv
179.353 235.876 178.946 235.751 178.254 235.626 cv
177.564 235.492 177.165 235.372 177.054 235.262 cv
176.967 235.172 176.97 234.819 177.08 234.197 cv
177.318 232.604 177.444 231.748 177.463 231.621 cv
177.558 230.83 177.599 230.337 177.601 230.111 cv
177.583 229.689 177.418 229.323 177.108 229.017 cv
176.709 228.612 175.591 228.565 173.754 228.878 cv
173.082 229.011 172.406 229.137 171.734 229.263 cv
171.245 229.356 170.943 229.344 170.83 229.233 cv
170.708 229.111 170.573 228.71 170.437 228.044 cv
170.298 227.376 170.158 226.97 170.012 226.823 cv
169.815 226.624 169.486 226.521 169.033 226.521 cv
168.575 226.521 168.223 226.649 167.969 226.907 cv
167.768 227.11 166.958 228.891 165.541 232.248 cv
163.465 237.145 162.237 239.968 161.857 240.715 cv
160.748 242.854 159.341 244.922 157.651 246.91 cv
156.268 248.479 154.904 250.05 153.559 251.62 cv
152.667 252.7 152.394 253.415 152.739 253.76 cv
152.793 253.816 li
152.958 253.979 154.177 252.921 156.452 250.639 cv
157.07 250.011 157.922 249.048 159.017 247.736 cv
cp
157.167 243.968 mo
159.48 240.278 160.924 236.523 161.502 232.699 cv
161.913 229.901 161.885 227.405 161.414 225.2 cv
160.924 223.073 160.063 221.393 158.831 220.16 cv
158.314 219.636 157.604 219.237 156.697 218.953 cv
155.752 218.625 154.878 218.524 154.079 218.642 cv
153.424 218.728 152.826 219.051 152.278 219.601 cv
151.404 220.478 150.782 221.375 150.411 222.279 cv
150.087 223.051 150.038 223.558 150.279 223.795 cv
150.35 223.871 150.622 223.806 151.09 223.608 cv
151.557 223.404 151.877 223.212 152.053 223.035 cv
152.202 222.887 152.386 222.595 152.602 222.154 cv
152.815 221.716 153.01 221.408 153.188 221.23 cv
153.869 220.544 154.616 220.189 155.421 220.172 cv
156.228 220.145 156.954 220.458 157.589 221.097 cv
158.626 222.135 159.092 224.244 158.989 227.409 cv
158.885 230.844 158.105 234.959 156.657 239.749 cv
155.572 243.366 153.967 247.091 151.833 250.929 cv
151.567 251.405 151.414 251.727 151.365 251.888 cv
151.294 252.144 151.353 252.368 151.545 252.561 cv
151.798 252.811 152.048 252.811 152.299 252.557 cv
152.417 252.438 152.893 251.59 153.724 250.015 cv
154.79 247.962 155.938 245.948 157.167 243.968 cv
cp
level3{
gsave
clp
[73.0024 42.1479 -42.1479 73.0024 121.961 224.06 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[73.0024 42.1479 -42.1479 73.0024 121.961 224.06 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
68.8696 234.494 mo
68.8696 234.384 68.8599 234.274 68.8721 234.164 cv
68.9521 233.364 69.3594 232.687 70.0781 232.143 cv
71.2461 231.253 73.4004 231.081 76.5195 231.607 cv
79.2744 232.066 82.4199 233.036 85.9395 234.494 cv
68.8696 234.494 li
cp
37.1113 234.164 mo
37.1904 233.364 37.5977 232.687 38.3164 232.143 cv
39.4854 231.253 41.6387 231.081 44.7578 231.607 cv
47.5127 232.066 50.6582 233.036 54.1777 234.494 cv
37.1089 234.494 li
37.1084 234.384 37.0986 234.274 37.1113 234.164 cv
cp
112.203 234.937 mo
110.723 236.439 110.092 238.037 110.097 239.714 cv
106.291 237.392 102.244 235.348 97.8506 234.823 cv
95.6406 234.559 93.4414 234.506 91.2334 234.497 cv
88.3237 232.317 85.2837 230.759 82.1064 229.824 cv
79.3867 229.046 76.9063 228.734 74.6572 228.903 cv
72.4854 229.107 70.707 229.73 69.3184 230.787 cv
68.7305 231.226 68.2393 231.88 67.835 232.737 cv
67.5298 233.34 67.3379 233.926 67.2437 234.494 cv
59.4668 234.494 li
56.5586 232.315 53.5205 230.759 50.3447 229.824 cv
47.625 229.046 45.1445 228.734 42.8965 228.903 cv
40.7227 229.107 38.9453 229.73 37.5566 230.787 cv
36.9678 231.226 36.4775 231.88 36.0732 232.737 cv
35.7681 233.34 35.5757 233.926 35.481 234.494 cv
21.21 234.494 li
19.3281 234.494 19.0615 236.402 21.0674 236.402 cv
35.6572 236.402 li
35.7725 236.671 35.9204 236.938 36.1182 237.202 cv
36.873 238.188 37.6768 238.921 38.5225 239.417 cv
39.2441 239.842 39.7402 239.955 40.0098 239.75 cv
40.0938 239.688 40.0674 239.407 39.9297 238.919 cv
39.792 238.429 39.6455 238.087 39.4922 237.887 cv
39.3701 237.721 39.1006 237.502 38.6943 237.229 cv
38.29 236.957 38.0117 236.723 37.8584 236.523 cv
37.8276 236.483 37.8081 236.442 37.7793 236.402 cv
58.3569 236.402 li
61.2456 237.854 64.1572 239.659 67.1064 241.859 cv
67.542 242.19 67.8379 242.384 67.9922 242.453 cv
68.2373 242.559 68.4619 242.528 68.6816 242.37 cv
68.9668 242.149 69 241.903 68.7803 241.618 cv
68.6777 241.486 67.8994 240.901 66.4521 239.863 cv
64.8965 238.764 63.3774 237.602 61.8828 236.402 cv
67.4194 236.402 li
67.5347 236.671 67.6826 236.938 67.8809 237.202 cv
68.6348 238.188 69.4385 238.921 70.2842 239.417 cv
71.0059 239.842 71.502 239.955 71.7715 239.75 cv
71.8555 239.688 71.8291 239.407 71.6924 238.919 cv
71.5537 238.429 71.4072 238.087 71.2549 237.887 cv
71.1318 237.721 70.8623 237.502 70.4561 237.229 cv
70.0518 236.957 69.7725 236.723 69.6201 236.523 cv
69.5894 236.483 69.5698 236.442 69.541 236.402 cv
90.1187 236.402 li
93.0073 237.854 95.9199 239.659 98.8691 241.859 cv
99.3037 242.19 99.5996 242.384 99.7539 242.453 cv
99.999 242.559 100.225 242.528 100.444 242.37 cv
100.729 242.149 100.762 241.903 100.542 241.618 cv
100.439 241.486 99.6611 240.901 98.2139 239.863 cv
96.7339 238.818 95.2886 237.712 93.8643 236.576 cv
100.45 237.373 105.914 240.788 111.546 244.41 cv
112.211 244.838 115.706 244.062 115.154 243.032 cv
113.582 240.088 113.064 237.3 115.677 234.65 cv
116.612 233.702 112.927 234.202 112.203 234.937 cv
cp
level3{
gsave
clp
[75.137 43.3804 -43.3804 75.137 31.7852 214.351 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[75.137 43.3804 -43.3804 75.137 31.7852 214.351 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
174.192 368.02 mo
173.649 368.738 172.973 369.146 172.171 369.225 cv
172.061 369.237 171.952 369.228 171.842 369.228 cv
171.842 352.158 li
173.3 355.679 174.27 358.823 174.729 361.578 cv
175.256 364.697 175.082 366.852 174.192 368.02 cv
cp
174.192 336.26 mo
173.649 336.977 172.973 337.385 172.171 337.461 cv
172.061 337.474 171.952 337.464 171.842 337.464 cv
171.842 320.394 li
173.3 323.915 174.27 327.06 174.729 329.814 cv
175.256 332.934 175.082 335.088 174.192 336.26 cv
cp
171.842 346.868 mo
171.842 339.092 li
172.41 338.997 172.995 338.805 173.599 338.5 cv
174.456 338.096 175.11 337.605 175.55 337.016 cv
176.606 335.629 177.229 333.85 177.432 331.678 cv
177.602 329.432 177.29 326.949 176.512 324.229 cv
175.577 321.052 174.019 318.012 171.839 315.102 cv
171.83 312.894 171.778 310.693 171.515 308.482 cv
170.987 304.09 168.944 300.044 166.623 296.238 cv
168.299 296.243 169.897 295.613 171.399 294.133 cv
172.134 293.41 172.635 289.724 171.686 290.66 cv
169.036 293.27 166.248 292.753 163.304 291.18 cv
162.273 290.632 161.496 294.125 161.926 294.79 cv
165.546 300.422 168.962 305.886 169.759 312.47 cv
168.623 311.046 167.518 309.6 166.474 308.121 cv
165.435 306.672 164.849 305.895 164.719 305.793 cv
164.433 305.572 164.187 305.607 163.967 305.889 cv
163.809 306.109 163.778 306.336 163.882 306.58 cv
163.951 306.734 164.146 307.031 164.477 307.467 cv
166.677 310.418 168.482 313.327 169.934 316.215 cv
169.934 336.793 li
169.894 336.765 169.853 336.745 169.813 336.715 cv
169.614 336.561 169.379 336.283 169.107 335.879 cv
168.834 335.471 168.614 335.205 168.447 335.082 cv
168.249 334.93 167.906 334.781 167.417 334.643 cv
166.929 334.504 166.647 334.48 166.585 334.566 cv
166.382 334.832 166.494 335.328 166.918 336.049 cv
167.414 336.898 168.148 337.701 169.133 338.453 cv
169.396 338.652 169.664 338.801 169.934 338.916 cv
169.934 344.451 li
168.734 342.957 167.571 341.438 166.474 339.883 cv
165.435 338.438 164.849 337.66 164.719 337.555 cv
164.433 337.336 164.187 337.369 163.967 337.652 cv
163.809 337.873 163.778 338.1 163.882 338.344 cv
163.951 338.496 164.146 338.795 164.477 339.229 cv
166.677 342.178 168.482 345.09 169.934 347.979 cv
169.934 368.555 li
169.894 368.526 169.853 368.507 169.813 368.477 cv
169.614 368.324 169.379 368.047 169.107 367.643 cv
168.834 367.236 168.614 366.967 168.447 366.844 cv
168.249 366.689 167.906 366.543 167.417 366.406 cv
166.929 366.27 166.647 366.242 166.585 366.326 cv
166.382 366.596 166.494 367.092 166.918 367.813 cv
167.414 368.658 168.148 369.463 169.133 370.217 cv
169.396 370.415 169.664 370.563 169.934 370.678 cv
169.934 385.268 li
169.934 387.273 171.842 387.008 171.842 385.127 cv
171.842 370.854 li
172.41 370.76 172.995 370.568 173.599 370.264 cv
174.456 369.859 175.11 369.367 175.55 368.779 cv
176.606 367.393 177.229 365.611 177.432 363.439 cv
177.602 361.191 177.29 358.711 176.512 355.992 cv
175.577 352.816 174.02 349.778 171.842 346.868 cv
cp
level3{
gsave
clp
[47.787 27.5898 -27.5898 47.787 144.332 323.007 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[47.787 27.5898 -27.5898 47.787 144.332 323.007 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
632.676 432.427 mo
659.525 425.925 686.471 444.319 713.28 436.713 cv
716.829 435.706 716.08 434.119 712.512 435.131 cv
700.049 438.667 688.174 433.854 675.896 431.427 cv
661.647 428.61 646.594 426.761 632.367 430.659 cv
628.803 431.637 629.105 433.405 632.676 432.427 cv
632.676 432.427 li
cp
level3{
gsave
clp
[65.7452 37.958 -37.958 65.7452 639.84 414.781 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[65.7452 37.958 -37.958 65.7452 639.84 414.781 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
762.583 562.333 mo
769.085 535.485 750.691 508.539 758.297 481.73 cv
759.304 478.182 760.891 478.931 759.878 482.498 cv
756.342 494.961 761.156 506.836 763.583 519.114 cv
766.4 533.362 768.25 548.415 764.35 562.644 cv
763.374 566.206 761.605 565.904 762.583 562.333 cv
762.583 562.333 li
cp
level3{
gsave
clp
[40.0317 23.1123 -23.1123 40.0317 741.253 510.748 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.0317 23.1123 -23.1123 40.0317 741.253 510.748 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
512.621 455.328 mo
509.618 457.682 506.519 462.316 505.773 465.608 cv
504.955 469.209 506.285 473.08 509.033 475.295 cv
512.273 477.904 516.162 475.871 514.331 473.291 cv
512.5 470.709 510.819 468.871 510.776 466.132 cv
510.727 463.066 511.269 460.746 513.849 457.202 cv
515.283 455.234 514.64 453.742 512.621 455.328 cv
cp
level3{
gsave
clp
[11.3353 6.54443 -6.54443 11.3353 507 462.353 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.3353 6.54443 -6.54443 11.3353 507 462.353 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
549.681 503.441 mo
552.669 505.535 555.863 509.807 556.748 512.914 cv
557.71 516.311 556.636 520.076 554.125 522.33 cv
551.162 524.99 547.341 523.246 548.958 520.688 cv
550.58 518.127 552.093 516.287 551.992 513.668 cv
551.88 510.736 551.246 508.547 548.599 505.293 cv
547.132 503.488 547.67 502.029 549.681 503.441 cv
cp
level3{
gsave
clp
[13.3811 7.72559 -7.72559 13.3811 543.855 510.055 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3811 7.72559 -7.72559 13.3811 543.855 510.055 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
561.412 503.322 mo
564.736 505.146 570.181 506.17 573.482 505.57 cv
577.091 504.91 580.115 502.186 581.063 498.811 cv
582.184 494.828 578.806 492.066 577.166 494.748 cv
575.519 497.43 574.496 499.684 572.008 500.791 cv
569.224 502.031 566.891 502.441 562.648 501.467 cv
560.29 500.924 559.173 502.092 561.412 503.322 cv
cp
level3{
gsave
clp
[14.5423 8.396 -8.396 14.5423 564.205 494.967 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.5423 8.396 -8.396 14.5423 564.205 494.967 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
530.374 428.113 mo
527.364 430.201 522.232 431.732 519 431.485 cv
515.466 431.216 512.291 428.897 511.041 425.752 cv
509.562 422.037 512.529 419.043 514.377 421.455 cv
516.226 423.868 517.435 425.93 519.94 426.744 cv
522.738 427.658 525.021 427.818 529.001 426.455 cv
531.212 425.695 532.4 426.709 530.374 428.113 cv
cp
level3{
gsave
clp
[17.4778 10.0908 -10.0908 17.4778 511.29 421.5 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[17.4778 10.0908 -10.0908 17.4778 511.29 421.5 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
583.881 444.537 mo
580.083 434.291 569.375 426.018 558.938 423.558 cv
548.206 421.026 535.689 424.963 528.047 432.838 cv
522.958 437.242 517.066 440.988 510.974 443.797 cv
504.996 446.552 496.753 447.517 491.638 442.506 cv
484.781 435.789 492.925 424.85 501.33 427.115 cv
503.371 427.664 505.174 429.252 505.933 431.121 cv
506.863 433.412 506.25 435.568 504.291 437.08 cv
503.404 437.762 501.689 438.332 500.009 438.432 cv
500.232 437.797 500.348 437.082 500.292 436.319 cv
500.13 433.988 498.572 432.198 496.808 432.322 cv
495.223 432.436 494.025 434.059 493.917 436.078 cv
493.894 436.305 493.888 436.537 493.913 436.765 cv
493.941 437.159 494.021 437.529 494.124 437.887 cv
495.042 441.574 498.221 443.191 502.18 442.096 cv
506.826 440.81 508.855 435.704 508.134 431.248 cv
507.389 426.658 503.731 422.87 498.988 422.733 cv
494.006 422.59 489.835 426.586 488.449 431.119 cv
487.043 435.71 487.313 441.201 490.103 445.234 cv
492.925 449.318 498.384 450.268 502.993 449.99 cv
507.735 449.707 512.14 447.431 516.201 445.142 cv
517.242 444.555 518.274 443.939 519.297 443.307 cv
514.901 447.728 510.164 450.813 504.578 452.854 cv
497.027 455.612 487.229 454.648 479.812 451.9 cv
471.958 448.992 465.716 440.781 466.793 432.174 cv
467.317 427.972 470.978 425.321 475.05 425.236 cv
477.421 425.189 481.229 427.186 481.314 429.748 cv
479.706 429.049 477.513 429.909 476.179 431.875 cv
474.719 434.027 474.855 436.666 476.483 437.768 cv
478.109 438.869 480.611 438.02 482.07 435.865 cv
484.318 432.684 483.771 427.416 481.74 424.32 cv
479.076 420.261 474.146 419.393 470.087 421.385 cv
465.55 423.613 464.57 429.137 464.615 433.679 cv
464.669 439.293 466.546 444.678 469.79 449.229 cv
476.137 458.141 488.578 460.117 498.775 458.984 cv
506.853 458.084 513.983 453.695 519.655 447.811 cv
517.574 454.868 517.229 462.555 518.661 469.313 cv
521.179 481.201 531.428 491.092 543.189 493.777 cv
543.458 493.839 543.734 493.878 544.005 493.93 cv
548.009 502.192 556.86 506.734 564.384 511.314 cv
572.867 516.477 585.519 525.02 580.683 536.59 cv
578.593 541.588 574.195 544.227 568.914 544.371 cv
563.787 544.512 559.586 541.891 557.265 537.313 cv
553.726 530.334 560.955 523.906 566.789 524.656 cv
566.158 525.783 566.028 527.365 566.554 528.93 cv
567.406 531.451 569.639 532.975 571.546 532.33 cv
573.253 531.756 574.109 529.629 573.652 527.373 cv
573.605 527.105 573.544 526.846 573.457 526.604 cv
571.857 522.184 567.355 519.455 562.73 520.93 cv
557.789 522.508 555.429 527.027 554.843 531.893 cv
554.171 537.482 556.71 542.881 561.148 546.24 cv
565.325 549.398 571.881 548.965 576.231 546.441 cv
581.346 543.471 583.503 536.615 583.5 531.057 cv
583.493 524.74 579.896 519.393 575.491 515.189 cv
570.824 510.729 565.014 507.615 559.546 504.275 cv
555.125 501.578 550.385 498.525 547.156 494.348 cv
556.262 494.947 566.156 490.902 570.976 483.17 cv
576.813 473.809 576.586 459.048 567.998 451.359 cv
560.555 444.693 547.795 445.212 541.628 453.105 cv
538.357 457.294 537.84 463.236 538.735 468.297 cv
539.47 472.453 541.873 475.639 545.347 477.596 cv
546.056 478.065 546.875 478.447 547.773 478.703 cv
551.357 479.715 554.878 478.342 555.644 475.635 cv
556.408 472.928 554.127 469.912 550.544 468.901 cv
547.763 468.116 545.025 468.773 543.578 470.373 cv
541.156 467.729 540.009 464.104 540.72 460.168 cv
541.774 454.34 548.794 451.723 553.955 451.723 cv
559.57 451.723 565.314 453.922 568.779 458.441 cv
573.055 464.018 573.794 471.66 570.992 478.031 cv
566.132 489.08 550.25 491.361 540.113 487.637 cv
527.142 482.869 519.01 469.836 520.155 456.209 cv
520.792 448.592 524.063 441.01 529.689 435.789 cv
534.899 430.954 542.035 428.561 549.013 427.988 cv
556.644 427.365 563.631 429.607 569.861 433.975 cv
574.982 437.563 579.838 442.656 582.041 448.598 cv
582.446 449.686 583.589 449.418 584 448.643 cv
584.613 447.48 584.281 445.611 583.881 444.537 cv
cp
level3{
gsave
clp
[136.348 78.7207 -78.7207 136.348 464.202 428.77 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[136.348 78.7207 -78.7207 136.348 464.202 428.77 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
580.73 547.945 mo
580.73 547.945 580.73 574.184 580.73 576.141 cv
580.73 578.098 578.474 578.18 578.474 576.004 cv
578.474 565.096 577.66 564.127 575.922 559.773 cv
573.506 553.725 576.105 552.393 579.281 547.602 cv
579.808 546.805 580.73 546.701 580.73 547.945 cv
cp
level3{
gsave
clp
[14.1211 8.15283 -8.15283 14.1211 572.603 558.146 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.1211 8.15283 -8.15283 14.1211 572.603 558.146 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
463.456 421.771 mo
463.456 421.771 434.546 421.771 432.589 421.771 cv
430.634 421.771 430.55 424.027 432.727 424.027 cv
443.635 424.027 450.576 424.84 454.927 426.578 cv
460.975 428.994 461.623 427.117 464.166 423.22 cv
464.69 422.419 464.701 421.771 463.456 421.771 cv
cp
level3{
gsave
clp
[25.0505 14.4629 -14.4629 25.0505 435.227 415.504 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[25.0505 14.4629 -14.4629 25.0505 435.227 415.504 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
94.7256 427.351 mo
23.7002 427.351 li
22.0977 427.351 20.1797 424.884 22.7803 424.884 cv
94.3101 424.884 li
94.3506 425.521 94.5176 426.597 94.7256 427.351 cv
cp
level3{
gsave
clp
[55.7462 32.1851 -32.1851 55.7462 30.5181 409.82 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55.7462 32.1851 -32.1851 55.7462 30.5181 409.82 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
175.479 507.166 mo
175.479 578.191 li
175.479 579.795 177.946 581.713 177.946 579.111 cv
177.946 507.582 li
177.308 507.541 176.233 507.375 175.479 507.166 cv
cp
level3{
gsave
clp
[33.276 19.2119 -19.2119 33.276 160.033 533.919 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33.276 19.2119 -19.2119 33.276 160.033 533.919 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
384.501 262.99 mo
383.805 262.582 383.135 262.16 382.483 261.743 cv
379.586 260.095 376.464 259.04 373.122 258.576 cv
370.871 258.274 367.707 258.194 363.628 258.33 cv
358.034 258.497 352.949 259.018 348.352 259.897 cv
344.731 260.591 342.704 261.163 342.266 261.602 cv
342.101 261.765 341.953 262.235 341.814 263.03 cv
341.672 263.812 341.497 264.316 341.288 264.528 cv
339.503 266.312 337.496 266.086 335.266 263.862 cv
332.977 261.572 332.684 259.564 334.4 257.846 cv
334.867 257.381 335.53 257.052 336.383 256.866 cv
337.244 256.684 337.742 256.523 337.877 256.379 cv
338.99 255.268 339.895 250.073 340.596 240.796 cv
341.313 231.401 340.272 222.891 337.461 215.258 cv
338.293 214.489 li
338.966 214.608 339.597 214.959 340.175 215.534 cv
341.079 216.443 341.722 217.516 342.105 218.754 cv
342.489 219.996 342.689 220.635 342.716 220.652 cv
342.785 220.716 342.875 220.764 342.979 220.771 cv
343.08 220.782 343.154 220.819 343.207 220.864 cv
343.618 221.274 344.021 222.062 344.387 223.226 cv
345.64 227.127 346.183 230.241 346.022 232.586 cv
345.741 237.043 345.172 240.599 344.315 243.262 cv
343.203 246.697 342.729 248.518 342.89 248.73 cv
343.723 248.172 li
344.187 247.574 344.725 246.545 345.326 245.107 cv
345.999 243.462 346.669 241.813 347.344 240.171 cv
348.833 235.573 350.058 231.61 351.031 228.273 cv
351.519 226.851 351.877 226.027 352.106 225.799 cv
352.412 225.5 352.691 225.475 352.946 225.731 cv
353.178 225.967 353.156 226.942 352.877 228.656 cv
352.523 230.713 351.892 233.072 350.963 235.715 cv
350.29 237.598 349.129 240.309 347.484 243.857 cv
345.975 247.08 344.988 249.48 344.529 251.059 cv
344.22 252.058 344.119 252.601 344.212 252.696 cv
344.352 252.833 344.521 252.802 344.731 252.592 cv
344.853 252.471 345.008 252.283 345.2 252.016 cv
345.396 251.753 345.557 251.557 345.679 251.439 cv
347.69 249.425 350.334 244.623 353.607 237.043 cv
354.511 234.926 355.423 232.672 356.352 230.25 cv
356.979 228.606 357.337 227.736 357.434 227.645 cv
357.802 227.271 358.31 227.049 358.946 226.969 cv
359.583 226.886 360.028 226.976 360.284 227.228 cv
360.725 227.671 360.909 228.541 360.829 229.859 cv
360.741 231.163 360.749 231.869 360.84 231.958 cv
361.073 232.193 361.271 232.225 361.433 232.062 cv
361.595 231.899 361.862 231.553 362.234 231.019 cv
362.607 230.49 362.934 230.081 363.207 229.802 cv
363.812 229.197 365.05 229.842 366.93 231.717 cv
368.576 233.364 369.017 234.569 368.252 235.334 cv
367.278 236.308 li
366.441 237.145 366.21 237.745 366.588 238.123 cv
366.65 238.184 367.423 238.159 368.894 238.029 cv
370.366 237.906 371.372 238.104 371.904 238.642 cv
372.737 239.472 372.639 240.415 371.592 241.458 cv
371.477 241.574 370.211 242.046 367.801 242.879 cv
364.717 243.975 361.605 245.315 358.476 246.919 cv
351.219 250.653 346.914 253.192 345.566 254.536 cv
345.339 254.772 345.315 254.98 345.501 255.163 cv
345.549 255.211 346.97 254.575 349.777 253.249 cv
353.582 251.489 357.513 249.969 361.574 248.694 cv
365.073 247.604 368.35 246.954 371.386 246.749 cv
373.796 246.605 375.164 246.697 375.491 247.027 cv
375.628 247.162 375.62 247.317 375.451 247.477 cv
375.388 247.544 373.954 247.933 371.177 248.623 cv
367.604 249.501 364.16 250.583 360.845 251.858 cv
356.577 253.483 354.271 254.467 353.917 254.819 cv
353.686 255.05 353.465 255.316 353.261 255.619 cv
354.351 255.499 355.88 255.132 357.849 254.507 cv
360.028 253.811 361.608 253.39 362.582 253.253 cv
366.666 252.601 370.505 252.728 374.1 253.641 cv
377.506 254.493 380.173 255.883 382.1 257.813 cv
382.356 258.068 382.64 258.395 382.955 258.798 cv
383.268 259.208 383.47 259.458 383.561 259.549 cv
383.884 259.874 384.326 260.2 384.882 260.526 cv
385.438 260.847 385.755 261.044 385.822 261.112 cv
386.056 261.345 386.216 261.671 386.311 262.091 cv
386.404 262.503 386.367 262.796 386.209 262.961 cv
385.769 263.404 385.2 263.413 384.501 262.99 cv
cp
level3{
gsave
clp
[57.2279 33.0405 -33.0405 57.2279 326.904 233.543 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[57.2279 33.0405 -33.0405 57.2279 326.904 233.543 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
206.227 222.167 mo
287.488 222.167 li
288.052 222.167 289.694 222.268 289.763 223.116 cv
290.237 229.025 293.108 233.96 298.472 236.674 cv
298.854 236.869 299.004 237.167 298.852 237.561 cv
295.74 245.633 294.44 254.302 300.327 261.405 cv
308.139 270.825 319.103 262.765 317.847 253.933 cv
316.468 253.975 314.975 253.42 313.796 252.266 cv
311.746 250.25 311.442 247.238 313.113 245.537 cv
314.786 243.836 317.799 244.084 319.85 246.097 cv
319.851 246.1 319.852 246.1 319.854 246.1 cv
325.395 251.316 325.939 261.008 318.893 265.412 cv
312.955 269.12 305.926 269.007 299.614 266.252 cv
292.231 263.038 289.831 254.769 290.351 247.408 cv
290.646 243.229 293.743 239.419 290.286 236.353 cv
286.594 233.084 284.547 229.36 283.958 224.587 cv
206.099 224.587 li
202.035 224.587 202.326 222.167 206.227 222.167 cv
cp
level3{
gsave
clp
[106.178 61.3018 -61.3018 106.178 213.982 204.545 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[106.178 61.3018 -61.3018 106.178 213.982 204.545 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
326.48 232.417 mo
318.909 226.384 309.714 224.608 300.413 227.181 cv
297.254 228.053 301.411 229.408 302.917 228.991 cv
307.209 227.804 312.325 228.157 316.806 229.941 cv
313.702 229.465 310.521 229.732 307.844 231.375 cv
302.881 234.433 300.755 240.726 302.482 246.218 cv
303.302 248.483 305.488 249.761 307.365 249.085 cv
309.247 248.4 310.104 246.016 309.283 243.754 cv
308.746 242.272 307.622 241.227 306.385 240.864 cv
306.918 238.322 308.173 235.945 310.243 234.422 cv
314.1 231.582 318.607 231.7 322.849 233.702 cv
322.859 233.707 322.868 233.709 322.878 233.714 cv
324.381 235.107 325.64 236.749 326.506 238.662 cv
330.298 247.042 327.661 256.103 324.506 264.173 cv
323.931 265.679 323.978 266.422 325.557 266.377 cv
326.913 266.335 329.078 265.563 329.362 264.834 cv
333.488 254.291 336.694 240.554 326.48 232.417 cv
cp
level3{
gsave
clp
[38.6016 22.2866 -22.2866 38.6016 296.611 232.43 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[38.6016 22.2866 -22.2866 38.6016 296.611 232.43 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
376.701 392.641 mo
376.701 311.381 li
376.701 310.814 376.599 309.174 375.752 309.104 cv
369.844 308.631 364.908 305.758 362.193 300.395 cv
362 300.018 361.699 299.865 361.306 300.018 cv
353.234 303.129 344.565 304.428 337.463 298.542 cv
328.041 290.729 336.104 279.765 344.935 281.022 cv
344.891 282.402 345.446 283.894 346.602 285.071 cv
348.616 287.121 351.629 287.424 353.331 285.751 cv
355.03 284.083 354.783 281.069 352.771 279.017 cv
352.768 279.015 352.768 279.015 352.768 279.015 cv
347.555 273.472 337.86 272.928 333.456 279.973 cv
329.749 285.913 329.862 292.943 332.614 299.252 cv
335.83 306.637 344.099 309.037 351.462 308.518 cv
355.64 308.223 359.447 305.125 362.514 308.58 cv
365.782 312.273 369.507 314.318 374.279 314.906 cv
374.279 392.77 li
374.279 396.832 376.701 396.543 376.701 392.641 cv
cp
level3{
gsave
clp
[81.929 47.3018 -47.3018 81.929 316.382 309.521 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[81.929 47.3018 -47.3018 81.929 316.382 309.521 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
366.45 272.388 mo
358.313 262.17 344.579 265.38 334.033 269.505 cv
333.306 269.789 332.533 271.955 332.492 273.312 cv
332.445 274.89 333.189 274.936 334.695 274.361 cv
342.765 271.205 351.827 268.57 360.206 272.362 cv
362.12 273.228 363.762 274.488 365.156 275.993 cv
365.16 276.002 365.163 276.01 365.167 276.019 cv
367.166 280.26 367.287 284.77 364.446 288.625 cv
362.923 290.697 360.546 291.952 358.004 292.485 cv
357.643 291.245 356.598 290.122 355.113 289.583 cv
352.852 288.764 350.469 289.622 349.783 291.501 cv
349.107 293.378 350.384 295.566 352.648 296.386 cv
358.142 298.113 364.436 295.986 367.492 291.023 cv
369.134 288.348 369.403 285.17 368.929 282.069 cv
370.71 286.549 371.063 291.662 369.876 295.951 cv
369.461 297.457 370.813 301.615 371.688 298.456 cv
374.26 289.153 372.482 279.958 366.45 272.388 cv
cp
level3{
gsave
clp
[41.077 23.7158 -23.7158 41.077 334.08 268.997 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[41.077 23.7158 -23.7158 41.077 334.08 268.997 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
369.634 313.362 mo
369.634 313.362 369.634 339.294 369.634 341.256 cv
369.634 343.218 367.237 343.88 367.237 341.038 cv
367.237 334.268 366.89 324.588 366.2 320.533 cv
365.675 317.444 364.771 313.729 363.9 311.332 cv
365.214 311.924 368.327 313.145 369.634 313.362 cv
cp
level3{
gsave
clp
[17.5057 10.1069 -10.1069 17.5057 357.86 321.794 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[17.5057 10.1069 -10.1069 17.5057 357.86 321.794 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
284.905 228.924 mo
284.905 228.924 258.973 228.924 257.011 228.924 cv
255.049 228.924 254.387 231.321 257.229 231.321 cv
264 231.321 273.679 231.668 277.734 232.358 cv
280.823 232.884 284.539 233.787 286.935 234.659 cv
286.343 233.344 285.123 230.232 284.905 228.924 cv
cp
level3{
gsave
clp
[25.755 14.8696 -14.8696 25.755 259.067 223.448 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[25.755 14.8696 -14.8696 25.755 259.067 223.448 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
116.688 227.706 mo
91.8623 227.706 67.0371 227.706 42.2119 227.706 cv
34.7036 227.706 27.9878 227.706 20.4795 227.706 cv
19.1045 227.706 19.2295 229.128 20.4756 229.128 cv
45.3008 229.128 70.4971 229.128 95.3223 229.128 cv
102.831 229.128 110.338 229.128 117.847 229.128 cv
119.792 229.128 117.613 227.706 116.688 227.706 cv
116.688 227.706 li
cp
level3{
gsave
clp
[74.6321 43.0889 -43.0889 74.6321 31.708 207.083 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[74.6321 43.0889 -43.0889 74.6321 31.708 207.083 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
177.668 289.437 mo
177.668 314.262 177.668 339.088 177.668 363.912 cv
177.668 371.421 177.668 378.137 177.668 385.645 cv
177.668 387.02 176.247 386.895 176.247 385.648 cv
176.247 360.824 176.247 335.627 176.247 310.803 cv
176.247 303.294 176.247 295.786 176.247 288.278 cv
176.247 286.332 177.668 288.511 177.668 289.437 cv
177.668 289.437 li
cp
level3{
gsave
clp
[43.6015 25.1733 -25.1733 43.6015 155.036 324.545 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[43.6015 25.1733 -25.1733 43.6015 155.036 324.545 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.0%%For: (\620\716\620\754\601@\625\620) ()%%Title: (Frames_37_B_Gold.eps)%%CreationDate: 3/23/20 7:11 PM%AI9_DataStream%Gb",K$!Z+W([1f"r!0gcC/rJ=8^t2'c+UN"m:':XJ4`8'/:HE)pNc1F^LtY6!J(Bb#ei-\^gr`eB?i[gakU.4hPlbi[EE[jhpnO"%-^CL0>"R0TM7L1!b$hj2;^&"%RZg]KRVf(%JBB'IRQ@l2;jq89cn&BSG&GI1p-H#k/@SfNHF;UGXX5hg$ao&Ei=`:-OrqisCAjc8%\lpLg-g'3$o.47JQLje39qe*l.0[oe1MZcp"`9nmIco_X>-Zd1Pn0O-\[6beQWn^N3hu.6j`VU$Kb7;b-F<_\2[ftVHH5sJ-_]ar%KPKH@*IbZAO3:A)8p*n=7'ZNgl(=1)!qbkt$O6."gaFuem7P%rKC]B?E&!b4?PGQO2T)*pC;JNq65"TH9YPCP6&QWf^coZ5G_ZO)%m2*iR=iLD,[G0U.]9^s1"q>WmOMrA"^+PYG@DZ$hX03#sIia//N$"C))V%0d9LN9%C'n-+,%\TBp\a[K_dYC;(b*KZm,YICdK+>U%090K+!.pdT\n,m[J7Qee.cl.\JPM)f>.`Y&@K[cPMG,=6Z[GgK+-;+lW%$JECe8l'Y9.qfjlY<$V9R3PDEHXiI_A^`!]YW^q.]q%%,`FVWj9iq]k%2(4e6fD&E.)+V`OkcBF0esC=[n;"G_"D*Ep^Ac6?"S^\s@G[LNih3D?qVhlM-nddEn)C#d(5\/,"NWaK?+0EsFtT%YFCg#8o<+2bW=Kp<_<CH>?]J;%g"q+L]/:ha&'X+g[0%+6]7t8AbLb*'IC/:_ugudF`,K?KaM3\ea0(64:\$[b5au>cn<,8KdB--%X8HlkrNhKRVnbN&a%mlJdrFk5PED]QNb;Y<X1F<mFe,_uo@TL9$%]L;^gBE9/Kq?a&Ga!*drDUPj'Wl4raBT__-2kO[I>,a@]`<.%CLo9R16]O)R1.ZgkOE:N0*J`/kOEj^cYXM.L6plX&c!obPh1%@0o)B'$g328=:=:;B?JhF7ehg_E(9VZo9Pd%[Q#Z4`*YJKr5>0D%:Y[bO#X<=cGfEXO'9:2ejRKJjc3lkA:-O_MEd\L>`\CtcZ%Sb)P%W(e1[GMhO,f=F23Kil+4e=)i@"?;/','ZCV4,$``b>d\\a:?%DN",(:],pQj7UGgL)`kU'5QS)n<6q9WJ'faj5YrY"qYfH5B>!c5/oY7@_>:FnB;brKUh#\EOf_m?<fks_`Bb=8XVP"CsB<KX#N?A%`*,jl3'YCh\&D.EK<n4p8]m@3_jKHrR(=RQ93RJ-L6+3f0J,i0ODE!`BBU2u4>,Y'+dX]'kJj`9/NGldcL(Egs's-<1RX\Wbo&Iq%6_=93r<D'&D%^oQ>6E06GRA,VWE[f!5_%EITHVGA_(&)/#O?mO8PEUZ!#lPO$*P>8qrO-DWmEsmZW'o;J""AYJi!E_%/q9;q-RUV%1q=kko0:FXhnb`\ff&l=D)o&lrGu8Y&tJc)3mGEl1]L+lA[>VSSG?MEa1m6_s&8iF/C/>'n<;IhJ'22HLA>OQ`\<CZVJ)9mN-7t?%NS5S(`n'1Xr,ZAc+eo"0Fc9L&h-,%_&KY83`-Jl2YG$(<^>0FJ''K4>(j(cmG40@sY:"g9AJ?!P=iKm/7:7SB$,cG]BuCY9aP3.;%<NH50VUnH"V5H2B>mY*!L:S_@Vr$ds[^]d'U?e.D+!/G>he?mDh=dgMn^e]iKMU/W>R@m0@F0pVp:/$r?%r<[%%T3PLF%U>JYVdS%4L?.>j\d=?$#JuY)98K?oLH<o*$KqIJNZZ]#94*&Y_NXqL2hn51"<hW&E>EujHan<c]%8-M--NmYuL_R\E=9Lmue/%4GFeY6\3!H%($iIIQ:idf+(C5.,J\"Y-f,3A]NQqIDfU2p,?'LI(qQmD-K>/3+i\Ia/]'^FC:Jpk>]3e[>ch>8k-:;:(itL-M.*Ir["c*Q^AO;q%\N*b4`2]fJ0X`:s4.#H:L@Ej5@6>l8"2]\m4\>`+i(Co]["P6I>ehDB)Y&bGkOll\Pr$:XfMd:&`g4,h#W^r&,sJ$QUY]_(jD;FR%?%3o:/]Oj1'MJ4D/Z+EnQ4aCg>$GUqk*=nJLXjREIia;f982jQ=,a[r[c_pD5<Lmef7#NsgE*3.2dCF(lVSAB*_J68M[7M$i>Ph)%G]_&o]E3'5>sUXIe\Kspl-`No/:_O;BjibK,F8lZ44)m;(ZPYoRTi)h!p9T47p6td%VWjK>`_>i9\$M9.-"Hs7-d[gP8`;X5`\qm%kL,6M]^OUtj&+fVD^DA9?5Hjb.ihg:TmqkkPRT/c5Us:RhNGJ1beW7L99.8%c.(`mAo&J?EUM($"8%Zree7I!=Lp2AJqUC"3\-."%.Fj37brT!"AE7s#<nNn3@oNuOhC*MP7ETK..>A<icX?`_M;6)E-LnRC/Yj`]h\J5:[2WlkessqrI<9YY3M-HsJ>=A]!n(,BY?:KC%QORm#6*@FEo&L]\9U%D.#?o2LkiJUK4;R-peuCI+HdVLjOL="<KpZ?X[T2h+9@SZC:@%,LjGNLZ8?\2rLI4L)_ii1*-],6%cBNQC%3qPC0N80l`K'<Kf1N%!cVI:F[okY8lU%--WE<XHT*a>j$O]j@I=,,$:8-e4.6/$eORF[k,ag5tWl@CMt>\0W7P9j0jWJ7\j`jWr<%2Ha(dAK$`Z6dHg7q'AF'_UB$X4`nj_Q7&9sPNf@p@u\a!([HP0dS/H$V)@TH.4;>Il#64S-"oH[56i^U[6.Y9XPMtUV.0Ij>aqOH%E#$\+*d-g+ni(:ic*P7'ZPYka@K^f^lNj'_r!=6Fn?Eau_kg'd:2@;0!$9[[pD@DPMU]ESMYO=8qHFis:uU.l,P!h;2>5R&mZ,_J%BD&cj#O1o@3]<$J4^IkFcIgr!KMRMNF/[V3>Mm03r#(YP"4)O*_Iq1BZD>f,qUf3nfFj!%G0ejZK1?M`a7_XQIH7m^q?*<p,K:an%,6lTJLd-'%k!,^jk*.T1Hg'^*`b@$<%?=VN2)^FI/aW9+6h_[3/T2jsBOf[*re_$5@=oa6rQebI;;iA-G[p>kqD:4LfHH_N\=Oc8%pgm,/AVq>U6Ni1-"rhLITEgEkN&*A:(rE-%,"[StiQr#1N8nn+o6=A(NO.p^=:f!/GRuHH%l*)S"$*_MU,^l!N%9qEg4Ou*@_C:a%kN"e;*h,NFhg$L3d+*b=&YkESpE9G'OiM&bYf,[+_C5?,(.TA1U"cp;4j,8ET^0:_75"e8A/J6#8Iso!D$M_g2QH-UmQhNHN?(D$%4DT*kajbGSgNHt/n5jcJ9pPIO`pLUsnIVHgL0j,;.DK=RN#k%t`1c3_-9d3tc!MB9&GPs%)o>rZT#kC>NcQ6o>PQE!rTdtfnk+T0%*cW5B3J]_W2n&Y]eZlNeq/_Ln7<f9]C]/$Y%r32P5J(KAO1t@$BSET>h=\987=Y1(Vq&OpH04c@=1ZJ/8cLMZ&(L1EUD:=4,_%3(%fY_>bO3t>Mf&0XPQ?E/2lkH`_pOi=E^B`-!-4C>f#ODipGnGJ$PH(paUn)6LlT?3QAIJ9_]^I4to<(+RBbm$=>h7Yuiq%c^R2LeC%j(Ab@IC`Xk6]e!lnH#-nfAU!kBn*Ge_)p"W8T[T1hJ;W=p!3,(_CYFbZ&Do1]kq\cK(bmLIR_=CG^)_Vk%_t#o>DX:KP8e#F*Nsq%Qc>j]Yd]Zc=Xpd7Ddlu!Vc6hgN]kjKE/oT%qd^NGS.Q`TmN!MW@Em]AIPb[r[!$>klU(M$1u9JM1k,K/mIGPtiS5&a-f1#+&'Aga%h43GEJA5TaT5t&nl[[uPK&Tn#/m_Q=g0bV!'/G%&B?3=KBJVC11:.%:g229-Nnl9\Gi*6%%.A<PNI"_AhY9EXFmk_Q:!jk\Ad$3q%%Ti2\JpmFEZeSjAnR130.)mn("Cl1E8d)brhVPqi7`o7G&bciN[]W,'h><UgW'JX4Acm<Up,(27ikX<hMQae.rBm$cnF1+7k9t",%3gBH+C!T+Q<)A$s\+;sa`S2sJmMn%DN,+Fq;dP0p[-6I@GZ$BJK@DEC2RoT'GjT%eK1f<cPn4Z=f:eeLant((<gM\1VP&\FXbCP1%/\j_LG$'"`WB7g0a=*IW`f`W"m'(:9EgPe]-.iH^CADkE[''XCBhWGX(FXj1*Ta"e%NX-KgNE,Yg\=HGe&rmjL?:JbfuH1X7tr<'%F"Qhc7eP\<"S8C]4\7rH+F$C0b+`O/ALW-LaqW-+3iK0F#W,n<-H)Upf?6P$P\9+h*g($6V]f:u4!:g6):uZp>_!^![AsMB,2.PU%L#+Vh(iocKKb]bE;*BT<><,X#j6DT<6BPc)q,4"e]\%gtdUm_7]l=;"E`"jca]1Ybqf:!_*i#!s]X"oJ\`1(6T"^C,e+2n5(p-@[%Leou[BhZNX]Wo*8$-N5+]H<3or"Y-&;f`G=B=W:#-,/h$[6O-&Zdfb&CpG?CdT4aXlO2t3bL@BR1[qdUEG3ATT@ePVj4qi5)6'H!%3En,^)m)j$+aOAmo5k[LYs@KBG9o,[-&-X\\'EeI$Z&V\?eQ@25N`j&P:hE/mobC-ejf\ERCbJ[e;N.fm5JPkKB!I*PE=A<B[Y>=%`BTLa\)LPCI3X80>C3dYgDm!1(2f0gJYKsuR5m=.FO3?:lGqsUjR8`PlG8YTNn]^C*bX$.ZlXX3c[$8+JObq5_-)$25m2AbBO$R@%9:Y@#rb!,'$hDe;)]QO80$s2/GO/]hI<l_\[MR_-0YCtHftqCIf,T3TQM5rX)/!b[g66587q+%6^t*W-l`joGMRR5B9>8?(%"a`5%,$Es5%d5(+h:Os+2XHC.8o!2=XIsfN8IqSWc$3d%)K0HW_4hA/b\.lSngn9t(_ms\>;57\hZ*<CU.=DjfMrnCa7@g6^@`%><E^s"%U?@EHgF6%3%,4bb>e4F(m6rHY2EfiA(cJg@4U>nToajn$qtI"IeXG+NG&BXjeqt8,<'kr[UQ$jOkWt0)rPS?H\Cs/,>:^f7gGoi3%]utiNd<i[63BB9_r?*sOB9\J*;H(0/H]emafakd.MTAl:EYO7fXnc,P=tKPZO9T<V1T'm?I?`^a_sgr#NeSBb)2T>MCu9^2o,G=;%-FWUYh&e@\C]?%U%qDsnmM(,alSs6S_XKAX`n/#d=WZP.(Xr;YZ+Dj487MmjKYP*.F6Keu#D1flDhI[()g>,u)uEZ3@rpk;8V_:3%e*XL>qmE]:0r.2:CD3"T0RE$rhtZ!TF-bFSHlQKSaM5QSWG?>3G'Pe8R'oNBZ$d!H5!M>qcU.,m_P"t3,M?u!hZ)q*pY-5?ZaB.3%p=4[7(cEOY,35n`oION(1-0n7I)^u!b]\LmO2KOkHJl+Gps(',Xo"1hhM8/KGm!V?$lfqI=o6%a)#A5-mO4e'lJ2QEa?.!GkIeRT%H`7Dojh(0FE::=DEpd`gb?P%E.1)[Y"6820T=Q3G4<81:I%M9b7Kdq<p#@V'3>0!n0>+u&+_N(,eTkEWId<.TP1FkZJNZSChqdB8%jZT_n[rQ`$H1mac&6]=&CW]ouIjZ#:D+Rt9guceG/m4:Fjc5P[$)W(TbNQ4kV-h[L-ZRFO<.?:HJ&[5-0"l]?Y:J6!G$m>*+k%J3%j85AKT8<7=(f0":K6V=I,G4'/\j'<D1I!GGnaQDp`_D&+>kf0<*h<X>E/mL(=)qUKILBA^EbsW^le@&^Z&cGSHtn9]f5M6o27fTI%G=ORS7V%+,7_fK(M&_bT&uMIu>1BrjG"qK((=#^;[f"JnG\)S@0n4OL+Cm[YYa/OdjcLOPU[jeAi-P.LLA3heVCrs;3Y19fj,*3H%<($E;%Fh+M,4f(o;Sl!sC5F!+dD*)ED8$sEmmNF:^0qKZe(sDrj`<+$oNlGRI]`]925Y<X5$B>lio#:0d!k=5rk>LAV6gPP+[]5+%o]P]4forcA0!P(d%+Fk:W#RQNdQZd.8P(#bqKP)Ieu3a"b=@Pt)`1@fa3/Fp-gjMCQXMs"L^`uoAOrdM3SN4(cgY26>P!l2G?6dp%5GaB[j5`Pa[R"FF?-"Z:_9-B#9!,5Bh1q,56"V_QefO"I8PKel#FD%s`1@.Rp:T][1#kXiNU9q"J_`8PUV$O-S4eb?=#7?2-V!E+%24:IjG9D[#Xg,=UYg(![n-S@(iN<"U;1J.@5L(.jA'EJ0*hg)lSL)`=XphB9NU5'.5*$VOc`!Hq+-E[U;8s*<3Qj<k]Ci>Z&3_E<%H1F.\;8`1@pWU1JKZOYaCW*e[14T@A6._:o$Y$8Lgl]4p]Gg]ANR9^YhHLb+R/5Hpj1efg943T!=)rP'6JjS-%I!n9)f#;uiYHti%Q:9,-nDg-hGc&eo\+XIg%c&iU^U9/$>"\/Fqj[HK3[ii@#K1#rAk;5A/.kZbLtZto3A&mq]7#,&Nec[cQBJ_(LpQ,MUnrj#IU;rW%]?Wb*`Wl.RkWBVab?4Koanm$gmZ8M^182D66U`4l-Mbk4^O5D2Vt*d9#43m0T2@LeZtAqOfK5Bpq\c::`&Z\t&X#bkpj*L$O*8iY%08JE0=c1t&TD.M3nYdhA+l:l.dfo]J":XI`@6>==*tZEK*((WWCs@G2VT^8,F_oR<AA?9C8f.6?e_g/dd6jj['Fn[_>%<T[4V^FY%R'FYS/U8^<-sAD2O)s*mVhgI^^p3!BIR`cL1$@Gr1e&!<[VP[S?u3HK5C\ab7$R])Io)XY7VfQ;8otUB`n$B5e+G9EnMo$U\r._l%p)hoW#gVD]n7Z<1k-t@aQZ/I'2"/+^H]MW]ps3do;u6f4\XK;7(4q(Ldu_g2(2mrPK?p[?mD4,ZfpFqD]<K;]*Z/pHk3(sZ6augH%B7F?Ceide*?L(r=4,DJu[2t)"re'<aUspg\QC<0mZ(oU>B53+Oj`b>gN,lZ0YnM2"\QT;H<5dZLoc&:^<(jsBkb)(^eh?ifs.-;4%Q.qi6^Pn"uT=q6lm7IiFOHauY=7!8GC'QA.2X?pRG3u#qR!23ro5aE3M6Etk9YN^j<\CfsP4P;&I#f+lI*tsrcKZkXGX(s1IXK(p%F/k<O<#Q-3LHI'Gl^XEcFL0H-8flUM<Tor+6-nQX-VZDsLOF<X_,NOhi5^mta_UgqE/CG*JAYS-IA!99^INeq'\ZX1FL>@([6bE/%4WAEX4C?'Y0=[D>46k^-/Ed(l[F[8?ZQCq;]n%846M'@-8&q^*]7)E"^C@m*4TW%F*Y*SYLbk^a!M(Z=X-Lk?TlF']%YB&JlV@&f%P!c\J,<bI*`p7hZU%n6A]O%_IDS"tP&uPL).spjfl[NoE_=Q2D'DR\B6Ke!i)l+L?:@>?hOJXW[[1Z%(UJ@Xkp*Tn[[t1^k9cdRT%)R<`0lhCAa)dSiOo,3"9U]@a_MgFtAQpuVGc#C`'H8@=),lNNh#VgYQ53[soY#rN*(p^ALW"kam.dmH;[_DN^$WWP`i/cER&#smZ%##X%6=^Fk%a`K+F&8a<5V$bjQX3a(5>pl7tWpepd;."Z'9NCV11&.lMrYnmZpp#MpkP4R).2EPGTMKsiAhmXaS0lf#i'+"%aM<q7%,6p_FafC<AmqDlq=*6J23:Jgg!J^i6%>P#jVLbQ%aM<p4W*(t_7paH(q2)6DT+6XMR2Vtb>B&563,lBHUpUUN=ZCG@jL)Y'i/$#6%5qeK[i%T9SLBWGBLBE=4Vr>_4ObG$XkOlK]^k&.nfS!QLB>Pf#$P"*c-Xf!k,Eag$ADtTIGp@5W-Jk\W+Mp\%`\^Bj#C>*IiW\6I%kBC]f4?8$@(JKf9QDTLaPCb544=*"[KKgJ;)4jG1V\5F&:I7gmi<M)^cqE"'E]l^=9<`9^J\s@oAd49sR5=GH?7<%*)Br&r:_!G-%_A80I`2p>eLb'N+Ogc$0iWRIp[gXp?B3@,4NoaH3:mJ;k<mJkB$61NHVN0<:9j813W*euGnTrK"cX,MaZ/Konp`3;Be?S?U41,5#%N\@h`mBiFhZZaX>gNc9i$If'(#0^(4+#^fHdWNu5`lU8%-]a<p!#!`]C&F+skeM=G2rUXiN14s2DB?l+Kr*5fnP<k][aK?Q8\=5/%3g7jdF6S'5&'U^KL$F20'..1"m#7-J1[.R[PKi/DH!hRK!T^9`3LPC`.r/dgXIDps1\cF7C`[gn"Y.l?7aB57S<^F%:<q+\$!3#O%+'._q$pG;05L!;c1$hGU?h@HU(3uhb7?'EIr<$<(agna"'2SmDNa/TX49FI4^]umX#36)>:l,:mM"E!Lr='AD)XnEc,#92E-#Q?X%hmp=^+IQ]$KJB/QrmOC@.4C4,Io/1:Lne88DOWU+3Sl%Lf1?TOed=s'>QTQ]$B#=L7[F6($;?Ar-\?2s:dkDadW@e9P3>=HN5?Ec%Z:jfjoPX_S)RNRr1NL8S);l2F35u0Z_+:F(gnXsP.DT:Ni3Ni2S-tj"j#`*KcOH8/"sYW@"*+\Z"rRs[/r0`O=Bg<s0F4GBO3Ob]%8]G7j7D^3V0\_RMbK$,BQr?,KAI*'h#\.H`>:<&hWbA]+4>9_M(b6%(joD/Z^i1VOX:@CmJ<i=%A/89'%4pcEX'3<E-EsW_CSLsR%o"`[V@-t>e!h\3R@!MdSDZHROAhQ,h&.?:E+<])T-l`d9(5NG67#2<\X#^Rn(>qt"0c:N[/r1Jd7$"!@J9=ET/4Ar)KGGf>*-+>i%8RPD/Z@irV/>&L:WC`s:K+t49hht+le@WnX0UF/(Pk-Sr9op!"RS/iRG!4PhlEa'%>94M7*L`eV%?DQu,+0q>?c)!G]MG2`80ssA%4:<A#4g52gllEfF$a["6"a/8W-E08b=+=Z?a/Z=InYN)1,F.F@4bI^1qT[W0XP9O_$Yc5pmKk^G8FH[b#M>(5-'dHIMdbZ2MrE@k%.%I-J!b_aA'-r_I@bLlG3Fn+\a9KhOoqdf,AWk#delJ5UO;qCFWb6VH1J_g0V?"l=#plDeVW-MAcN-ZC^$m$.FQ(RcekPp9'WcYG%Qog4+2r0'L'a(V<.X^.j7E<St9%D.]0N3k.gHh1R<N/JoVc!!?lr[=(:sT\%)da&X=Xh7?"p()G.T<OND/6]h<HK>ac%7SMk+ua3%6D:AK=+q^E=l1*Yk5LI(k[4YSD66jK.@63a?;]-?'>Im'%'KCqH8ad(N-6I9D%NV_o^=mT^YFOtI3a+H`]JutJb/ae)U^G?1sKu&%"'R$k9?dlCp+b*GU0$CL."&#bHPM"5b%HD=.R.oWkBEnQ]h@I",?;Hj*b@G[jb+$eBbj:88/an/VQ<eMrWO$%b5q;nbRb6!*,,rU%[QL[JXn-YqkeMZc3^?SqI?"Qd!]D'LC@lrfn,Wg<P&H^6f+R82AJL-=jQXaJTop^3,sqkEROg(Z/In1$BY;-CaH6Be0.]ImcB.:I%Q4^05:Q+AW[`OY[P9h.q6ZrrC3\FPs%Tto;K$58mHit<O-5f&Q)*p;$65g_/GVJ.J7'/JDfITm:L+&B!E/%UA@YY6B-=XDGJjtpc%K+)NspC;6!V2=.oWpiGD$#:Xe`@=JZ<[8fe'k%tgiB+7JCE$Xqe/bP6:b6CJfiNG.Y;T(#hi@(4h<.ZN^3"J&RBKTEj^qu@s-d1e%XM!HJHW;_anS>R2Cffo06M'BE$Z!l[IrD>E\?oLS\!rZS::o:b81l2hgh*n>;knS;WKs"7)ID$Y/)-^Er+l)TreY(&V8U$YIE"Q4%?)'203M2!siP]%"aAM$gbZIE=*5T_(bO3Z)'WN2AX\p'6"a(U3!"cE\;N0:&$AP9fh.i:^jWB`h64uH]mb2Y70`Ys2#h2]o?^*JW%SQ;dhW26PcAgG_rIfou8KugN#ZK7#*g@THIoq1<:kZQ6AkJ,/&b$633r#8?Brt6:b#Pl\ZaFE%IjC%(;_u<H.e@pfphlAZ'F1<]$%0!F!VPE>J:qCG`md)Ni8$dBX&BBjD7'n:L0FirQ5j5r57QECa-i*J_C[T7+OU?C$+H(+A5]@/n2<6M[Y3>*Lj-41Elk<#&$j:%L=%<i6jgpLLtP5)WVCW*O*R#KaK[EIu`$/(JYKip<]CpN7*.aH?'S0=8mtB)-cY-o$I2lDad7kG1OAW7JM)?#1=+`*&^Oh)hq_O.uhD%fP[3)knU=aC4hg&XH]s;?`0ZoHDamsDfRa@N/>K@`uRi`+CG6:ogZJpB\0""K2BfSirr%rCJj*Gb_;Lr:bro&ZK<jc0%B?K<R4pK%M3)irblV!ceQ;E9CZ\%0S>\[56q,.&VTagQQ@q%9C1<QZk!RC@W6oiuk!T(o/(2$g9F5T2c-6=[pWn^Z+1u)F7CF!?A%11%.SR#o%NfNQ,(NKU)Ke_j/(Th]sJSpcHnL/24fd%?>:Fpu`>OJ=)_7e9&7/(/@*lE+MrObKUISKb0.h"O'8oY9rO3]\-[!qo6k%,EM3(5Ut%:\e*kYQTFcJ=0n(-8dEVk1"9%`I`M92jfPNYed-mUCF)LTn-n?AJQ2OKa)._Jak'1Atab^1.u8RJP"l4H[8$]0gM@b"suhhc9_Vs%Yn"+e^`NPa()ls*a/F\6YPcF9arEP>?q#ACAnIKU;,&?N.P]bS_`7HJTrKo`DaK8j=h^m8(aKL#OAV!kL$Ds^>EhE('XFcK3#u8g%mt763f/+eQRdd:%iGT1>_g)\D,U4[+hdTE\XS;J<$DSF#]R1SeBm\D0q@!_]IgSE8B*%F*]?lN"pMn/686`2bo6R*4m+c]_Kc"N(%?$62DCg)g5-,t=iKkbTlNjTV%GmC<oV=I'O2E7$T9P9?*Tq./fcpCb4qM_-WK+Pl@6!k5bOYkZqrNB!*OBO6S\<ja&.TP2fJ]]i4%,JW@]q':YtjX(JP:QA'b08)3^VY)LohKLF:6FkD`dPFI2?'H5_Y<.@bJ*IjrIb\[Imsg_m%>4]OD%DiOf[2FY.H0X'Wc)ABH6dJl%Z2>U_Uq@b5P8aQDlV&MdK=E39\p=US7s"3C%(a3f$aPfo\fLrqr=2(G1b7soRrUTF4n7FYC"!`=+&*d$Fu3hnRM3$&3Q9+4ZQ7<D%Nok.Jo.TVOmV-FY>!/CGm:+@a1&n#\R(.oSLlSX_FtmXAR'U)Bfe2CiRFAKJbe?_)gVs)omp_S4(DiVZ%r.V:cAju;M.c8@hRNJd%Y#alg7)E<M4+uShEj8r1'CP7is7cK0BPH"2?@[0="L`+TbG2]C"E#S@rPtF&=60aYN$fT#obof?[2@\KX2-?WoU"1ZSEb&+MnugE%B";/N",U>j"$a,4=^V&'WE7:1[:ZtV<c8ag"*X`WEMgK1K3=^Y(2')TR7:PS(cL/#fJEsorIPbl8+4>0r`?Yp`-JeS?h(>KP),\u%\I(R\"ZetMmjuVDXcQi$([HWKIjfjlb;T3g-\eLSXBU[)&ThdZ?=]!jGJ$8%Akfg>n\)ut/agE(MES/u^C@Cc8"!H*iXXK/TE+$e%#FFF$eh9IYB!I7sls^Z)"X=a%]C5k>'Z-6V/nVAH=mTT5]9pPiB!I7sllm4%:%*Q-/G.A'*ja3$_f4ZsK!X+Q1aR`Jloi%WXNACM%P%M2ih`Z$^/+%sUARHp%ME!\@52P@@of[R&knN$T+606g8\J+g#1b0p<rEl.cYh:*l*@h1llJ98Ai0C&@MN'_lXHa7mKE/ReRc)-%cHLC`K^#f,fas1I#%s!eM$:[8%6j`OS6=EP]H_Dohldn&p=]=#mrf2inp\i5r=A@B9A1ba+19Vec'uK>FY_F@[UqIe%p$GpGnSLX%\"DJirqBG<GX:0XZc@0c5"G4``4hHk#3bg]V3H08`4HhTk0qS_h3i&Zs'3Obb%nD7`_%35C(hFqRa-76inmrq<VKnFmT/i5C/\!(%(O8ng!ick<q?`,g/8MM`s'IVTs1:WKi1ODEV=OTJ/WtIF`]$QL]5LnBPIek"nQ[*,*@@)IB.857["hf<6XS2QBb+.@bGN=d*$J")%YOW_]"oj&pf5D##5Kc*U\?(nYbrM3ON"b:oA=UT+_fTFZBGULpQtqlD+/X$9aS_KY40*"4_<R)JG,KWBWKq<S*aHKtU+da;^4U])%J+TI95AF9R`Bb+h]XN^IN[rX>&,POjr:`'H8r;E:3\Rk_q.BGL#:M<]Id3p3fB6[7:8laSH!P5&I`,B]E8<U^=HB3[_'D&MpEYJ8%96a0IT^TW8^n8/51\YVG50_l\H5uZ.g'jF\:K-C>>r2ps\Q*"e.kr(a139+#%b+Sj<-79qPke,&':S_m1]M1O5L',(s.o\%XA5r(%'as_,oqBTVi'YJO_j'pmifgMqhKb4RR5n&AlTEGKC4>medlg8\S_\0I8T$tFfPS&q^tM'q@'a*qk8d8ZUJLUn\?jrPB=H-HJFe"=%(n"M%'+b"t(HE;^HG/Cq14NU^'X-,O>Z>VUMO!n]eMr]9;=C6o,8SD]`28>X>$$DUrL_;Uo>uF1dppU9Jg7TV"nACW*WP6Jm%d1P%fIpg'<%/Q+!Y[5UVV?f\pX#M2H]@EbIP/j_h#tm]+*0>GPp^N+Sns5_KV_l^VCCFrbVI.gHrZ6i[b:!Bm_GunK\,g,R5:c5OZrO%%m<mB"Us'n&2cUCMS(X&#r)n[$r]];/_(mfK#/N"T%jASE(<\j4_O\A9GS]e>4cHU\-F<FQ:C:H)n\YWFmh;;+:O"/3B+H5Wl*@oZ%mj;)-c!DcFLT51a>i"(SF_@`@^\h?m&TZUbMVgL!_V+O'VZlsI%Y-!3qYTlWP/mk[9T`2#04+<t+.p)a&"cuB@h4%^d$;AN&2sdV%.f(4UM&*std'PZ@o7)X.n-Jl$@R[Mi<4o!`2npVYK(LW!o?2H(kWi/6c2D(01l7`P^[>(4(WOYb_#]b<+Kt7m%=N^Sm.%P,lSQS)%i%IUTo!;QiIlGe1`/1:>HnV'A3eh%2i(^HNf)*D.UKO>BA?gCO?!S,ij!.-sM.I)Q'dJ'TB%$ZYWd9.lDWWIoHOqb(':NEWp+b<U%o,'9UkeNaTN",s=1f%S8K"<Ghh;`]?[Gp-Z8VMLV8LZ0h,k!68D9chZYL8S[J&P=^Y#5tTV8+$[O.1i,lQX>)d3j^H&U'0fh[d>5%eCuAu2KUX93BOK@dO]]`pFK&W<,T,?#FKja4Gja4gak,IGNIrbM8?+i`?Y<7"m$tXD#Mr:I8:AHhNL#BUDL+:-ri;_9PIYuY>:kI%*%XXX<)N,9RuOIp[=0",h`-fsEFb<$af+Hh;:1:\P>O+R22*f#fpmtrM+N,FRk_nNDi=5T\Oh:#>9*Q:ansho:V*:;fu3?o;,RA\%gD=MkDsN=J(cbEV\to'CYOl.s?`U.CM*mJE"-tFe6B&s8hHqLH;?TmV[&ln78G=5sFs_rU@V@*COI)_\[$t;\'__bN'.es:3.!U0%D)S_)<IQaPn'A<p@\hsYY2m+u[h-K?r0&UVmc.e>PSeT"PWd#2qX0Bs;`t$dX8gK3Lrk9tnjRC(<B%I&Pgc]^U5<O8*C=2jE(@+n%)g%iGBQ#ME<N+HjeY@/m>`@bphequYpKXH%m7*\um1soC-*ie:UKT(3Dp#K]I\AJbWo?3)nEE'h0qDQl(Cg9&X1K52`hY)Ci!EB)%>@5p`YE<mr4eV)d;H^AN0tCO1%K#4-Gml,`WE^M)eWkXZYlg3,72O3hq1$eS`/DdRRpWb56`P>BAf)e(6\4G<cXGa(Ip_5(6[rFV%N5J7o[D0JE>5bAg1O9fZWS3&<4H[Vu-VuF#2![(T(kHEr@(`UIO(#HJmf;u`]bW2R$H6K;VDDcG3&HP4h7l.CC8Fr`7).Hd=K!#0%lS39B$e>1@F,?Rs6RsG&I7:A1/lHod^HT,=RG@GuBpD;UG3)5a)>Q/YaIFp5.Q;>aj:C(q32KD7.Sat%6k%]qhjKj<?Xh][V*W>R%+NEU$.8GMO!W0f.SiDm_;FSq19S8_Gc=E4HnY_b&MA%.B^cqS2G,c3!VHHne)l^/3Lfkq?Dq>W.7#3qt/Z(K>+pRCtYO:gW,(r!M%KU>G)<Li&:L`!?l5*sS.+atRH@\S&iVC.ELNY%"@KQje<e+fC&3*BoN]`3Gns3;SYVZ?+6%Y-VZI/9J)`fH)l7JP4nBnefu"RS$1%hD%K=FnSLg4-5T2k<&Zd3Al-lm1daCHghm+R@K_fWI](^q4oN%SFu:6%;O.Z_:]n`Z_X]pT[$]gegtP$GL&j;nKQjncIOC(>E^8;%S)p.9_##0bpBT"3Y5?IA@\W=p;c;"=L7d:12nQtF`48i^V=I'O2Y`Pn@4lJ_$ghaMBbdZEpM]5OU$H>M%F/i0A<B*I\`BO!dpR3[%RcC2S:T,f:?[am#SHfbighg%ObLK460G04:/3/&WY8okED<PPVR>]PhE/O.=`2gm[%33+A2VUahTA],a<d&9OIqnTX(2!R<P>LlZ%r+P-2(4LWDWfH8ccS.F[)n;,&Q((7N/DDVqf*Rl8GR`O?'/ICD2o-AmGeF%_5Bbu.2^nMMBdEG:Vk95b#tj(s!qOn&qbgnbTE#N*%MYq^72hVIYPm<V3kB$RrJKH7Eb^WS>(P:9kU6^o>X:VpaC*c*/4.j'8Ocs#nn#[pg^#E$plIY6u>ps"iDj2l].`H@bB)T;'[#%90%X08"!h5,"?!->0L&'Mq<ZW&R)@Seq#C<<skV]())6?=oES.B`eM%rLVV)SIQVpAU'oie=nBb-TNOG5a.iE.$W@AoQrf;m$h\#j]=%8%J?)`3DSo28B9TA4eS>9$5Q>_m2DYN/J[`)``B)"&LdaZ>QXj?;>+%og\N9W_f_qZTpbYPF_`L+i.n1]Eb1^OJk#^C(6#gMYW=u%jAL[=h@+@"m/SY(-Y8@W8*gGk33KWhOlRgbid%q4$;8KMX'*Bu2GE5:>_(oa'q3`V@`j;o.U192/@_]=s6''k/(c7L\nh3lHg^R/%`UkFu0<AT_=J`iuP`Wf5)hh`p@S_W=<>qKC=/c(r9H!mQ1`o8>M3Zl2j^JH\(a_LJj-(c_P+S&?9q[=?9@=uZYl9_\(_;=K`<SV=%+F-f!QPK3+*tA-m%j0LQ*>TK@Cu\#)5<eqLi,Yd_LtP:'_'.(LDmab@bYc:@\r.=Y\R0;SXk^j*_nSV[,EYCjgaB#l'hj#SD%1?r%;XtGV"j2?!>:fPnIAm.)+Ai"L>,KcD&63*6aERXX^RrXH6L239H-dIIi5[qS:esAE(nYnCJ[5]AXUV$5TE\\sZY$4b(1peq0RW8,%kiYWuVEY$D#1J&f%r'$0HmkU<bP7,JTeYeL<!i(23!c/['3ghq[(1=H=%ZI4)h0<J1WTrW-E?1K$*2F(XXCe\fJ/o$h="o:psXU4%s6BgYhGfF2hdQ-T/cU&LbPk)6\?>pSLcA%>lHNMCg$3(bW*4gj&V3CZg*F7BPF.q9@e"S>*Fd6Od)u^o0cN*s\-C6.g+-!G]n2KK%$G4nG:aajN88/PhM<76mr`2j07Pl9_0iI-j;2g)nej=ua_srKY'mWc),*,?,jAAS'G&QkI$YX*Zpb>b2mfXbU1I_LfB$p=[BPAP=%="=Hd=HQfr#DHp'h(I.p*h:\c'-=gD71iCJOV*."$b*]6`Th/^Doq"FVLM@@LopER`%Q:s3%/8285#[kY+4EfgFcf^m57u,QJ@!S%r:+h,NZDtnI8*1!SGp<K3#<DUAa8j(6%56J4BI^Cc_98!IdB7R;P*YLg0ZqP7&0*UmT!HXaA'iA+n+:O_oUSiIJp*KKLt*]ZV@JM%I-KkXc$@![h>EnlQ>q--JBg;OAa@;F5!LN$BGV;&B.NO3n3?mZV]!;=+9UTr`IZe?:fVE"s7n9r6iR6Hs6%[^V+]%'bs/28c@-Ir%XgP+?$)idD;2NO],d"4V;i7,*)3Rgu=ta3KU[IOm-tLT!]:IQ!Kl0;9]Oq;G!c]3FgG/9g#b#`"hmE<rLl#R)06:d2k$KR-8)J<;%+@NBt*A`#Hdq[KQrY2D/P8%7"&USP#2*NJh3BCD^'eh]UFWRbh>]Tc&HuTkrPk`!"b'i3rf#9ieXGu\9%9h:SES>!/VPc7VF/6!%%E.MLNmTn"B-)K:l(,_GWg\Y[ZT6EF7bL'8"VV"bPq57,*&%YuOCIVXL]:G5O(b*L&,1l%Y>e.M),L$+TG<7HBhDJt5kOga#4+$(I%p?Q<:qL*VlaR(l!T_h=En_FB@%"UKArh-"R)MFT#]2/Q5kZ?_^IM%T1,qo$)LUog;WUVE%Jk$ECZ%UkURefV)%=I$O^Rml!]%a6R%o]$p!l#[icHkhIB>Uqas#L,#AIKY+$0-co@aB[n1mG+,4aM;kr;+Z&=>]Nf;>&!X`=fYD<pXHdJ]I`?l:H`P/8gStumWR%G[-PiO%6E=C0<rQ1gl+l+uP)Vd1-IAd>I=pB463HMg)MMf#]O#9;P!sa8D\#s'(RfgE7lbj"rjSHBPq)1<H)4\YHO<2?r/`u5[pO#Yq&n(P%ahr/"?L7m5$e*VMJKQ5gjLJ%dO]='(AP$[7An^nr\luBg@fqk,qDB#&enkKA/(?15L!+N-T\elh\A$@MN7XVDUXP5g7jQl`3GP76%m:N'CC)!+]cQCZ9P[L'Z&-2b`q'&smOULP3+Lk)gMP6<=C\?\0*PfF+f&cfR@1AOjQ:9FPb)a]qX[3s\$=/pdgY!?Jm3hQ)RX=^:%To)M\XrFN_N,Au_HCKeWjFtq*%8"n=+6@):,G;a*f[HKqXYaF;kTBd3Ui?^)nlckR<-[s8jiNue!VmtN=8l("hSsQFDnn$_>+9=1%D[hIgene2EM$JPGOE"@`-;iRh%sf<`o"7dNd*7"b(0*MoUr(I8]6:[TSSD/fpIVpKJgnReDB?kUlOC=+/o\hVXec@f_-B\`oImbV%Wf!&s<)$A_Uo)kS]V&JtO]!""R4V*,:G1D%j'<'9o+ot#35"T.Tl$VI@dDimlD="*_%C]7@IlI;pOLen8e628N"Ouh-*UiZTJu6\%Rm1CSJAbc0+#N:"hF;2Qd/=l/Q+(PJC'U*eTFU,,cffQED"UK8p4HF&7^GWp)`HK%q1XS5.>mO7@O[9R5S*!UT1t'I*l9\P@)uhL%p]7V"Lq$0PC!>$+TnMamM%1&+g&SY]QJ)+!23(pYhgd1scg-`M<E"b1Fqf0a]'9g1(noo+V,m.kog:>jj33^7Z[Upmg],cmfB>B9%5nAr6(dES*f!"Um*L,Fr$sF^(V4eao)8<S"*,0sCp(_DL%>Jc4E`"8Ea$J?di(f<`n@7<lVcfIY4HFQ<iWueOG_JVkhtqO;k[V'Y%"*&+p>55h-3fGkjSa7,]p%(LsYOIa]&u1og,ILppq:"^\#lZa<.\-]1=G.+*6aS\!J=g]lU3'<OKG1T8nC9o\Pt7b#23lP@B_Om/%R6lP.s,,;5oA'D$mi0AnkrlW%T1j9K&Iafo;g\5N6m'l>X*iJHq<*oF+pma%,^:ZB!=Fr!9MWVr\e)01T8lM,dS8!00X?;cZJfKh%"q@JSWp/8jiU&=R2`IrY_K]H"rGJhcP-Si9MZKU<DV)2U<opWQoK&<MKk<T+21-sePU.VQ`]nrt[?-19"719KA#g`kapMS3"'-/`%Kk<2O60d:l@rQ#&oDg_'&d#pE")*#09;TTb0O+>1>j+V0<Z1)WG88ZT:`^UF:dY?W=]-"YgU)Y+,9SJ5Vf5hC-0`NEpGFe%K>D#P%6oQZ%YutcDP(%o]Urpa&6DID<-!Mk_-g_^8.L3fK+UpQuG9$/c]hsOL]q`k5$M/SGI>FbZ5L*[,T<=L'V6J%%XrUD2_dGJ)Fg,/`%W(5Gb?(3H;BfiE]@JLOu(o-55ZZ6_^RaTDg1R$AHQ+LWEJI5c'l9hIndt#sS#@3)3MXS$m"X:1LL)R(*,o>:sj/^JMH*'oB`mAR#%LUt_I"#)9kg3"AC$.o[9;5%3j%:ogLd,1,7:FbIUU2AF%UHDHS'1bX\6EO4#H8RQ9dMU!%7iqILRj]YXT62i8&8W(sN*_Ht]s[r$%*?N*8^37;E'i:,Z,8ZAT^MT6-qS>l'Lt,&IF%i4'++Dh)o5L8fa,Fq(h2]rt8U&o".3+%iAn=f@+Rfp_]=8%>\,(@WD*%,gE;aF)%Q!2e)`]8:L6[9"h2F,oHY.,IW+BYaK`csffTkfAad1dnHB<^aPcV\4#]:s7"XMXStM5kZOO1EE1]E&rGaU8RMGYb)gp8QLaiV]jO%XV^og__hM#75.Qr]8r02'3!%]r#t+>*tGpBKXW<H4[;!87nktaY]@SmMKCgEE>t:Ze9Hm`#D4!;SU2>3HiscMUX%jn8d8a_2a=JN%P?k+r]mWmu%OQG!GuH@fmr8RpQ!,r\EG7j=i@D-*Bon+'UJTUC44)h_#Hb4&G_6=/Lo%)_'s_lUd7:t2Mm_9h<2k7BkZ$:G[f2$O%0\5rt"aa]GW]!J*WbO+D#`V_]T:GrD=6s^H1`FV<"o\?ueMfN5.^o:(KW5KbfaKDbbDE0E*bDSlZ0ji!$>r73]BZBH=*0bLUFQas%$qM)m17ihSdDLW!<=I:AcjgGco1JnWckp)SlSNr6;.$c52F.LTGe&g'QU;0rXQaZ2J2/U#bcY)sCH"ncH5"8I"KJ]c"c+gWK2/W[%gKTT-nJ:PncSFLY!+WF`86s39pL>mnNQ[gW<4Rb\;+'#kl7q0!b;c:I/5[ATJf='?:fZFXPlIEsR=Tm_m]R%A[&@/lc*iF>i@1JM%4nfsP4(Tn]5Y05KmKX4/M1h6*I*iM3IRl`BC_8*CW;6t7M;9tD;;$^g7bq[0;qYHg#O5N/FAZhO9%?E&U0\eY\;aOh(cXfKl[e[q%J"R!G6Pe"MRf>9Dc!KA'%B=[k7gq[H:C=LJmH!rDa'2`"HYf":X_uuqqdH"p8KXlg%#^c$R)K:tLNP^J)l`-i*'H^5Kp0U?DZp5S%GkF`)-;;sNeC?pK9.tUgdR,,Q$76Ul(A?enl-_1U1e<grLW>.J&g]_03Ae.;c6_bO^fDF+lC4-fl2^,I#fYBkf4l$.e["NlZJH/C%_Nc%i@@Of4Vc[^D_^*`GLKs,YA;O3\-#^74,4A*07d5T'P^!(\@Zf0J,^o!c3p1NarBb*=MQ0rR(]A*==3se^>,>96/-K)c",.te%?a\j8WbRZjG94j((ENbD<<6@iOIt+5<k"%T];lBmm_$RrlmiLFPp*"I<2_a56OX$rcl+Z^W_hu>m&p*T0q=/)#'Xh$@D[OE'l(/Q%d+B&_$B+0:\:uMLL*@S3k(]ko`4T8:83]^IC6Z0b4c4LV!!iDa6R!LRT*Rr/Pf;'--^^Z`_4BY&g=^-cK:(YGpRY]XSd@XX!JGKa%)tug7_Yo4P/CP=O:N2@MgY90)/Jg,V)D2p]?U$PV>^uMGl!!'EdZ4=fol>AR\Tr8(H<GU!PCKens"mY'UfrhugT?uj[(>dNo>SH6%Ecpj"e,>8<VeG15g:f_J)TF!jBk>%j0:.pD)f&eYcSj@@)Qf"MY-sL\gK<3Wd$0f=g?He_2gZM07enH2H2aP*9r4FfhAU.4oDut<%ZMD%2lf2S=qsAIYppduthUM:'me0NTC@R"&eB)?_a7%I6W__Luk->fGc?\<m*a?pDFn4\ePC&fkSI?Pr>]9<,`qjiWo>YMqFgIH@%Rd9%t2bOsD3C6dGle1T!p>Y[*.p^u0^0eQE?aV[kejm+U*FGFLMsB0nNV/W6hf1j\E\$bCnk1";4o(]*/o<gD0AGA*]1:&*C(/#W%6E-09F2#mP(3;q9c$\Zr3*TU2kO^-[kuUMb(H4*FhrZ`VcEe<74--PqMT*FiI]G$^0(uGmA5ub]=O#"KYH*pA4/I%AmcDpZk2N;!%]6Eo.42Sb:Z*n_M-g&A$ala,B<d]5"pj@R.`Obm;]OG"oXUEs%(:Vi5lW)L(Z'a?]SH.BFVe,1bY*;s;R?[iTYIaa]IX.o_Y$)&h%4G+/kEuUP7ogeIk99.\WFkJqnO'YqVqNo1oPLA]qG5g\]Fo.mk#8;D,Sisq:3>M#$Ri:;N7J_<r/:41<;VG(!c]@e+.u!XDq$2g"%RlH;@$X]hKWfi`Jc6$pCoR66uIbjn0r[t\'eMBk/YM>Q>6/)UlIBP39G`c4YZ7dl'Hi:U(^:mYEp?E$fU^o0OpH!/;UHk[JNXrqg%!!%0@q&rcg)cUE588$6Se_,!/V'/$[DajC[qe\'7Z*O6i="$1ZS/1:+h`(j^n)(^[1[0PY`DPao`qRf[Q\i8[n_s8%Onhk=53C/?%`KR\!hL1s@IX?:)WI,@0CDSpNQhekE1DLJrii?W2QKl;2p<iW(?2+$KZe^"PTsW"QObdW'LXg<%;K!=XSeSp1KO+qrYd&B,IcqjA%Zobapeq;We*ooZ#Da'7g*<G?9cEn7+\W<St9C;'AbH-m,[%S->XFFO%B7W+8/M3jccBmCqlGdXb@HBg0jh/6@FU1VoQS>"Sp,:a5%*L/$bIBg'N2*ZSqRrXeej,_p2j"K^,82iRtkKk[@kFXRH10<K)3k)Vcap4.<%.KsN'':TD642NKVRh$S;gYm5\\-(mXL7'B6eD15%^$AsVK<=E1=5ONIF3@5>:;8)pY04GF`121e?WmR=o>8VHpHDjVK9g8,l>;!S/q@YVi,*9KqmS#PI?7eqW356gk!s:Y`TGe6`*=uL%QrWZ#T?E[(=tIEP+b>hT[n`6&d-Sp,`j><HG3L>ZXe!ttj/_p8To7`>IKtkf;Z2lHJ$Nm]\q_)':SHIB-_SZF/&3gn7H)cpI\FGQ%+qYlZOjNt%k1o*3LQQ_lGBmaA5C'iTq.W$^lDf&WNFMO>po_7o"UMk,%Wi'I^4/:MWh,f"1`sDL#;Vd7"Cu5K&6bF\SW8ma?@RIa%+m\V8Mp-`R5pf\)oo$Q9Rr>`A\]<E4$5!.'R<.jCr?:e*3kN40gUlk9q6Oh9m2gBk=*!KE\TsS']?f0dm0?/\eJ1ZtmCiE=<8&YK%U5,RQrJ@lUo%i:AlgWnJ;(\AsXHlYc*:V!Mh8s>;+"Y%Xf4TD541fdLTk1]N?LZ;=BD75)e>;uSFVptSo)-T,hHnkkS#bsmbBd&9%kjBrK%G*CrH@C.NY%:8P>],pWdsA!)D\ToX4JWaZDdKH_NQ3[E.#tdNT:#!NHXKKr]KWbtEHI;0ZOVjo8)j=*oij#GmquhIV=hKe%H]\4X)U6t<D;chTWBGU4[A?*imsItk03apgmcl`]p3>bQEd:U`TNj'$?)f?e;pmHpS&\_#=cQ]74!1nlW0bFBoWr\;cTg-/X6#n+%f0"[m^^c=ok0+GK<f>s^q<WpW9?d(EW9bL+[PuA!g**/B:rK-if!f%acdoe1e88MpH34u?CdVA!/a1l+kCe5h3H+>Tc+X'7YV(__%.M283[C;H8IebJ[<I<Uagh@LWh=u)&R5YXP#dZ5#eeaEFB4'2cmn^:g:^LNIXD*Cbre\(NFoan$G>A"<4of`p"o<4^PRI0VV-5?"%>Uk)U([mU%e)G-C?98V"OJ<goB0<uH`a`8]U[)<i!+YGtj'D'<X3\!Abe_tZ\b[uNCAFiW%#VO!Te.66=gaWC!.]O.I#KUqCj]#Y%>`]mtFYIl?oA[_nj-Ar3<:(77[J.+:D`$5?T0U.*4-+2Wj\M,3:"AgqKlcrOrT9=734ljU^4VhtR*VBV4Ld^Tn18ps]^V(!SYp^8%W8D]TN)2[!afd@UHNU@rji;q`l';p>+i@AUT9\6Mg-R,bC;0J-ce4(X_1\ntO*c-h`ILfd?`D]cfWlmN]1,X=D4E_Zhom[dWgC.8%*Bmir\XK[%$a+_uqKXs1oDHGb*n/\=:nO&(P.U)<&7QEk:cn[51XiQ>:7km*bKk3a?&!NH#K=T5[.-mqPP3W:+i"c$:+`W>Y?kA1%S+@TDk1*[GFoU8jZ3>'NdM-3F!bdYjec9m%[eRKkT?gP<TI4dq4uS[`Zq/L.@i@:tY4TsXT0d7,llrO)7rZ^R_,kFO&LsR0B&hj\%Z!+`LrlT!fka,M>R<SpBP3cunq_t\N$g[?kp2=4%2_jLM^WU$NRcf)mXH0o5Ac5c?gh\Sljb)`3r`XI)C$S]@2_CU&JLm<)fdke"%c)3u'A6jl>@(9&L!X,VQ1Fr^BeN!'^r9`:I`rPSOYJKMY]UgX+l0r;U1pV/,qQAZ_.%5EsgTC<@VUDIM0_3\XbggE>!?g1tHFqqJ%p=SKE.i`^k]CLF:-!Yc&Ud'.tmYuFur^=#o46HjkhX5Xk"P9q;OK[6"QYTsUABQA;:1i6frQYWZArZF`g?>=IFm3bd2q^En?sQOB%\B`grZ@B\<G4[MLT9WiQY)SOrI*7:)[a<phrU:Ass6>/2=f^b@^35Pq9Af=+\`Z\(j6Zr(SUmWX/#U_V4'FYXFo:<P0DMEX>tm2c%8>R!.buX3c4j\[=[XRtlM7I#18Wk8,rHq65"'G@PT:\9hkA$Qkg734o#CY?-EGm6'k$[47>PN1/b4@i;"l?mQ3['Z]$fkB<ds7(`%jjeZh4'R+DeF@/(4jL]gRk&m">[5LD]\enCI^?``ETLt!5JOg5_1gcDG&lIr#`TlrB2Ff<5GkoMWh6,YX9nVmp=q&<oqN@:q8L<B%\+^g//11+7fuZVW(T+IFSD@mCq\m_m+[GmL8S;,Q9+(@%RBDFjdt#htLrJY>[QNHrD4#[::Cdc(*:5IG8fY9[MpK=1TV@_kBB_&g%-]d#!-GJZTa5=3RH$tB0-`D%oLe4^j"ZlA#:9h.rORU2'Ic]NLn:%k*@HOmh@W>DU+2#`LHoPep2:fCf8kA.rXUjmU_rJ^3\Z_aT%`c'bO?*V=[hZrq12>36_VqXI4(X92Pp1c5BMJj9%A$D[-D9c2tII65i2ZI=L'pYVrp="`BnETFe$2hdH*Jegt34mXcZ]ph]]@]0Z%gfT!6o$0DD?9WG4c^,"_;hYsD=J+Ja/it(-2QH5MaoQ`L:S7:\IKb[n4m;"VrXjCc)].2`h.&;sQX3uM2gk3dYU+;ejRH+Hm*V"M%Y`,`1HdJ<Y2K`,*hH54!m5h'"E37'rHnFBta1O0hQHS0HeoF#hD`ZRqet]e6dW0d75kS3)0@6o0I^#g[Q^Q%?bB$a'5<&YUK-Ifg%26I2X(tCI5p"I2R>fGLrppEm4-XC#'Y_!Y2$2W'sHC-$Q2to"CR&f+-h@CmUD(<E4m:*>P9XC<P?hr@<6Q9E,!o^:8.cS6l]pd^3%=A(S>etLSHC1_0gA*rmB"6aR3IX;NoH(^@R0,s6:_<K[NXWRF0Yd]F3-!eT??,!ClP1`Rk^(cS;gr#%(%=(tr;UGRj3nnJR]q^+c%GU_KfAmT%DeA1YKB_?E6)T]d@#Vt(X#m>$laBi,adJDd"hcO67cp5;EqYC=@XOBlpT7UsSqTE^tGQ@!=ciYcf"("+n!rR*0np4gE%73e:h!thtRk<9[-5DGi]`1r+'6flK#X0'%hFKbCtr.B^he%SiKX0q[>p$GIhnbLJN^cX]$Y2.m<CH7/8A"\i?^U^uFdec15!3nXI%`J*2Fhn4DH`g`r?k&pFh'em)f>dG0o>R)!hY^.mfBkr"SAG:KUAB<j[+B/4C6VNne(GEM[!1R7Xf_GHO=RI+"BudX-)j^T/n`h3#%c2Dp7F"[2\&#'%!Y!/b"T5LfYXo3Ji`LU?be[$&fNh/2]QThK(3EMgo26shU(Y;m;58dW8]qDNU1LG,4:1&BhO#k<%cVtQrP[(Kg%6;:OrQ*1&h[G@VC`esZI\[40iWDcVdo4Q'[gAe[9XLUa)'K\0[ot)(IN.^iQNV2Jda$BSVD=RD[b+/(jHf5NYl;r(DaqVb9[@_8"%OPPA.gt-JRo'Trbq3c#9YFST[5B$T9Ercp)\$BZ2onCG-75,19-fXZkF$6.85@<P/0@rUJ(Squp63\3K!.o5%f$@5HSSucNn,&/t%Q"h<6I\*aVmDEF0?0g^r:A2QLJL,;UpA?hS*aQD?f&poEi,S:0p2f?5UOK!)cau]eg#df;T![=K8!tC,[e9!6IQ_%S`SjcAHf*j&%9)*l)P!c@jG:u`m[BFrCg"jupH@EU-7L`FBg`)1^55%[400:K,@UPV<"mb/BB=YHmm!ETqT)gaTQF#?#miS;T;9bEY^H?Vq4Bjh^%!:(jdP#Scr\<<+5%>Q'jMsQ1\hme(5SfIO[1_s-HD_GLsr'L-%@ukPM]!)ASbDGC6MQKCO]rXEbZBQD8#<O0EIc4/(O0XZo2Q4C.%[nD,`atg3:r'OFf*t^i%cg@@W_^p=l9oq'jDd$ehEr.c6pBB>fH2BS5o6SY!>Rr7K1XsmW?qKWUpE!]1fUJ;2LY515+WJ)'ZVn6a%_fm7q9W[eq3HIgXKH,t:Mf#nB6>bt\=;>eh$84^k$(0=#Q#Gn$Yk['VgNo:@!p?l]OEpla@rWSJj<s]sh;_IXBCXBe@-#72aH#'S%TU*0bjf;:fFQ4op&c4Zro9IeFl'oX>-+mN$-"Q/2i)LSs/L>'rVJS#RK9+URf<(<c[c?M_+SX1Emud8>jrle!`5b=#Y67r$6P\sD%pMG#;0%,)"GE9PCCbC,gL*V*,bL.]<@-a5gqIT1F?+&N?p(G!O:t%_D)$SW:qR#[hmrhc;HaD8bD:c\c6>_.W=t?M1lVbj6Pe%g&%+6nP4V!!8ChrnF_'O?4PDq,$^ogQ=eTWs.Ore(Dc%o&7/KqinH.CWJ1'ot)nR0.M-rs7?ClUe\!X<);/3,<p/2F+'-p19C?a-^2c%c?T(gM!q?rr,V=L91aWFY!'d%G-a:!O#FQNLU:I"q=UT0Vi#`hrRi+"!+!<NGYM%Z]`H[RF;_`o(FQq(H15A7\bl6fkM3AI0R3E[%+iubAY`maqD_E3Ea)9.e]1Tu>`4&UV:+K[,l"W5lR[DiGIkRAM]&#!Ol,)7og9m9UT4]hM9IR\K3/1":9=`#CDk;K$E_F-a7EBcc%]%P%RJkK$)FKRR:m;5r9Dr.Va0C#J'naVeJ&X`;/7ll!8*p/>%b,9$/GP,n-Q/&jZ+QgjN/-dM;]'-lbh(#(3oDpB&X_,8qfBmCR%ZZ5!Uh$Xg`!ED=.,YmF'rl1IVr4")"qNdCfTO2[0o3;4\KmUC7\uBT@bBXA<#[h=bg.0c[ZQaY*3L>51MNbNA:Y#mi(Zf$09[4sB%7JfgX.(f*/6Ko]$TV(>,+S=-Rr'GIO1Bb#@!V"h7/[0AhUjt@h57m^B(@tT86Out6`QlBDCAI\#)h7jfTkM(3k0kR5S?r_@gs2g&%n`:DtD7rS\Rr_/*$V"I7W,>r(h)C`4M)c]^c`:AdkMVhVr&/U'I/Z8LMM$P@p*dPBc99I$\Q5n!3TcrGo<kq!g!?"W'd'r`eB<0X%q/DPR0$_f7>[E51o0?e9muQ-(;tO_o$b2keZK8__h]3!tYa-q)fakARnkV1<)N4$Y#?P)P>Mn&<O&&iBnq2SXk(Cl6'qC/`<rUdh%Oo\JDr?B7FQV'-B'VAlokHiPklL4>tp.#[@oo8G)lhSk6+7&sqKqG*iSNi@8LXpV*GinX1B/L#RR3FW1c$,H,Fg]ap($clc,EU+a%gTFg0nKIe',dFc3I0OVbk^LtZ*'U;Ci<qg4T,o38^O&;]QpEOQUugNa-#$iIhK`Qo>ps%>PIg8?`P#H,T$>dQo2O;MgKBnX=*97)%3J.NTF[8?>Q;E_s^4PAeJA?$C=17k;WZgeG4D\#n9N/uUg1[poRNd$@O:Q."Mt[&mdkOdiAK"D+\*R03C3l#p$XO</W9\bF69f"L%&t*tO@?Y%JQHV;XH"4)jat:nLMeJV1!D_Yucnp`HXZ.N(.sB&i$%\sM;MLn_:aT)O0E=U0:I-F'bct'7U;IsF!B:]W2ia$K$q!`)%TeA:"R$n1ipbj^&9:?(WDVJ8;;MMDm.'Z[]WgV5CQI8ag^ikHrJj13sXH]^<fXm\0D&iuUP[\@Rb_/D?<>sb<'HR^@FOf;)'@;^b%WpQ0[M;SHaf!mthN+@Yi/;1lOWb#YsHHJ!BNI\BiUJcpM_daG#Ri9LAdhi'j;=u20<Z&Du&qJO&8fS(:h/Q>QVA`bs9rEgr.@]U9%.GKH'TT>>2=W38gn6h(aclp73j/\Ig,RMr(WGbeE2(AW7@7^H52@qaRU[\qY!_4sO-7D1hi*2h,TOkEFS]<N<*G9/b$qKgRTXnUr%KE9O7:eST%)Q#kI@,&7fm0o9<7-*&3[=d<VbpMGtCh+lC^r"cm.17h("JFDSZj'2(WZm\S2\HddJ-,$?/-c<N1[8dDK@+dC,ti@d%hj0uCCo7@jCgds@RKdkGl7d?djb3bbKpC*f8tLkA$YIj3k]TQW#YI7V>L40!+g)NnE0u0ebm!_p*;,B+$ti`3o/[j#BLDsV?3[VJ%%1onJ!bEjc7*?^g/DUnk:W(b62,tSMlm1KG,QLV@8cXU0bD$?L:Eo.KgLVO9%93Ki`@rhFa;>95J0.lJ#FKBHYbPm9e8^4;_ls+m%F9I3tmO^fuCBk!:.7ikV&=Wt/8aSdug'B67;_5=p3u]jrE'-r&?F+m_1kge8Y_[<O*G?"]GepR%l76c8'jqGKGO/-5EB<J&6&cr:%qqWqs:F[c=YJEl?XpU//1:YGVj=uh-C?\!(RKgtBP444I&>uXG2Fo8.2l>^;7fak!5fUBdi_i,mWBc:ECa2X51&.aNNt^eq^a%@7%JIa;qaB&Yj,]5>Y5SKk0(m8E\m_JGuL`R9V(5Q_("Tm/-L"8*qlRJ"0:+t?iQpBTnJ59td4H1P8b#F%X8l3sOA/o%D>_5k-8do*+%OBF7Vh9iaV0Ml@IM$!5^8q9We#d?QM;&CFP,61/IAuaLK$;seW)(6H2#F-,sO3%*r%U'!./Bao63^O7VO*rIQ1S@,QTQ.5)R)mfS%@b]!!!.a$Z$)h;6%(.Vk8.8.Qo2V$+J9u%-T^W-'TpW^5?o`Ar8-N1@$sY7.$n)OXNbtFsLB:-!H*Y"QX^I\Na)D=A_C"LM6:jK)%#FB71'*E64&eg_5/6&=aV"KJFJUg<Q3YkUMN,CU'qfO&r6H.W^FG,Pp#>'So1).Z_8Ql7!65(+d!4GD6CTs$j+:WsF4Xba;0Nf%G%TErML:mj_C[NJ;>g.Wd-J%!>]6.IM%oX_1="^74EMS>D\mR!]n5M1LtAQT;Y-J8`0T7e1X;]n;f>#CEFO>Ob7@$,2nJ1;4DNIf:*%V]j5^:b!7%;]CN'N<p.ST]j`T=OrQUoQW`THo$>?O]XmXK3\I_okOdVbs[G@%Lbl%g1_<@/'nd`T<%X#B0^UPnNo_Ue.di&C%N*:%;$t@jM1emPZL1&HFqR%Sr&fARNZ],I'?"T]"t#*-K7^4C3[iXrJC=o\!ut%11,O]8ZSZ&RZL^etcbL_+51aUY4TUe.(f+lbnqhp^%MIiYoiWEdiX=8a9R4sMQ-5g8:-r<c9>-\kWWQ7((ea\1.'%I#PnFfg:G@>3Y'rkrC4uK]dQViiKW(0^%3$qE3lmDe_o[&5,Tc%O>%JkuHAYsC6OB"tdi),O,<O>0"FBSJs1#'p\+[=D-YX@0-UJPab,#-isWJg8Y/ldlX5<WQY8M*Vu5a``C@,Ts=^!05S+[0-5t$8h'g%?FIk.7_D:oo"hk%;\S5u,4)P-nQ*B/>9rAJP4.9/%AQi+_Dl,",hKhVLF"6Zb;*3L,(5(="nZNH6r<qt3a1_i8f]$)97`3j=Hd>_%^ViV,"=48H*imr7\j3Dp'k*d;[$=LiX6d`#O\N1gFujrekjMVISR=OI?4"o6RQ71)YY=ZbG&.9Xeidi%d]u-B!6DCQ\qL\V>QX;/%FJ;Ig1Y"s%`3S&\_J'lI;*YBUR%UFZ@#e\H$i3>f!Vd5;"SHP6i:3b39l$dZW">Y_8hM*VO]\71JK-M'EX7$E]87^R9>H>BP&Bn.%q^b>3%epW8^93[F5a`nEP]kD+J1is?F[R"V]7>;=*Cej`;n)n;U=`#:!gZikm65BL+-Ak)g+a!]>N1`R!iuW'MTE!*r31"BL'8&Q%Y!Ig^[Ao)%eYaEa"P<dsOVYREfFFud#FPl(&Yt'.V]EoM?4S`V%Bt>L,@aF]\XA6qkQ^*$HT-R:P5*FX^)Y*=oqm9ii7J;0QYa%F%][7H`&V*mqPaGiHU2R-$)Z@*\[\<og+<:_"'f/rT3oS=\cl`DDAn0T8fn1#o,oBTI('/k"%TfqbWo0O9JEA7T+2er"Uk.)NHFC]=%,tER39;@'1#cr`b%!3M41nG_G$5CHeNGf.k$4Ut,W!Fq2S\#XU],Qcj;&tT%.&?;`hZ:R7!Lp@Pj?(G4%Lth&5":/qD?*;)W=,Li%c&ccOS,<OG>Qj:s9f9Ha*);:-4Y/"hEZ@l/C1ois1cIq$^)bPrf?nTD8c/iD5do&k=o^gjk.jD+1r!N]/0l4P&P>-L,N'EU>V*af%5VEte!=PjN`qTsuHrsq(>;pYn9X*DJS]$S$!Hl4&Jh?$i.I`gKS=9Mk@i:r,"fDisC`O3+`DgpZ6l.a#ef:u9a@:r.R\2n^+<4sm%%TI$H0D*62$BpDSD?hRDOdN@Onu\!I0kR6i:uqo#XFM=AX.TS$"XZn00R/6LUbKIVLd6e+?Za'f3&qb>R&XV8#p=oB)*9^cN6)qu%?jL_GBLKZOn9\+aOOLNiDJ1b$i$AD-/0#/_!brTq0c%S$fn<\)%`YBgYm=Yt>]LgDadHIgA._kX"_HZsXe9r:.mjk2OlgbaQKG,6%WOf&a1,[Q%8?&gU.L"F?0=6H2CO*`c5WKQ-[UCM$ab@@2d81nk%,7Ge&#@#g#f'.M#hUN3FJQZob@!8j<.a+;LfTV=6lg%9Bo3hF%!hFr^!W>Yk@J`LdI->/64[JDS)&*69J-b!CaCLrQ`9HZ$^fRCj:+V8p#BU/.!t`gF`F]HH9Q)ili</CY&I$!CHKlWu'Ob9T=jaWH%]>7q5CmaZH8pgm+cAi`f\\^;d!1,1%.;3(>D5!ti=$e&PZo1`\@>R9i$l_PI8D%J/+O-Y=7+<H>J2?5I/SD+Bf<I&,PTa,G6.H?(%$M5L_2jBi@j4.&D/><c]iLhQ?j#"[G>SID\=Jse'l8LO)<>8E0_Yep=IPg2/$?7k_!`0@rDG2mnCt<4,._$SF<bsP[9S:_%/?U4u%fs!GLl/P`Z!Qtc*&X6\58'kQCRZ=$^81fE]d2\1UfUg3?EmgcY5EmS;U7hH"*<RZ)5]*JOE&E_o,Y10d:]q'H*#$9qi>]\s+G:aY%FFo\*$]lMkIhZaTW<`nQU("Jm-*WPAO>_*o!_3D%g;EuJ:$;f)6?jh):p`T$.X2D%9>RhX8hs>=iH-`i#3N"hO=7q#&7H=dJV>pT%]#p\"6?5tC]NtZO'/pNAW$#kTTJpN1(BnsFZA&F4B\_RF-<fX8k/ULO:_4K&aIa6ZbDt/O.E`hAI0@GEcmJgH!KUEk5g+sr:mQ+@%6rB]:/rGL_/6JIOkh"%ea<sD[d"Fi>$fbY0;DqGhm1Au*#2H,<*"h%F5s"]R@0M`(2%j9-h.;`JWXO4)!HQ7.aRp`M_"=A-2cSo>%57tMZ)/.CPJb923W&jA9fXR,WE#mcoLa<m]_F?<sbS&o_1^Jdf4Sd0)W+^?a'H*gE)r(pF'flt,B!N-^B]T:,GW(hSkj*f8BBd@C%*pkF$j/Em#,oK1p7H".JL^0/G'TFAm75(6D(mr13q'@jU/T!jG_b+L>#-NQq,oUQJ1dDdn#*P/4_V>GC@="*f6@fT\60eg&f[`0I%U+$;'B>q]D5`)/Y,MVb,%L=H@m;[\g:LPJ!"!f#^fsl%CUK`CC)`Q#<d,Qs)hSFh"eotN@$/8mgAbh-/OJ/ofe^5P\<<@4$nM&=(%nA8&h)hSDiH16Mm!\?W-_F.>U0KdHij(li"###31Nr%<I[a,68\*<32,a!t7$M$/NnG*LH,6QsD%2:WROe?,kF>VQj<5agU=[VD%%3Tt2ZT;"bcRsj"r-rN;GJLJB0@fZ^"Tj5RV1]WKrJl1gO)O=j<T[qJ^erf[Mrp>4l'U8El,';1/e.0\+PU*2E/KFOd3t<BJX9ucF%n3U0\VMX;g68<#(WSqOYZa[\:+=YFU"L/&r#"d'+Gt[]6*EJ,9K;$(=&rQj"0F_;qK1)O?(6QL]cp1RSkW82$iXU]nKkElq&1s,U%J<p!CoV4mF6Y%)X2o%+*3cV+7#i!5SkQO!K2KVALnc!,7V@d@[c*AcWJTdJ&p9G[ne1o<=Y^&U"bpT2=Q>sf3)Ld:V54@-S>XPKa%+sl`M*K)rdK2HHf@.4XX@?qiL,(LCa'\+>r#G*j+@USF%J3&N]%6,$U.3JnL.>ZYo"+<Wed;?1P%GlcU'$k%j;GmMf0KjN[0aRmJ%3ZCOCaO$-b/db_`Kq%1\(<j8/,d>?ZM\TMW1ia"PjXq'UZUp0'()r3g5_20=Qkk;L+fI84$*Y0La'#hPn\Jt<ctU8sn<hW#LID</%f4L/$jD<ITJ<glNbaAhEfjL>%SP6.rR>J$GUY$)NN9=WCF_VJYfkeKV.>-r'OD#k3>NHD$DW>[U"4im'*"3r9*@"?^#96Ql&q(Y@%A<Eg`=>29/7V>6C#1"]S)sdc#Ha)rBV7BurUSB]*.)B^6/?s&lL$6M[!+EZY"S,oDaS*X!BsSc+93U#a+9VH&VTJIam;t,_Bl-jb%"p0M\&Er@mKEI3d\lb]#.Ns1LfGb9*@8L8>@S2d^JF9@f(5h+RKEDq+L4]L<Q.:O2LeJN,6Lc%B:lnKYUPl.pfJUKg`Y.2h_>Q>S%NCL0(S-mu%8;p*:']:3+_BSQZ;"la#EZZ)(S-T3jD%#GYZ3nS20e>^s_^6:U_ur,UYSC'#.[o'^@2K/8]r\1Q]gp10BL6%UESH_p%$Js>`AL$GQGG$giUB,rDXb0kV;(eOQ9p#no,cMbe`_gI-'`8&kGAY/3j(XTL:Ku)NeIC^IpI=R.dhW358[U5RW-LC)jIkaNVJ)R/%XA^=$[ulRu&hOUCA3t5eP@B%HC)D`t$ZpP;JN=N3EB<=>+U0l=9A?-<?FFJTiRoiJ<J+`]7%JoKM**k[)e&4!g?H-=Mc)f16Nr[)%!,j!S/]'_@%XEATN\Na=[1`bI1ec!-Q,I>_"sI^\*fWFU[]*q`?iXl=pN>3=a1Nj'>Y6Tc!1tJIDBJr6`3',5i-C2j.?53'1,."7%\Io6A*Cc6M44[B(E<40-+>24*h-=2$%HEjI,oXbIciKGJ5\^e>;K567@2WW.OW[&#JJdPM'SY$NS_E<B:.1/o0K_e^?mZX]<#)NP%"Mh=j&1-X:0J.X/5Yocc07o%c"/L1+3Zq4[\8@M$H\W%lPI>Qbp0ABXS(#$0'bi^%P>kRXPi.+)JW8MLVI'W>f$HUeQaMP0"u\ir%N2^-PM:#gl.<<"j_ARJELIj*6.@q#$1hHfH3h$t0ZWT;h)QHG8)i>SD5fhl;1XMIT\I2sUiYrYuG+Wku7Oaf-X&'91?sTIN"4j/R%MMg[?F!,EdO@0oQ4U;,DnraHe`8jH5W-?s4Ub[g-)\as`=t6g?;?Fk)-j`7[G+\7;@gk"J#@oGh=r`(rnSaS3T[4%E0F%CYUb6eE%;HLpT6ii(k")*gBf>4g&Zij3>CFk3Z-Q>uWa?m`T1M4=Om",:t_-h:*BO(d/gD[([b6u6=S3DPE(BsQ[Uo2H[[*WV&$-2a;4KsK,%-3nHgh"uku;e3eu-r2\pNQr<:>1"/0U?"X=Ils0VgY.lu.*1k]Jm,NcLF"F]R90N27.oPIWe#LUciM>jETq%lJi$.UC.[Z)']lSn%079sTq[I*H]b-RIdMB-tL*7fU8JqW]..bg6ZrE(C@slrR`-Igd=Q6%&_14Z%I^\G6?kc>?A_^WPZmpS=%8d,&!([^ID_rp$K@pMY%(3(SB$c?1,Hc))4LqYNZKc9u`\9HW2gt8oK^HhglFoe2-d>TofX/MnGgFD.Tir[moC1[P?pQoC6A_TRm0?=Zs6KDjVLM7\L7XM5W%S9%teS/PY*hm:rk-;T8(165sBZ(-g]H5Yc+\HQftif*Uj'fnFSLg*T2gAm_i;=Qc'[n(8k"Za7G'fBubkO:nui.0*ao#7uk0#>TL%\.$#d7.E$q1S:/6a)E5pYV2O1Nlg+@5f6kD"MAAF4r]_@(ad`'i@6WLG).flZK;6_ImV4oS!>F1/NHJ5OX/7/'6YF>Stk:npMS0\%F(j*"6-RY;-BiN15X4(s^$</YEsmbX&RhQ-,7p!I&/lYf#ono?^U>-YZog84m]&hn@e(O0@LQLu;5;Aq#pUr;A2iRPOj]HG`6L8(%N`gYkk9PBM*UIP>rcA)8'MZgRISM@jWo3o?p=a\rXI,e.@3%]pABX^Z^nqO1SR&D3-g-.FZ`Q)0+4&f'f4E,3aR$KjL=o!#`V!VC%H#-?]hKNce7ce#W^a"%**F#Z6@jE%[g%DGUe$kfj\qtrH#lJ.*gn*I./NA*r-a\9r<E?nXAma:arld0fciI2De\^W87TeR!Y=t&;%=s(:^[_/*cD!")J4'm*__jo]b*.-G>F1ETK:Wp)4p$?8n88&UhqV?+[`qOPA`?m;Zj)tJB2(b2pc]^''-N1ZhkN,q,!FZ5E14`%Q%=.?Id<pr[fZGP-oYi+AP')[:qch?\+(Vp#O+$>#Os3s?T<6s5a9Fo@c+1CR*70Y6F>n]F-0Hn*LaOCY14_QTHCMmAomFW%R/jLDK%]p$ojO**`LO`"?/-5\Cq>^ShS0&6$p)'6H7a+use>l<"lTCUb.%SU+n=1D'Xl9@C+4^fEKneknL0&^PG%S>24OY?:\oU>RQh^e?<%#bC+Gr=M::<qhoF1]ettA]KO9m+HVK^7=;qnN`.hfUWO^4$Pje:Vf2;K%A8AogUe%-@>OS&-=WD-GTsYGZ8LG$kUJ[JWBmXDE!aN%=Gi[An]/?Hb`84L"5EV-%V,5u<<LW`=JYO][jCMINn#-41WL!!=+BU]`*jeX8iGuNK?fe&kSnM+54*NENBZA,HSYTojgR@/")6+?%m.kr+ZN7E4qIT:?ll]`1k<*r;@N1\L>&D"nEJQ8D[[g+VmtM!hVRon+gn,lc'Hs`%>khr))ao\Jp?*8#c8Q]M618H=q/p*4],E>Q%'i-cm(I.ipl%E,Qg?eKr(0BVjPTSfEB*=+.\8OX(M!ErM]f#$\UneMPq>T]q'4I&IBM,(*SbJ-&49b\#@W=WsqFpdMF1MILJsl0<%j"i!!]KVF37Us/U:NBK(LMtbB@sWXUc[[&K>AX#!UfH.qC=)G&E?nA.k]`KcID3Zh,!UI70>6A\U'*\Nlr'VDDdeWda&]H&Em`2>%lR^'>]+Z7$?0-pc=TqBB4Ul5s1SC%VSe-\lSIb4COMr(6J&oQ<QFAk13W$?5,@p^,e$DB?:kQ4#cVEKA:b!tBr@5;KS7CFE\b^/"%K)M2bfDt&WD[#lLcRKdJrJW!saPf;\Ge>'^#!j0"o6J"pHjHL/fOfO9g-8on-N\b6W!O+TDe$1j'G@eT0`-f?<rZik+%P,SRK3jW%V[_\fUuTlN6&^ksi;4mojek?_YJeZAN&*=<m5&F(2a(RjCr$#o*e6BUim6]l'bK"5F1'Vl+1ea!3A@%c3LI=;h09ZnV;ntiZ7^N[%0AJE=Q6"NrGSDO]-f#75G.")/L:[=5h>/H]"UtFOIa<'n+obXnO$B-Lq5(PG8ul#h)IhHa-3$1_aoCm<`;oj4*MuDe##^:Aq]E6e%*@()g4$g+X^qs\VbFY$Nn1X/Fc^klRV+r:L'2Q6&>Nk$lgk+WiogW_g"kh%VD<9-'<k.0mF;e<cOn]';WF3B?i"_ohK+5WRRVZ#+%U,*&LB/)>nS7,pqjePu!LIBuj>/3Z1YqpBAU<oLFB]Ft0BuIUI2RB8S'jW'!g26u$7)=nV8]!Q"Z%ope4MZ4S;_e$Q"mBJn#liH%%!0<\HN:(<1=ZEQgU($lh6:^P=\Bql/?/jdi4#>ON!0`5?gR5"6V;VjROAZp0aa!F0A+]U%(RS4V2PB,d)%4in8,Xgt"h6O%.-9.O%>lY0:Sig3$%.:0+_r*YLI-rdT=mkAScWlg"&M.Bhl^5q`['iH@?GB%^m_g'a5NYSLTX;p)f?#^f*Fcq!8FLUgAV:.F.(=2Z/Jp:Y%b/%pt#^eB3gcS"0Zg#p>.Zt,KTObAN^+UQ?=S^o`hVglcgYL]SH-=^s"/#CXG<h;9bIQdF1m9[Jc*m-J!ju]ubKN>E/MXGJ<1#.^%XWO(N;;^/?E5.-f1RrrU_l)qKE7L?6k1U+oW?ZB&&mu;BL_3+/;>7S7cg;D>=P(R\aIJ%J\V8jE0`G_%SF..oVX/NsE0j-56Fj2p%`/9EhAf-B@]alfF*4gZ<o*P-W:G#-<B<#<TC^H5Pgr%eB5%btNI?f7\XSMlQ?KiYr:Q7m=LMcprV6)jP#Z55<noLMZB*,uVm(Vd+%5#,2&rj:"e.C,;!YYfL4$p2h18KXft[@M;:"jW7iV8^q2OT@6>m"S_u/"X2oBd5cb"Lp?LmgbL9fo_m1hn0ReZE`DH8(sPmN\.3m%D3M@t17U?Z8(cd>('R+h/"?4,m3F7B=2mA!-$*cH0`B8K(Jmk^9ht!0mfI.rS3d%$"RpU&1LKs\E<-247`c>,Elt\7YXr=FAX>NB%0(X06\u,;V3gW5Bd.0khh77169UtkF8[Tq.Qkc&aFmMC>s6d-7ZMtbQ\fItVoCF9j>nJaK#(4m#EH#lfH,D0#,qYkb1LlFJG7:pL%>f[,1c.8C=G:c(3N4?C`7n2;->(;'f1(g\<$c*G310k;p3#-ih_K%1p<pcJX,I)g^Q"FKDU$)KKK#d?9Ag#X$<Z(Y&PdLN3d.Xe]%q,'\8/<m3$6;L@^%a+[mfZ&jmFM=k5s12qe^%T\#l[3QX$.1M,8BhC$Iq=@+6ZOCfG#9s#g=ot5%bAGa3<ZVES^L$:qh/Y'Q@(/6%#5DIUf<L]3RI&rK59:Q!`4,!_?0GnPh2p#\AdEIoC#Y!mD?0abBlY",<P/PYj]n#=&f&7GDB@/@e+hJ]^tW/bHfsHU0'Z^5bqKn6%es#_45/OZGL:8m=O>9K5JouFc$.:(ON2,<Fd^F0G>Y4tE+sZ'sOtA1'ifChej($:#N#Rm6n9u>t$+l&\(PR?mlt3o#a1Si:!?:Vo%[.N_Z#'%",c#iXdl`ae8N-*&M6(p-:E:,TL-&;Sg5[\3lZ">D/A5@Ta&OfBTRo$&M"uBu?fmSnsN@hg5]37m?B(sW.GFV7.E(4A6%UZDd@mp<2;XqA3[Jfhs"ULi?]]OrcF>=OZFCLB7&bYQVE'2rOrL^_Gio-e#+bWIV&;7G"(V6+U"U!tX6^YKpb/$.f!Y\76k`hYm1%Ca<&n/UNRYcf3(4eaO3p^IRrQ>&BaP-BDld%0T_aK>]0bINrSVGsq1lLDZMK=Stub!1fBj$P+\X%,o*mR.lmWU.=/0"C!<ne*76Q%0nBFqX3NWW5`jD@n'!:jNKVgMD>M(JpnnN4d;Z^%g(aXEn=*^ZZtUZcHd*>[B1+DKbOu"5BT37TCT<)slu'aE`P_=(S,li!RC&2Y%9B&m>);*(?9j2.\%;$tY+;-u&LYfmT!)or#eBe.s:u!H%!>#QcQ"e<hH<S<'3tp!]A04'rjQHYWXfDH!"q2@5m21<NOF6P'%\$[S%QZD77#JRZn'ht=`6G&XmLZttRAKu^ljqc*<at?,J_qe<n\D89d],(i=hFb;o4ismj/);@($$Fg!i1rBWMY]JS+USBAU?*Y]UUihN%O0bpRG+?6,`Jr7qDY_h3fWp9s.!oGD3CV9fqJ[cV4`*?A&5"[Tb%]q_M7F][f(^Y=$IDm/-urp:"UR,e#H#X:?3Mk.+rUWfCh<>0%S1Y[8I\'[oH$-Y?\s_37,KQoGb9YVagrhSr29#$T/=GbpQB.+1Z^sV/dP.2gQ/IBgZ9a7to=48>;Pu0g'T,u9&G'Sg4SA#1g9-mU%>l!aPXH2,SrV&`*"Ic$Ad(.b^Fr+F9f%a"s\C7G/1W?-k%@&H+7_^]U[]qK\#ZW<ddrpJ?]T8F3ShFW_Y6rhd(=,5e]<92_*6EPq%n'BQ%qX)I@m)pN^NhC2B8?sCbK]ofqK7plkZkG%.b"U]*9mJi:%k.3D%Nu*@*rC_<3D^K*24r(/mRb8&n`@L-;&k/a+0Kl5S(k1R%T]\;p!'7/onNScW;MdX+QTl_8f%%:!VA`D8HY^qkL"Z;LgMiB91n5%%jL%P5-_`%u1I'&mIaU0BoF&i^9\^D\W6'd,)EcpR9rqLt%dTr&QcmX-K;n\D%q9TX:'KWOAAh\d-2@NXRe*f<)iTP^V-eVT@mZ'7#gR$ggq07LK4Q]K[qE'7jJ+$qH+91XIQ@?cT-3j6]>(>%R%cnr:B"rn"f9M9s`Mael'p>/m93(VT[Y).uil6ZPC^hj>2f4+uSGb%14q*L6JST*68>JcJr'K+SNN=a7#1GEfR3?8F#NqtDR"Mth.%O0tS;NZJb:ekoblOkk%2X)qYu_?-I6r7GhsDG7D)("3hO\[?6!m4KQ4B4m#>&a77l(\r(rk#U6u1g\SQb2WM3p[p;_LsB94T7UW.%/92L4d@o&r4D/(V`);E4.Ru%:R0$?C=<%n`a+#AM\HfMd>4(05Poa!,HV`C<=+%`G(6gC*p49oE0E1Q*q+$'3(FRdrq/ld[qnokp%)";nGK#`kGm6u=Rcq+`"0_1&Vbp/G#J?jh]D7)`RP1pb(""th4^f4)%1ISkqOmNuu_;@YQ$(WbR+nG5L_-=>THg=-hmc.('[(Jjf%VpM1E#J\/ci`d#24*;Fd(!5@Nc1SpI4V8jhIpT><!F6hV6c?^B3/EAjWDgiD/`k,][J":'7Eio,^FjW[=;-U_I5q_@'TB/8EEI1k%Pc+]>.MjX9Q2-%`b0tNmKR!13E[=K>ZUFAo?iC_Tq6J=lbXAurT7"k'O.Co-&<hU8-N@o#ZaBC-43D.6Tj;N.L,KWu>2&C]kFU-s%E@&(9O_n6VpJJXc1^@O;n33AKP%br^Q,bno(Ld`%<d`H06>)rjO'Z$DJUO;t`^&LN"AF3V@bB=P/O65$\tml0])aiGE;?l2kONme%H5#J506e0P$,:IOkQE!<Z<K`-Xt[3k:!?`Mm[PS!-sl3H?HWo#MYmJq/iA6.=)MXnJ^=[L0b8@ICPA*FZrPfaQH(%r\+[gBC8t+T%bUdlWrU43f\kYAdZI;B)K(_"(@lsqLJ+J#Z8VuWB`U`VrhZJY_i8fuVPDh_-\ZR_D'[-m&+D(fQ_(?bn'WI*C6('M/j`k)d!enf4%0ltO/NcN9U8YYNQ8m5*Z3jUQ3/ahS+#l#,)q/I2MPAB4^i2R<%9]V5lfLRKVW5qCoL6es.?E@p1r[QA'P#8h,agG/ncP`](mm23j%MIu1[mKp`%$If'<dpnW'k\.GA%g79+`BUZg*Mn^ZBllg2o*fifQ8TCaMKq^&6S"e=<::2M)%Ru\Z_;IZ)N.*$5_]@m(_%3iF6m?a%`gS/9ju`M3MNj:ICG2FLS3?gidM[[ls-e(W0?_,I8#/E5m/[0*]0S[J&g+dX;gP!#%PfRjM,#o7]+*&mO'hLN$eu;1D$fILNqah0%AC=#kaZ-t`67ZMca5r5EmsPDG'sckF0I.8]H74oRYrX0GN`hAQT,n3g1"TUcr2`P?R;\KY1\!Q%ZqMLh/?8_f/)jQ@lpq?HLREa*%2s66aZ4ZS2AkI4`,)BiD^#,"#2*_9KdRtXXXUr]r!rl&#"boJ\S7u]7aVH>Vk6rY?;8#gm75hM/U<")/_mWT&a?8$N:\*?'R]%%?%Jn`>>\56rdU?=hECn,,t$Im[$lt47B9MBmCCK@r)KC/n,IeKDnIhIRNEQAF;N_A$I%bD78a(ZLt%`d@g6nnEN:,K:JWpl-ar5YCR%T;=dEq!KArpu@iLd#g6"cY%aVNVr[C`f8ci5eMrQd#ItMmj8fnmhOgGkm(KF&nQiFji;g$SCl#H&I9lcp;N@\gHtEs;.tH_DY\34%TE"5D]5Tb`2\c,^N*P`qG5K=@D'cNigkf^+IT4gSN3H5cl.&X+=-=a=$dY*s\LV3;R.ZgDd4=o`KP(%RM3`:*H[&t&/:Hp;Y:MQi%Z[OLms5pU5?=qh"=3:@`@9$CibN-.og<0prd^L$(;^%/9A_TnQ'7%6:h/D/nSfb)Ue9[db(ImEAM.@46>4HMemkOM]7hLf*4-cY<%*:P^LBE>0#:id)g*=Na$!S$Thc4dq7'U4/_Bki1e[$!A[A@Oh?+OcEoGC3S__9o=3^,1d(80K4UAM:Yn[YgE.?[<GTWfQnEgFQhJ%5&,,LN)iSEm.Y;+B`/s2"/.[4d8AS&Y+AcN('1M4F)9OU^&!FK_uM%n[?>t/"7JAJ0kp]Q78:NVf6ub%om*_4S"gU)Z8_W)s5%r.%\]jk$rnD>[o4dH7be&6(^>-<UMIN#$Qt>-4?K6s5H?JLPk2P$SQ'mLi,WkeFYUES;>f*GuFBhm?5!t-C5Q7Z\2.sa50)i@1$*m'N%&*LE')C2k-q<(gcAeFWX!>#-b#l!o(MbP/2L?.B7LH_5)l'4:56KHnu;[Nh>+5F0cC2^oc]Se6B,",St'd9!m8N?EFChm'>!'+iB%DnI(C4^-X)nrsGP!V>pd2^3ctJMQq*\g::iT&:]pqJ7X(FiE/eib"."IMA)%,\0_f#M+@;o#RCWqoZi@RohdE#e"4'fH4DIqa_^"%Or#mmG/hh?FfX.THKTJa]i=`Y.9dkS]PAr]SjgCd<)t[OGW$%.L6p^eOR.Z%nFWG(:,Ka?K5U-06WKlQ)G:1_NL!5TQSXZfN-W0d%X+2/8\1eFt&m)_;BZ-S*S05K3K">Z[3[SJtBVDELs*[kHi[ho#8^?JA5cAD$8h*Ul:/.iR<+oR^hn@Ssh9SpI9e)^Qcgk7j%PC]q%ZBGZ"[#h2!6f'>,e=7D)-!lI?kEjm(HQ\^?iP7F_h)iJ*@hibp,_j3f7,5B2%/n5O\jrtA3>AD;0FKTO2[P688qV&IH.Z1VL&%LC%].ZYW19D,sM#2N2oico;UAgd1QO1/(8kh7P2l!PUb-`Ng\h+?2Q5USkl[0oGqSE58r,i3=eR/l2LjVEHPeP>i&e$A-F.HA@OY[mW%!bGT]"UgDOG/bS:$#oO8cqWspW[Ej-"Z\ht<Ve5m#A$Q3TO=&Tj>lZh=1YO)3."LP_-8rZHE2uN/I$B[2Vf$iU5`a7=3Q=*q$-ua%=(M[O1f6FkT$&W[aMnAobg8:g^t7-M6nu=G?J3<1?LhD!3aG>+M6aBn%lQC[1?oIR^m%92KO:o5!oVO\SYZAXn#M-;c./_Ul$#$n%]jWq_<A3>O><^1@@'\ZCg]Q%j6Y#RpZHO>h4CfTTPq_T0I/JRFl!nmQgDRA?1HWF'&!N*]DN"S8Q@f6D>e>'l[[1Tt\06M_oX8D_%/b#OjfCeDEN=BTd1mk\+0Ya5o0M:HR<YXd%PhfsmI=c0+*(0NJo+M=]BURnG40E<-fb<N6f\g]tJ?LM.^KWqSrYpA/:FW55%I,/q%/]Q>i;MNL5#4;/XZTZP/!bfgkoPlo"&S<QNAnh>0lDC2b6S;H&&tn*%=SGLRY)]O5i7QZ,QOUA>f@3f&k/=4RnX_W<EZ%.-SHZX(%'VV88YsFNo\grYtdBt&(B\KYq7ME$N^O2>92amRnE,>NQ+A5]%7Nj6`c62bB^G?nsE]1LN*G'`r0k5mX_=UCG='?enQ@4#h,U(NL%G(j4+R5cfm^@(\MEP-rTAJmgI5"eOP5QacC,$H>F>e-l)idBQAa@GC*]4Fd@.Xi0T_0_%i;%c?#K8:9Hiqo1rrhdF!.`1;T$<XW9%B'd+PWpR-a18BH7\o;(nkeQoa8qof>rnWu)b0B60ZXS_.XmRYe(47c[Qk?;K+b&r4[aA0SYg0L]pLO5cnfaqdN\^I\COsQL^Y%t0%l`ukQKm1jXg+%LGHCigplOc"XpVQ6'j5%d6Xo<<dr=m[4;BJEM8jYIF!0Q&g9m]AGoWG_4$Cp];G_58#lgqKZ)TZ9t'$qd_ruC=M%[@tj:;Pc')rU8h)&O6939d/Af;6/1mOg'"XdZ"\)/sNoE`u##0&:Ig;G(8areP6>$V-cl0o*]J,E&%/9U'9?7rsk&3%!i4)B(F!)%:ui_,)57<:Escd'eop#I#(+<'<qHFnN7N(gh\'G;Y8?l,0Z`T:B6Ze5F9:B2KiB6$1DfUGW.O-Np,h>'aZao%8D=dD=PaY"UfIOG%Rb.LA5!iU2KF569XXBP<G"E@)*:h1qA8I!6Z3>rq2O1UK*#X:7p+*[)PjsEaV-_cZT1A!1e$&77qr/m/6GPp(3;-ZNk(8r"JDPKm%b9bhEG0[4Q`tYU47SFk,6m('%`TBKBh=N^-N(+OE%,BB^Z?Ct3/;GG2H-3C2=M6usYd;;R"*.1.Z5Zm[_)GlJGj2>:Xqca9Y[UFW%3[<-YSAeP`#aKj)2N1re7^=q'l!E';F'jL_*Y`2j,r:7`-C8G-&AS2'hPG=f\#VX!+I*hC@E<TtF(d&n16o[VLn@I%9CAc*r@^Is%.KI=K?<"ea+8;uS[^aA'aR&-7*`73d6'5@!P2e[3[27MlVR&rPg3R<e\"cJD=2*daE\?3%i&!6U:*XIB4a<0DFiNE2_P)-p/4G`M%$aB6`K?5+!"GQrhjg2nM4;WI!flS3L\HWel*i^<)Q?*$h5l]tOlpC8-"nar%\TC6/mET1kJ-CmEW0hsG<lQYRVLF#,mn1s8$D#Tf%@FBsU?2?+r29`9Y[%\HOd*n9`<96<e]2<sV[P0Idl#p%u&sU*:o2.eM;NFm2BOdFe/Pa[!%U-\R<"oi50@=E?o$2$4IqM;<BT!0u%mjeKfPd!Magiq33_>Xu`0;&$<C2=eXID&n#auhSAHC%um3Q9&7QI6-n8P=1h9B0B%WVe;5>%D4jqt/u5Je6!S4;LMD*2^g^YfiKZ%$rbsK=_Q9ZF=VdM/)CQ!s&S(>>F#W7f#0L?YZ/]YU000pE?*C[iI+e*TB4V/fA:5V1OI"j44gOj5n@%gD*<G"6`n)PR$H\o!o&85%ERdGcKRc#,NcbLf(G<jmjB@,2r=7d2haJpn-t9t4/A<4e[B2^/?Me03:tj;Hk4H$&l,:Wr]4`p<X=E?/Td8@\fF.P(<`'4)Zg-_X%C$en>Ft]XQqe5j!K(!uLgm,rfgO7FZ4VWU?'(KU+Zf[oE_CZB4E#2h)9N8C/X'CQ&@qR+Ss'cN)S5:"eI$-Ia43r<h3)Si'Q#;Ac%XWTp1>-+nkb@NOq4Hf_7QSpCi?7^lBil!rk^fIY)@9BPhG/l,4RpKMi*ECfGG:R!W=l):&I6,)477bhA2(jWZl$@5i*c-*j.^tk.%dJmYY1/gg21/uu!-*bM(V>s8m9=M4)&m>;ZYSSfL0G?7pfaVXo6h)!:JoI9bG?4]sRq\c?jTVQO[;;$p<tXgL2c3K?R2-NY"=1AK%I_D\hl=[(]GFSh@d+QDMZog"n*qa]_=DaqhpRlM@=&:b9B3VTBN'P!]rCh(4.i>`Z(S:W6^G+b[&W3\]"Pn)VJXj5CSE3l]3&tI0%`m(<Q:A6gfC3q8G]?-^iCXM^97c&`71#)[jaoQD?7qlh_7k[t1+>Ao.ch^2U;%I(pldR31>XX;+'b5'qg1$?6`>WS^T7C:ulYZkj%BgmE;X_\UCTtRYa'jkf.@Ns.#H5AZ3Gs.HbfWFm@!fqK/j[Yf<h0CZJo?/t?3=JIOAApRj2&rc.)"<e_Za,Jn(8#a,mk*c>/f=GO%27q)*.?R2eOH3_m58q@`flKXqI/f!4UTTVGgQm7$?K"r6.]Qo8bd.&i[IJ0N)ZZsAo%XO"A!Ma8[tQ)r+\3%0=;WK,l#eqW.:>oC%ZGdg]iBs;K/F%AO5Wr+P+7+:t$]dHLX`R3T!M3LH]Y"(EAsforNBd^T#2@h^^(Z:i=;+RYM,l4f#$JUthR-Eg?NYI`:5AD$8!k<=%O*^2eG3_1VMEf%![+4s`hBHj]<jg%B>iJ3?r5#T#'h.\P/Et2'$QM='*o/Jhg-:OSRN'<C_ru*o*dKo&Y4W?<5%d`toPA!BPXJi.%In*53F1Zr#35p>='F,q:.:Qk'b>DeKrQI4#3bt[cV$*rL_N,/dJ4?g'dqIJ6l8/CHDh'j/l[a6+DQ_ng*+qbOs/ii4O"]>>W(]-+%:K44#o@%SY"f78A>#BItX9Si<HD$i&Yo<`7]rZNs^>H[&N[?'2&pU:]rm+)U#j$km@s^X?ac5AB?X=K:OFg9V7q1P<W4_mn+e=9(%&2Z%>^ki3/`8kc+L(Ba#TQ7)CPtZLUdCX!a&p76eZmgkjUI<F*k&T^Jg!LA,HGeH@clQ[EJWDc?ltRge.KLFhOo3DfJtPZ3n=*72%7*/L*"VL;$ZUhnN[KVGf9uL90@mU)H@mmu"#8/V6h-$^6q?bNFrcFV;@M)mTe>m4JL>mf$G:>eio(Lg3h5g!12KA+?B!$##ZZFku%8OP7EC4>oUhL%t2(Ahh3"j<;!(o@4SB_kg+'0uE:@%I`6K0#GpenZd:6lVu.Mg2-IHTPSC*8\pLWEk39O^tFJq5d[XG\A*FPb)N-%8nV_iICh:;=<1hI;f$Z.Qro=2CT[p_+_n_!eIJ0&i&4L\BJFW<cK*1YiiC^m0)`7-%:R2R_n!6ea:3VLkSZG$bVqe/o/nKiIO0M>%>A<<V8^d1"Oia#&\dU=mJapN3,5R,@@nB5@'N+\RiuX=nMN6/+'KZI*-0S@3<H#4_/Q3X25800aOMP4k*T&[sgq^F!YRY=D,q9:m%qM_q.=OmT.o9R!#7F9bcPh`3fjpO*Z91ai@4)*%>gm7UPqh-4k-npRkg0qOVnC%t)kaoH8[iFZ[\pJN9A)*R1kuHjdP=<Aa/6TI)%!GD70d0CJ\Gl=mf5^Qr,"[::b&bO<m]oj`[:WB,!8\X\p7)]r,(Go9gm^:'\Us$uV&8G1lL;L<P6$WK.EF_lr-tZY-)jSFWKCDIZ%YIBCAlnJG@#ABS;8[ZP,BShCBk10S?`r?.M\Q2P?18E`*Ys)nQ4lo>]Y=Hp9"A#I=l3\j^<W:O_6>8s+^-Hh"])ofQi$d/r0p6b$%3!'LD8oWqXGCW&m]1Nko(fX'W0]QYsqJ'6f5D3#RO*4%Z:b1+ara%IZ.oo\HW7R]\A-j==9S't.b3"a7_DtYZ*3CQeF"hK@m^6NE%/2r^G"sH%aTjDs]$.YWpOYSb=-1Fi!^(sR56U;GfZ<$RZ4@c=jnE^>&+<!%:&ggKT/(s`29Sd$J*]KqbnQSS@/bKcEYB^2D!K$Q1%;G,t,brdDm;sna%KY@:`3=f!ZDab3_&8,TNXJoh"!hFoZoSMe?a1LVpOaXmH&gU._>h*$S7mTf;S4C:6)9M!;<$lZc@$u\a=]m>-%01OIg=Hs*mKdGEil)1S1/_ud^:!,'T02DcVM!"V@*6B!B(\9pR`dX-^bZXLFhjp&NB,0:3S5a-1%?716m0T,eN7g\Si1%\EihhiF%i>AG2[#$h+%"ei,^[!YFWNh2to3;<h4]_Kb(.(158bASF/Uj%>bZ'6=)]p.n#4&eNQAZNEiuX'RGRt5o8?E[1j4;A\\l%9/.50u=%gd`i^^W9m6XZ6_YF]9@<Q<oe2h21d9W[4TBg-uCa@*e?2]-9PVGI58^?SWDqPUBY^$Zc:f8;Z.Qcskh.XYa.9Yh!IA[WcI]F/ucf%EfoJ]Nn[U&+LG*<N'.>41:4lW_R:NmF(Ze80;!!nTJi1>Zi;`H[]4OQ&\aWiToUrR':%M+m]\&+LaI-`-W?sK9,3eV,A1\-SGCf]%"g5s1Y[n?gT3b+MBUHc74`[dL%H]Blc1BWRpk;811t<u]Cg4br0^>CKf6W!GO4%1Hb$L,*<(Dnq.hTq@1,uQ>c9`Bmp`ts3?)_NP%jcrkSdD2+C3"Fgs[?B!bY7cD;>qR+n\2Za*#+>/lfR?VYS9rqT19&@,3X;6HW<C_L9tnkR*YTP!6$$n/TrUdEA(Re'=PKa8$&\GB%)C;>/1$\/+',\BF2b$=54q$TjSF#e*/FIR&E2p\mIfp^#EL/0Uh1VbX:@4t1:g[*CPgqe&KNk0o[4_LcTnBsr@#rp'!c;RDr"b*T%nQXJ[>?/k0)Thha)BJ%dIf&4Abbm$iI7a6YCeY:0l.[stX]sA.)`\70l;"d^/YNf]",3gZ-n[ZQ(;`6i72$S5^bDinMP2d)ZJ@l?%@c)%i,md2>au'T5X\M"+JgsK5V.4(-gun)+`>jRF*38Xf@@5GPnQVCf'Ceu:s*@C6F?HIQ_hd>gPg>_!_b(>PF-ZD7;;t<.oW"Wj%6UATN0Fj#6Psct35m<t%I)f(?V7Sa"Pr=fJ#:Bsp>SH,,bYG'%BW7Oqh8\7!J.!qLQL[&s\-E7ZTX78uN$J5cpCR9V-.02r,GUrk%/Z!Q1=LlC;)<\UX$c)jIj3[KQ0s3K/kIor@b08j(C.!B8gSTTs>BY,$(sW<637=JoBZuIBk^D@\X4;Nm/PI'R^DMj8B_GPZ@S_VY%MEIa/.IRm*><`_O$p/qk/d's`A%@\>'`]6S!(+]EBubqgr83EC.R9N]4Q^I`a&KMsD:XZK%E]FgipoTZnn^mC;2(X0^aU1Or#-%f%cRI!oO>7Q$d0j:urE5fp]=D&W240[Z?W:.-h&qa7,&S'.).^`I>B[!U)8ID5j1;(DW?X.E##+A^.PAFV1Gq`Rc>eaeJpC>lp-Y).%V\DB"AkO#n2s>'k9okDcr\dbp9h6Ql1j0'K4b^6t/N,+61_J4?q`aXH4bqNPS9kifLajm80hUJ\gOJ1jWQT6b#3$8YqFN>UignbG%`;.jiT'T$+#N4.=J(B\2+!ANCn*d_=^Z:7;@\uN>s$'[!5%RkG+"PaD"Pdh@<,'sfmgYPZrpSHW.#!3tPa.61:5D&%>lW>@03+7:%rip;Wk!kk?A9qk,&0oKW]pQ1%b;EdjWkqYD'ECIS^CB\!p?9Vd0,g.Jmq[aco2cg%T>/-U&*rqmn,>,;m^jprh1>jrLbOT&"uKmS%G!aqGk-_IUPD-*:43lmNJng+F7a^J(I9@Ym,3XlugJ[JCcWP\l%^p'n?b3@^a4lW4s)s(Ap0"l*2I^pWBKSE5LjVJ%`EV8NrM3XB%Z:U%+;8JLS^AO-A&K)&has+?8^TS0\ZH?c\''i]'%)cIT1YW-/Q_O\jD>A*cS-6=jri7+-:D1t,$'rsiAI2Qhc#BN;hYXM%75!OI%Ce9-ko&kC?;64,5M@7YW<@&@ghjJBK1M'@G%pt1`.V5F.SmI06du<#$la]6=_9\M5C=Q4dUKeD2c?DBF2Hp1i_eek!(s$3:hc8T&%i=%1FYhY<"PFg9&W'XY5J_]6L;bmEEFe__*1[nn%f(J&t@;g3An@I\^iKA]=mmn2OE)QG[;rB`'(5G:O8aT<bblVX5Y:s%3PJ;T;%N*r]'`WX#)PT9S(7FQ.AD[Rbah"L>=<"-B3k.n?;],.IXA-[+9L+Go<A4l4S)*@s4XjXFkl>>d]R(]'H$^HF\"VXM;1UC)7*d0.H%&?T3UQq<W'8h(a`FUaf]k?"?i'$iod]\TDJjKD)nEPHj7=<$&A@tpl]V@,>p@=-0G=aS99@1^97\NmVcL/pV_aH8URrYSPZ#2/%Q%\/jqo[:Ko/4'BCt+6@F8mX6DV5teLOTG2YcqF,jm(hM=qV(FHU,EcE[G:J=j!gqn.G_!X_mRCo8b./o*G<Fkts"0K^X82IJ8o/VU%k*ICXr)AhTHW3H5oh2VZjH0FO8sWsV.^;@fO)+1<P-OJ@[c%hl@]#3b^$H"@kV,<!"#ml227"Pt,QLG@&c?t%$9Q)4]r6&4gj$F_%Pi*<[HMUo9[49QS7qJ`_K5S_I;-=3'7r!-$]W4ZghW'(5'(cY";u:S!OQ<F;@;_EFm_2[I_lZPmd:/9eO-%^^7=/eG(o;N3[+Ast%UqDt&85"%#&6Q.#Z^hj%g/j9Jm3k,:lKL@s[S]T/rDhlr[rgd=gXSR1DTHT/V3=6.YE-0-HnOPNJ8W`30pW_\WQ_<0geECG%%XY4%IdPi>cUf(*1s&^0^0Y=#1c=EVUV<<cKEfK#V9,NOA&F5Srg(WC>H2<6V6S`^P-'t6hi*j$ltF4LUa9C[qDjiN#h)d6/1FH'P\NKa%+lR;>*5bX2Fu=-9<Pg;:Q73=^=WkgN)\9J]^V.Q0kdEh5nq_bf>t(oX$%bLuF:YS9(46X=iKF)P=)ci0/m+NS+r`&.g'-.fYg"!J%"VE+k##i.I#j%h=Y4C\;\/I#gN-;>,Z>cf1Y'T(njufjEiKX+%,GtH'^_BPEN]-Mtrh.?ZZ'9'OnCC=,\`H<S<&\M(\&V?23PGCr%#s=rp>9#LaDDL$\M7toSi[V!<#UXUAFDK)IN_lW=:g-#^,d\ig7SDrGZm??'am8e'j<)[1QYe'r93lH/X;'<dB9cXTFND$1Ps?Ih%c3t!AEqX&kZC6B)S5j<V't:AUYd,_QhGGMhkGgY](Cq@8YSZ"rN@ITa.a,^"V^6FM<I$ap)QG(&&1s"6CfduSo;A)Yfbe<r10d;)%>aS]ba#en%]8?HiD@`L1+O1NZ-J4]$m`%m`98M:"A5k/cQa)C4fL*t=XA?=6[#aWG):0!l&Igk.]hOgh'prUFCWc,=JOp,460A7U%A2OP,dSLiZ=.gE'P_$#F@UEf)gr<1kLh84=o*SRqdqog!'$3B/1:4t"33)nb9@Y^V8W/\i)7j3^c;LleWMXi;XacXO5\@AWq`2g.%_??H1V<VE%9D1YWEW05M!_`SPY\S4]c1[^7[Y@Ta$36Yf3eKO.D:)<@mD6LYTlr6)]b$N*?RG4l9J>MF:!Q]OS>$:SYSjI;,EO!l%GuM!@#^aO$"YETM,cNiVjrEn_KZUJ.V9ajm+!!]Z#:G]agt,\j`,mYU.kSj[O>&g\$W:&+h3(I]\\5>(SP<es*r"*1+l:nt)@9Qj%]0UAhP$-`H+[b':UfDdM$4f!e)2?ML7CoS6@iio4VR2^&i4QiMCp.k]84684%:!W5<RXG2:K'!J-q.SeH([jR;3D<4a;hn7CBJP:%je=.n.[N7s'6ep?4"EgP4)]5nk;q5'@d0?o3-JM("U0\?ZJlPLdZ??n7oU`-]9<;\*lTqS830A_2t%PN_\oO,K.qu3'Cb+g_+0H)%QW9,`kE:.DVa/23JYH*U^o/j^i46poi(@baKTJ,#A-rsMSQeZ>S/#)!-"*hY>'[]id&s*;1#j11s"9-?%F6B7VVocjc>[rdW"<m@%IaM'QmfdXidRQp/29WW$ODDg>?1#:Q'ltl@Fm8kVO!j>@nECO67EMYJ8WdbXB,_/dG#g^=+C[<3$<98BrH%=f7ftd)n$>E^5'24#%HG$ol9M7qSZ)QdgPRS/`NN<StrtfSLpt5?AQQg1?4?gBNAoLfbj%_H]\d@hTH9p0e'`6KgH4-hb7):+_IJ"%noein^iTGH'o650$%Ihs[D#/u.\>Jtk#VH[BSCA[sD]9YKG[5GmY1g4#a=BYi@[2)"i*/:Ous"U"a>&JbfLrf\;2^KEFi6Oqt5AR5<i>*NAS]gro9LjB/%*NPh78^QgUe2'se$NX:%o7g[9M[3n<Yu(ig(HRkW7b]H!!Dot>N3sj@Bf>IB_17OiVWDufGnflR&[H/E2QVug^$DsI.:W;"+e#_X%'n%j,8m=@mX5`?rC:SG\$A;cpGX1%e*:#*EduGa2XM?_-<$b+Z$?i0pHRG0hMs;%?U.K;aA&ILL2q:faq_C*%DbW"?((cl[-(CoB%1IP[Mi9&]J!ja:WHF(2`HX)W,eMnfATN*NZeW(rp9M7B\7qi-0%hVn*N'<'I>UI6`8$rVrj0$i]AZIL,&?B;/1>e`k@aab%$)ETJ%7Pdt%5uOYQ!'b93@!7i<9*=L\C;al_``gL;]UF9sA9hH\mF%l:.bUnGnmR+JPT8G4W"tY"R40-EDn=$.42[E;J*"3&gj%&`Gk(.<%;oPuc?-7cAO-T:@le=FV^besjTK[8t-e0*G'B<niC[m[Z5$MM5Ia"r(Ed[oRL;Y:`5pu9g5#+%G,faagmpI+7d#/4cV0=FR[G1),%Y@uS(fZ%'IVgg>:f#1C&EDE)OW))3/`A6>G&4DNDCs2=`3JAl_Ri(."q=_OpY9rFGVW;K<T<u9=6,+ai2*AJbO=K?P=5.d%Cfb<b%Y'L8Rm=hQ#X'.@+r@HD86lF@jk??,<Lr^j%3Sl^mAB:S-BA1'OSn_7g@$P3((W06F-2$W2[E.40?i*."qRp5r<lHlQl4G+WcYrQ]%+%Q6AfLDP.PRHa@!M7D%mmrb+SUS#cB7a4X@"NJ476.8T=8$tN.J26H-TtUr7.l\Q-'<%n$0-i3'2tD,.Du&W2oWkcLG9&0=JY[=%SZLqqVuo4,#98Ze,)6+E3/sDVkf,_X"FjH@[bngsMG:`a$-O8Kp]oEH+@#R<_@l%b9p=?u6;cIl?k`Xmk=E"@NP\3S%B>eOZ$UC6%85+F&pE/-Z+t?"7+9-f!V1R[0(0nW7nli(gkN)/%I]kZ^"L'piQ$g'lK1Ia[jP+(VnDksl8^N!LQ.RFC:BC[U=#>`6>CBYWF1oM]%BH%R(OA*4p^f1J?>24J7;GY'f[@5Lo-?(1ZlQ1m<.q1Ng9Hk&G@Ea3n(=GNP0uepEj1Ci!-"WMg6Zm<;==f*9g\NH9"F9,\*`iia%^NRS/_%[("",+jf$HmH#bk[6EMR\CJ\SDPZ%r0FS[`tfGf5A\7JI`tPo,NmX^?idGhNY3\TA=BtO2NFdQ:Gj<DTc*fEpqRqk^cF`%rGPhVs2MpoRppGJ;)".4G]+a]gM;(7';DER%$DPaX#JPJ*D%7UkU"+5fP>LXU'E<u3o(!T9i5b-jKVi4<\DlC7W&;&3>fSW_VT/3%1/#SdJ&bfnZ*&7%e!s2I,(Ai.0mQc=+jO72I$Z:eY3h+Os4u%.$6X.d`;9hpWCG<6$F_I[Me1];<UJ#?XDX'NR\&GHPdd%j!5k:h%c<*UH9#0EMD695.87U@?KHTqLg5%G]X.'4"<G(X1H0,D2[As7%qDMj*Y8g1K_&U?4<>FK+Q`)f==T&K1dn6]L,aqY<U.-ELm`J#,%!XS6p)V+Vnkr3BLT%O8LX2JgR/SAE'r*,#`\M;:`BpA[ojk2PQU<("\SgAQl7mE(G(UZ`351c(um9Ys(28P7C\"pob_e+61rubs%%@arLB@k:cl.;7@7/R*K)7!lu\o"g4o\%alGU0DY=<7?$Q]D_^rdtj%PqeGCfM>VLAr=!Uu=(ifKP\#/9HlR4?_mc,rf@_[*+afer%6`[05*0I'DVK0Xlrn-tuJtIlQ3H+ECmrjNn1eXlq)tGL?97MFqX;oE/h3NRQGG%JKqN92H_#BjpliQh>>Hi>3F`],EI-??_X`BIf%&UU##K>7&I40BX=]Mui:DaR%p`ZG&\rVp6>FS3-p!CB7Dpf(<+CP7ZH=?$,\*B1W4JYD7sR_SE__Cf7%ka6R>6mF>0ZRVPqd'Fq9%JXQ'[X$-m&7*]^A)X?P-*#5[r*1gH@P:N6P]XXN\!I*&=T$co]mOf28Q([8Le9%?d!Ffo6(Yl/CP&XI0oNRSd/P5nW,d`f=&#7OL%/VuSmACnjiC.]'[@4:=#O!6GJ<!ptDj(SE;UAqR79(Y>B]J2jY`a%?%+ZCF.k@&_5GCaR^`7c>*?jj].c$IsBiX^I0"_a`XJ^A@.%nFe1)[hP=M\2J6opNI(oIfl_C"uHA,r0)Sq5!H0uC@5Q987Ppt/L%Iifn2&>8iaE#6iQJr0A0KWR7\_/g5h>#f7um+0F6".=>LY;%=?P133='r7H?8(eSsdt"b,6`TPm+Kqn_-fMT-s#.D+A7l%6tU:;:&7VhOJG$95.tp,IkOCP&LY7d[jC8/"(hi/b:LnB/#M@_4bO8%4:=VQkUT^Vp[e/BFqhMr[qmBOH=+H7o_9M0k5!Q<&lpKVFa&WE"d"1N>P<\4,h&<[.6e^s3XA^HI-/SlOo-ZoL!hWZ_Ct;]2[NYD%%^4"La#6ID?Ca'm'<W,o8\bAK;a`:t@opsV*hD#Ig3e\!"U*3-,?3AZ0>DI-c4AA$W)H5O]fth=#(%'N[O=!rrRfI,b-GK)6!O2e%hc20*QH0P8nnW0sjXR`Q#B,8IITS7)iTQ"=`/^?VQb"?Hs+EZ2>erW?)uhW3KUTNr5hI0Po?"og+m@f&:?kk(\jMQ!A.Yi<9mRH6%gGRMq$iU8q(+TiX.=)Lp9EEQ0TfVnCG+KTL>TmZL^mm.c4OaWWEXnBq&4V4>\FKHa?:TSK_hc4:(-87po>i.><l;7qE3^X\%^CtE%dlU*-"U6l#^-CfDFb]g\=..A@o3j2"b)5F;qecOf:U<;GU2p1:U)o5]=!$%an6lHT\mil>2`,TbPS1Pkl,sBcr#-=l['r-e>/QjH%$`7ck0tq[,%i>?`#Q:f`!:"4q8d1oVoFC&:1)RLdo<b+=LL(TAXCY%8BU'D5g+*XR`"ptd(ut(-JZVT>S1J#>%<h<bd[rcLma"Ef%9+J=,8:k<?IdO0g#BS!BaB_%3e2(iS[`i>cs"&K+I5a:1Y3'W?2<5_KZc-^"<US"]FE0uX/b"TucB5+Oa(3a:lS#A9(QUN@V*[cp%4qGGMe`m1Yg7Eqa#>/g''mnFtcL=LALY89Hmk<'D.?PTnF-TN9[HYd[VPLS--Gn4?S?=g\gLK,i*6FhXi5fL2Q[1`P+/VZ`I?=g[%)W1@Z!Z-.d#bIZuhF9aAcWgV2AZ4f[:R9b#'!oJr?5li=EKd@BD63Qd(fuR#^U^=u=`6PlhFR!n.f]4/DBt7pc46\ia-hD2Kkp5N%S(IB03st9m@C9i]r:\[-m.3n1?!iOOjaY&'&0BKXQPSA*=0,I$Pir(&CdA8!U6M>Ij3nV9&]4^rjfo;Fh.=Hh7-LmiVX5N%Aq@^%%-Ta#fYpD?4!Oh%1$JdqsIPVstHMh#:POE,nlr7l%MPe_*rcP]m_@[#i*X9B&-@Ds!S;F1(&f"U_>UC`[]e@#AbNr3"BGYMi3lC^k%f^cC;*s\/Ekr8I\:jfZ5rC1M$]m`B>f^1kPCcSM1q%)<67CGEdr%9h%_Li+gIf'C7,lgXgbo*\BH0GlGdCF_l<hdC=Dpa/l*r!1D%c1&b:'UO,X0kWk_K]-9b&q:*1K!#YQ;FmYk5G,lohW+tS_t_)3M'L=LpfT6(IXTel3k'db<*L827BIN!ei075Um!uc]9[R0[71#l%[kGJSXuaT<[+)E.*BtI*GEnpJ4`_U;O.WsiH&qPf;=&1siF2sT7KB;sMkUr&@a-QbXZQ&5_YB1[&X1Eg^G(.T"KCU/8Hk8%m]gr%%[L8nAo/NC6*l78247%cgCD2GK,YmU2+5AuO:68h=WRG=@A\]V.]BrWNT%XAeS)8X(,nl+:2I.Zr753uDEj#.t%8a_#=a"T7OK]s.%qVH7%;!l;a/WSce;a2sSKPTLaJqtL<Wqu8Oa)CHG=HrmQTdc]j_(#CR#n8Ag^EM6Kq`1XX"4;3+&D7-t!IN&_B+cDm-G&S3?g)*7%ab@f`\jJEg^uu@\7-.F8nI)g#Z-^1&6^l^4o'g-R4;9[=Ac4iO_g]r;=S81dqe&_$C]MSI1USN4rV#?^*#'Z5qPE\jITU8'<7*-"%f#\Nr7nu&:c!r$ug8-`.br6Z?:8p5#TM2?^:@MY*?WnEh(TRM.X*m>Q-]lp8b/Y9\/G<R(FqMMH"qO?\4>=i>'2-^K:Bi<`dPJrF%k$&.Ch9G>GbG8lP\,L0oF^H\[q\jJ.Wd&]E->Y6[^3&/>n71,pc6YRMSAb[maNNYO1f\Y:c;_atncBEb^'Fu'fS!LR@ZS@,m>\6f%$5'-3hgs$[Y",n/fD1073^WqmK0QQJPp.oh&e8h`MGf6/Ms,H@<+csEp,m,GRs:/?q5rc):pqn.3TE*Mh%YN5KlCB.IrpT4oOHS@%[R=$L$F(j/3l/L0/(r^-T-Z??5NT-2V8#VCh0a2Sa/,8O+e$jZUaA_hQ`bqE`5]N=HeM(i$R!*2`DqU%eE"BVho+k%C]W(VBXng'%(:hX6[43au_^#5u]H/B8j9'hVb6af-$1N>6N;+./bVNn'/'04W#q)2mNc-$<U`h]Q^3ur"6Qljb.UTh2hQ77fnA%(:6s:Pe*!F__%@Q`3ANn([T3.PsC5@B,GL@,q+I^S7D;/=nREl`hj_N@G]P!<H9nJ+RLXlqK4b*a-Hi%)Y&G)LdTliJVk_pc.<eo.KD+<n=YZ'%0u%oQ+dSb\X>'7nX!3I]8G0jn*;J9@0Hp>`S2XSstlLNO$,h%4`BVC_)T[]pfKK<DBIKl)*+fQBD[&24ofAb3JP+*%3]T"19I;N&qVZ%NN<c&`fna#<XIC,>#i=$UK6ArVdqN.iFr,9jTRce.+V*jVDu.7bgh(%3Y"[#[&0jg,N;LYb_E:=Q.uHL$0,+<M)bMe`5<nG:b:",%^eqD*7:MY1k3JTZ:%6ZX17ETnP.,2N5MZlTb02tW.e9'ngi=o=ClG0.4lb'q/nDdCRDifbAk^5QM_I;'A<KE.4RE\_*i"sN3s53d%I$OYN>DdUhi(p"%r$nFe#c_D/OQ$\8BQl+Ws0lN-n$SSgJhPR\<t4hj.FF"27"B6j-A_lsC]Ep+>NrK/0!lOG\Cm0ghV!#E]LH@_%,SNrDBH64R7n]>s)TU:A=6f%\3+PqKV@aFBUr1#pW^6lKB3OE(^P)7SD?i6?+#cVL+FH>],=%F]\sd8XM$+ku[TDk#94(R;#;uOi%/UluWO8kgbo74rBcNBUsY^.`d!*6A\HU^WDOV<Q+^)SRU(I6E@%MUUBNil1S'(smEpN^T7.Utiq"0C$T3n6atdVT:t^jji+,/2Df%IG?RJKb)0$DSq\!6Md,0n#$JoO8V'3X"<F%[c"VJ^ElW@CWELo\,DL5]<:E3@THF7JT6)PdO?c$9XUk2%S@^S"PB8'#o?bM+gR$X%d;g.4OT7ngpH"mim8k$I(G=eu0Z3Yfo!VT!'q^=a&hgtUX+Nm26M^u^N]Nd]Acod8^/`A,g&\'7PZf2.9c-8iW)QKI3=o1;kh'cY%KG9[P6Rlmo#r5!>$F-89%#oQW]Wmd7Pu8c$IU46'Oi>juQgU4TerD6uihG<JK4q'8C[<^Wl0C)q89!bJLa$bmk1<W4W)Y%c)74@?%L4!Ui<i)iI2AO->Vkg'pCFCJ`BPP#:`L1/U,jXt`1fnq;&^lkXM,`unAC?C0o(UBM7/dnGfWb?agf$A]/H@GOE,:IPOH+7oNM3$n%^0o%'Q!N!CAWWUskM`(:@Kbl7E$'!2TGZka(=uc1EPgM/Kd1*\!t&FrO>5bP@Kl]M]1E`82X4kjT[\e48gAj8qKOTI2k0]mi>fmE%'02dcKWF8R4'oWDR3jfiN+/e!8bDW"m:N%?<Bm!9,ZrC$<8#)u1UeU?LeQ;hN`C=jC'nX70dfp&R/o5QBM%Q!%jl'VJnDMoFZs;*%7L8c;S/rVq_.AHlU6^E_6C$=:n+I$3SVQKa6JG,\RHYL8rcZ&8"gnNBBOAcT\@/>$1tX4("=>;hT:4hh:QT0fV&9D?FMV9]2e&2%%p&u`IGnW^+],AZ9`_lZ,!ZWf/f[SHcJ9Y<fUud">h>1`ud(_N?e>Jon<DZee%oA3i<UY8SXJNj)>8#Zrkc&==(m%V[(4lt7Y9/&4%HPP$r?UVO8\ARNG:(eaU=G\AIReL@_#nP'2Aj>UL(KL4$\p*KfGS4*B40S#N>_VB<JHraH%'qW-g/P\5i>#7rnb$(eCh26;S,CIt%2_akshWV4OLX.F%JWs!!6hdj/!n4ZEceZPTPKC^+]W4^<)q2K3936,Qe]K'VR89!c$,bkJd!W#Y.XqMZfGqn\6rjjW(uCL"!a?B:%n9$r:=$OU&TuJ"u,V"Hc/c^A_LrI+P3!;gV>BrIBLrmjdEpeU/M<L<h3Bl\q\<ReAL;b;/4-W@S]ASAR-#CU<DG'PXoH)s=1jLeA%5O!=Bl31&e:5Wr!8pdSWT$3mhh1X4[h+e.PhnK#K",Rd5B]nUTO.qhf7)kMMd_qVjHPj>=:="QUAV*3#NL)G@U;;[u]f\9%R46<!%"rhI*d*nH3Y0j;c'dlFdMeH2]J!^L?MZV%s`L]2(D/8\L>JrmBZ()mf64IU*,ZRlR44:=^E+E!e)cqeJ$^d9S#5[Y(<-fH/5Eu$K%cAYE?OYAAF"tCDeF6:EJSD$upejl>'7H81J5;f['12*P4MJjM5(/(?Hc6<;2PO:6%@M+abZ0qBnnWB7CED]Q>R9bFom0VitOT8"l%!T/!jFZ))<7s2tPj_/;5c(V"'\YLR9fDD,TU.\2;YOjo>"LC9#k_H/,aW<LT44IMgEZ+>$LBGl,JU_R7e"4g,Sr7a+-BdtUXf8Fc%D#"EB&c\od(#a4Js3O0k5G$oAf;M4a3QhbOQu_H>A=o1L3i_.Fce-Ok&+C+d6u0h9K,WZbO!qQ[7EL?6NN+hPn3)eb9[tfKSR4a/%P:\(u3mCIs<R-ujds>53!%B8LDHjc5!Xe<e^Ku4F;W2f5GY_2O[%,AVM`][3*uU8*UmK[hbd5/HE_n^Xc:H$Q\_()hpM5F*cpB_.%@8/t.O#hlL&dD9^MSH]U50R#7X0$\Qbjcp!i(aE#cH)E_<T&pU6h(Z,J>`c2.LXf`lSX"NX?)\GXA9@#g=1ad=)l;.Z8Pc=P:7Wj%mINT9DmsL64/!1lS^<R*S*O/<>,R6O]^D_o*;t2:MqbbY6fbcm#@K%^;T0:el\*S(ZLu0-^]oS>m'iSiQ\G+='jq?riYkg0U$[+c%,-P4Z=uG_a!A1B^_R!TD`H\Q,6\J0!PM52;(S"`/0cd'9XA_1uP7hbKB>ma=PQjOHQq0ruZEYo<jc\etQE?JEQ*@oK\#U:"5s]sr%p#A)d-KPNK-rWOoBP6-3kL6sD]ORrD`8LL2Y2P";'LK'gE?+Xtd>0I^l>D""7Q[Y?nALNIc5(k"G=R3^Z/8^[P$i!$8<9*7S8tW$%\S#$iW:/)6Mq,df<<YERJ5lVqj/O+gR@N&*[^l,[^1th'eJ=!5G#Oukf*FU#[c6PYM"c0Ra4;.q/;rW8^0X&&cI]JL]SEdX$j_4j%)@Rgj.FthVXV+Fu)_iu$E7aJS4C]KKY3$j.9IMP1FVeN4\[m`0)ts0Qa<%&@?\sZC0k"m`(-.D$.*o+LV'(#Yd/5V8EH^S:6#]W$%,BTRb1QU4fEXXLr8Z=#a?@J-NVr*n`K%Cs'p*RL8a&rles)!ISS3&<TEifXs`IsX[PWI5c6,P->jigS$HLJ5+0$]`>R<*p`4DC7V%r/T3c1F9mD'4mqA8i8ApVd@]?IL"#K'=;H@-=2X;D4Li3!k>VmR?goB(2X'eXWH/S[6\$317ctbVStOKqn@ED3i&[rQ2,g:e7uD9%M*Vc:KHX^A)q/9/7Ra]<AgL25.^b]!Z7.k'Z.OB7f5D_B$/,l+<4\ks8FF6Aab0<W;TnS:[,s?\>abe>'s'1(d.:Q2OL(?PCt!H^%bW>"HNA9`N?/;Tk0ofF7,0ec4$'mPP3<S'@!GC-Gk)?*)+(sDH`$?d'JI-.3pt/P?AY[#$UgH.$Wl-i5:-aMX5SV\AVunVoV5aTn%l;#O>-P=4MkK6/pgQnqR)2Sq%BfH^M^1(@cZJ"iMQrh4#Qu'.>o?ku1r%h\M$fj118</j!T%<h^6C/e2B8HrS3G*DcWI-lZ*0^L)%;4R*Sc0m8?STk<lnj*T(F1^g]A)VBc3V0VK1%f/s9+3OK<*GfU'+E*.k4RNUkr6Jo4"=o9_i]j)XD!7;,Pk/^G%B<EL[uoMq^uG,%cLR@GMk<\dg(*O^LhZai[p._)Y$L#iefdq![<;Y%9p9bQZkD<0Cf(n"S`YraMQqK**Cp/p1%:Ls%XGTPR]4$-ZT;r1=3chB8X=%Y%BI]9pQ!uH1Q@iC=6HgAa_Da'SgN*H%krI5lAWthEdDKC`cOh)t6V2:#Bc<M,@"mD-W(X,B$[%<Y17)16/$tXLa+U`?3e083f>uHV%ep]bg@rUR#K%:g_=pZe[^UpA_'2Q0j[-3?lnHdlUPO:Qd2p!FCf1(g\Lt5>CYh5htNbAUY*\Eb+D3UdYqj*2@b]0cPrmLQhafY(D%'$KYXoZ(t$_1@kFM_=uf2\o3#VZ,7f"VHZ.>-'=2:0Oq]7b%Q\&AVr*U=YZCd.DZ+e/85_X@$B#9?\+&Ol*NFq=Y3sf[-F(ba^@a%P(\!RYnLK4l8NAmknDU8UFe=&?5"p\,oL-s7\0X.,"ukFF#?qeen9XnVlG8;N:rVr<b1i.fHB/UZIu0(9"ebAe@3hDTu^!4+gs'a%:Tf8:+jP@=`1;C'W(3q&ll%iW1?G8*GKu4Op(7k#AO6\&a`XQBUtsFYbS;!I[&CV#m-/#E]jcGEVf\,u76u&do9a76S@4#UVUTaQ%I'l(!^;<m,Dmc9h:egNuBTl>=LiN9'5:O=,'0F(GIYhWYkPDan;l'VPi/%"+/_QB)HHrRXNE0P<L?M?)1lOm2mUjk`NOHg)-(@eE%);s968Skq^(F'kY>L_#-;0t?njK&KtIMot84cmD>65umD2O9ltUY\,&9g=uK(-BpYoKe/0qSG3V>WoBOemhh%XMGs#\kQpR1MiIV%VY?rbh'6:VI(nX13EES4VFGBm;$CpG6#Yk`Y(2\lX\r'HB5?&Dnk6*O`2Zm:R'H,5PPj_4KpLG[>H@3*/MYbP\\JoYOp9mfmk2q8%43&5sgSd=giWU<c<\9b`Zm9&+95gZ@$Y;h4Y97*Jf/o$=*?kD4HPR>EYrBCnTB@RWa$^S]$HNZmC+joF'lq0W3;Rj(c?idYViD<m%ViT3q>pM,XEp6K(C!bTaf#ZK(ii4IiPcCE4gcGoi5:/HfInAF9j_0NT8R[\WUokroam8L[`_[5A5-O&eSjiak)^.>agB3IbB=/#L%BGT_EZ8G]P>]f4"CRM1c_gA0h,lKRr)EI=t?8X(4'%Fi^=)>uU<?Hd@&Q<1(g_1E4G]TbV(gl-\o8"1J3p<1TnJX&b"MnG4\8^Gt%iZ.M]=H9U2Zim[=e.<u)US[G8:sGa];p7C.B65Ddm.U;t2G-)$i)O&fYs-[80dLSg%-USi.1;#+3U8s=h*ua;eI(M?Qd?RH5$j<6%?%Q8r'D@'!0H047peC0a[_sK(`\fOel,sDgm[<dRdk*M$?I`NO0NukGRMC[fQsgbb)XLDicSN>I_>"ls,jiVSD:slo'r,5R@+cIf%S$cD_!RJ*4.p>E\mqB$Y1i5iifL#*Of0MVNFD*r2LG?'>n!;5?NQrou*=$k2)ER5chbZR$ER;YG'O8Jl+ZcHS]Cg/Vih3P(pa?k]%@AHlX@=L,B@S&m[lX$EtVlo?1hc(9acDf4EkDkK\CKj_R<(f+`<6+8XJ&Q"ijYV7J3e$dU;C3\ae:Sd<a@a46A[9qQdG6<__U4c$%WqMqo"uMp#8%<e<4\78T]GB=8b`i=2jtmnbV:SDg=3hWKD]ChC23U35mL_?nJuE?=(>c*6_?AG.7YV\lqEs=lMd57eVVBNk)F`\^%V/590/2JlLf=\5o+oT\a>T(N2i;k.+,&a:Wl#g-r("F\#FN&.,r'I9E0#<kE-M&cPJLZQ/H.Se&j%(TB@"opj;#?;IS1CZ2LrG\`%Ju<<EWh>WJXs:)K2C9(S/AgH'*[&ICm:gVpGK&kJn^bX"hfELjE^/`UQ.L8)<8Zj]0(5(dJB2oin@$)43&)c7L8h;_;Rqm?(;SLi%+%MTVV-cl,2VOZ8e0](rT,r>`maptNUY]jgNL19h*XWSn2GFR,*R:g1nBd?H4\kcTSoR.E`sU!2,H5UZq\EO>_L<hCPh1s./`BCP%pu!V39nVSWm,MXlnhH1%#G7WSE>o_(bN%_LH).!2r99]7nk)`_`IduRD5DR7l?#"c>UD$`mC":uf)h>a1[&\VZ&D,eHa<G$dScth%iEPj##r^1SD#"FL9"rNX`l1<pb,?o&dM824b8up5<<2lDr@5g5jhXrEHA*@p_U_CkhBsD_#WDiBHNFIC8b/@h34#G%90jK"gG#hK%Y91Iu8*fNMX<3EGqXs@JND:J=K:XQK::ocVod(D;@lgHYVBt+qRNsK=*QhWZ[N#=;)r<Z_3f_A9&ZerXc;Vp&UEunt^Z;g&W<s6P%rm0ZMO-2G7X#iSQro'l:"Ug9W"HC%5G,3)r5IkE4`tA/e=WEG_`f`g,CtZ3J#M*C`0\bBWY<FGN'kM6^kThafeS=$p,UG4rp<ZPp%')MB@g/UrZLU+"<pZ+-NFK_47Bc^I'^0e;JQ1H^S5t-]o9NlI-S96mAi[4QIr@`:('FQsa">j\+-4Wj$a3q_=43o`4=dA>;fc1\B%ippq87q%C@`.[8&mNUMW!tM!ab;'ntH,"Bl\"F)V:P=^_[g<8e0/K5!Q^k\03oJI=];pgJ-9Q9Ya1o*TCuMN?2HJ>k=p7mLc^H_h%9lts_kVGu;O2T$u>+FgmH^R$6Mgqd$KX:Z\Y_Pg\+6VQH1s*3aak7\=9FSDW5CAlTYt:^58lrE(Ig%a]['_o>b_It6c][d<%M+cQ%e<B&)qjgV/Bi0W^8sEeQB/?DlS0G+H`1WH4:Q'M^+!'XQ4>#^pYoPRY!a]7lR.puk58.eXQGgLTN6(8j*aj31Z?o`S1aJ=9O%e*j%8;S3_WWCTi/J@Dt8r_/,)(1ZOT'*EEDU%CG1*"=If'='Id"Z)GbV8.ok2;5Npm)8MT'D&Q[L0PCp!`k,;aWoKmuLJpFSt0SA'2L$%h0pA0r5t7q!WF;b\)(kZ>)`IrT#NbVEFUoPJ%?q4KjrDpA@iU-\(drYRYSgPn:GU%Vb#V8/Wo[q2;&aKWm"7s_VK3dP'T@8%FuD#%-Rm'gQ<i^k5G=pNh[&!7j,j0Qi#Q'_42AH/bi$`<i$Ud<JifLbR*318mq%i9h>sfj)88rn>U8:KSo<d`rGsg6"pG7(D8-hTDF]-N%%5O1WlS%$Md(<N8ODPWfrhL@8&60hZPcuM<H$==c^.gn=T=uN&.Sd'HnW_qFpkfln3q`\iZ%[H%NtsOU$nf]r0kDtqeIj?KA],O$%3Dhn0%/`l3od#cA[.f=D^RVs`*92er=g*1j/i/t\.I=9:J//4b:;PeP@r81K0YpanWCUhAhN)6uqYB"=oGaW6q>MmrVg+hAd7@G9%6G2'/1d2];F7p896?lG$!M>Dp"Vh,6S?ViPWl2FcNEW:#?/41HR@NA=<[(]<;?9aKo#1&Po2jB#N#q>M/U5<Gl6muS4iaVgZ!aXt%h)JHVMDluKpuD6BV(#TR.fj[61M(=bet(0%PJ+)VT*1+,dbr%D9/nL12p_5aVr(Y-B&8"p<g=e'$tSBY+o?N!h7%%^>k)b8#39rp%I:nh)Z$sp;l1Hj^1!*13OM0VB=i%RO:]bJM#5sr!-Or*2KtWc(JG"Gd%c.J@%I-fJd/Vbmfna#t6MO"P&5+j]-HZnA:-*EEIc\#B%PHaFtFhY"r\W[Q[8-bXA^[FQql"2@S\PR](3qh0CPA%=(_Q:Uc^O>o(%Jdtk]>OGlhhmT4@?kCiraFG]b3n+fJn%Tj?"3L)Tu#_Y%M7BW6rFFseKIb.ZT#"Z8GQ>@04AWrQ8$E7q8%/#jbU*Sbel&L8LR&8V">Z+JG-*HER;tj\hp5d8hID'U"]Bk^hh$hDWk;EI0B!p\%+K7CBM_P6X2#**+Q),@s0[qmd%9e^7U9'ML`-N?ml!'l3hfOgO+1s6oo2<[)BrHEa8K,8HK^5pla9'B*A5\i>L>r7VMEqQ9M."^%%#IK*"^=JPq;sd/bUo73X<aQ:ig/DJO]kL^8Vj7bjIO:WX\e0m&d*1B@.iF=a`Su*7'D(D**l%\s55gF'6UL>')88s'rD;3kMo,<0%cn(4a>hNUfE"aHjdfn`5F<Jqo[HQkq^<`AOQ\B/U,GKN0`X<8caZ^_(W_-X.D3T$!i\PN@,M-S;FJ]md1rC*fW82ce;s*2/(*W]n%^IuQ\_>[IroY5hM2(tIAj,mQf2o"f"56Cl\+"WYdWI$;J^P[a.8<\*a@0n,eq]0/dq@:X[>/#PL_"!O-NP?YG$_9S+`6:^0\KUoK%m_K;_i;5/0SlAT@7u@Blj^J3tYKRhJ3VuqEcPkj1.bYa1.\NX^AdIWVPs&OR=;CsZ$.73]OhTS@;*D3@*\![MQ"h)6"Ko'hRi[Q.%AK@EW;TZa,4DG%4"]*4t9+a8p$+*)o_eW4"a1sC[Nk?kUVkcEB$rTNlc5<%`*&,I/ln7OT'J<.k]H^XLK0+C0qmt7%\aCgF5MiP>%bu0)@=Bgh/L8/U*p[sK2Z(t&8kHnt@J-GWYi*ZhidqU..RP[>u`#;iG):\<+<b^]7o#sLggK][?fe=,Wi(AkFn/[.qha_M-@27h&%dq(3^rQLLJO\K/nO(5B_^t)+fkXtWJ$3j.>7''L/N2S!ISd'Uo]?/Z[*@RW6QYkm'r?Qg;1JLV9`I[kkMhEPT@G-&.\<?jaF*t`Z%3XWTnqB`X1-P=##iAhlP(o>bZE&S4E\Y'5:^dpLbX6sJ!=BA6>,^$?(V.f2mFY`&<J!Nh,b$D'j][p/^X1(n$WInpg'"(<*gMn,N%"9MO_)[/Vnl%bA<EM[cOiO@^YqN_4(T!;00aK5?MI591Ln,N.*q:\9H?iQa*3fG,",=JSfU3O&%H8V#j7\X,"EMhN[;I1j:*%aRX%U=&U@mXhc%WW`4.8/3?\,_#>ED1N=<&X9YQn=A"'!8P,S6@2[`:a-T>Q'A&9,m=qW'W]b\Raca&4X.:=fR;P:C"\2).(s^loo`6d%N62k%;(eK!0-Q(QUjiFh#WieH;g;7p#Tc+nr=E-eK8t\@.BD#rfJXL8q6V8!*g%.L7;OJA+_l[uU@m8A?B(d$%l=:ck?7"lK]W8n%r2:![Ch%GQ@qi>!<i!@m-b)Z_@'c2MBo"%)=&6'7[GjSi\#5[a!Dm*I5Ph>B)g_luRef=E/8I1-Whtls![6__jO7k3V&nEOA6gA'%'HE)%h<si9eaQV3Zl^_X0$6OY!g$W>6&`O2hB*#i,^*]WQnr=l'i9QU]u]!4qKc!O3q(44MB2B_mL`j/&Qi8G46s&TK="e]g+Pf7%hY"1>K6jS4o@F0<rKB\C1Nla'gmg]LHWLUaiUgET>E^m7!Ef/`WMne*97KY:T'fo0Qg_XQko4IL$@=oT.`)$(R7$U@DM@J=F6oOl%r-6hXb;kBD]b)M4D>-Udj:0+pC=aZ<Z4RW<W,J]2;T[p.^UpD2McIWNZ2aOZ\)dH>(>A]@*L6SF-UtbY8%L43d0sIEhF#nV\qcqj%$[86dCB(E39nJ>2&O#D-,i=arB8e6,AqL#jras[)^u?=i;3]I$Z<c(F?Yq9BMb=Jpn;LN`TdHIo1GqHIeSlT^Kq5=nD(1"'[3h%'%gFmu+KYq(XULQKJ,+ck<hk`7`7S3C>e6Y1Ne$m%Q8j#YR\cE@'g[E`ugsMT]/Tjili$Ofa=dk;PbjgoOm_AbiB>CXQ*_qR1$<jl%%b6TE\naWCPP[\_CctQ4:!-$e<@$R*?,h8h8bSrY@M6)Le;(SWd,gT0?PrkJ-F@F*=kT.8!aLmtGN/'AQDt+Al/=eHL1_/N%"G:8%%FtB0prKsh0XSP)W;r]!,<a9VFIJ0=IGNIT_%$,K&gK39pZUM\Kl]VGBrk%t!gSW7pqjKjU10;L)f*`6#l(?CPOQ[,8jOkqZa<:\X%a!<nn=</!k`g;O^*<9[B;EYR7-XdK$Yk=Ep`PgR7IrI$4>H\V&Sk`ehn;#6;jO/qMKaY#ICIqOj;Ou-GK$`.[:+`p_eNrh4O"04-%d^(H<YujM#[KV=I>.lNaF3U_G3QXZPZ^-C/0X.(q4@DT]&D"AqjPSK&ftnJEDL<;UT2g/s/^;FZgFA_>+%`>Ge6^c^lc`rpW-:Y@%chf,6rA-ZB-$DNHAITCgHs#Nf"S+$*7ni-riLO>eD3^\[<Q<a6I,@`rU$Zl.Q_Gj*ihF]/H:M_r&IA?2hbD2Kc/(#NDdRrb`6]37%e5s]/r5p3G.F.Rn7>S<-TesS!h9%=Ypn7F5V]MaIA9a`[PXNuL7IjKAW1tK5dH0bo97cKBXU?kY?.#Ynj8Y.&M>m=9W%)+rG*jf2%[LEI7.rb+$nsft"Mlb,UPfPnc35pA_Kknnqd2mMeE5ba,6!l>Oe^X[E+&PPe-1?gUGXQ^gO;2oh$GO?.6CKH&KMlb$@akLm;Yuj@%17[$E8K[tH1k1As0X8C)8h69eV4q#of\jN1dW1Nc(:6LmHi0<F)i;S\LQ7Kq&N;gU<&<'#Rr$$=AO5i[F38uVb@_,(>J`3^K]P2f%:ED?X9?<f.M*H@S(6_Q<pRIjt19gLT,a\RU<nittDX8SV"-/g)rjF*C^U_kn<+X:(e6Z6'SGk`0p\LD"EE-c3=,IrSl_;0Nik]]K%nsCjWJW=a9`PT3k,q3J;r6"<s,Lqhr-hK*=WaA@_c;+Ho>MX3^6an@j.3K%O1F+bt7:q,_#YirqO*%71cLqTl$B1gad::ZQb;'0Y%8EDT%)s&ha"@""&/.__R]s?hNO0^rHc(6h/="CB#1pBhi.u:4&3s1f(.S,31@emT4_C-rq>NprLhLZq>%eCNg3*P&7]1,A$+,WBp%F0#:?iXq=XBXpJ]XS>JLE`'lN_(&Up#/2[uP^V'R;FPD4d6rIaO]*Jd`-$2*NhDq]D[4/&/.KKr>7hi%Gu?qr38u*hlrW+,W(J/D%+j4p-BtIs;n&0#WL";lY'h-5h@+pj\ZD<$hZ7\,U6<RMi'9mN,Cbtup6AZE3]#-$SUlj.aP>u1t^_3&i(uq>JW=B,]],QNBTt\TT%cVn!S-4h68,MY[ZHET(^*uE;u:DVJV$E`0hJdJQZ(JN+u8!`L9k)M4$9<!\SbI+Dm'^1@<;ca>'jPE,cMq%n8c.Hd3l?nGjNnrD8%pjlJ*qto-fV;GD`DpW>M2>"/Co3`?9Ip<^kI<m>Vp"8?WVfsBB7FoYP6I4K%pl\p1R+RWT8XdEKMKOI;qeO0$5)gj"(MrpZGAn1E%,V4`\!,3'-a+e<M_i3Z+k;U]g3((%7.[EoLC`kluFYWt)5\piB>a77`TWlr#ktg"6U1UIq-(1<<\cKIn<Cr=Z3'=#7&s=fY3%YKg%nsdOA0061BrkFjIg2>J(EcjWSG[s'B^Fk4abGPu9\U*&-jH^2hP1&>\i$a':a7\b$Q.PebgB/&.[e_EB0abSRN@m>Y47)qGm;S'1%Qb>`@B#*D5'a=NQGPEW>34Xb\(OIE1hI*[,Ls#jH+PH5IMd^NKJhjU*SuK"i`GT,-;%;f#he*NC*dK^0D*=&1=i:Pls-k,E$L`E%%[M>.HSKTVp,C]S_^SWmu($`!d(M"D1U:j8go'Nc4m't>8SBYnR;dXfC.XR]GYn/AXL@P8h`Xa+@9!SpB'*0`@\.nTK<l&l:c]C78%"q.(;%khC]/6_<r-^RF`_'B'bFutZp"YQ[Kg@rR$29D7Y%ZJ9r!MG/W"Vt7BcW%W]@-19n2nY3AC=Juh&f&`8WFJ9%ND>$T]@e=B%Ni+8AJeBFsKQf/5^]V#,lt8)seoGJ(2^M_L.n!%-[?YO?Ni38iO1696Z,'*ebL^^p>lsHhW0K'Pa[4,7\e@0F3?"n@blEF.XS9aM%,"5=*IoNb`R,)5PBfHg;W<>5PeBjb'.?Q'GW+=<oP_Eul--UUS@'ieGIt"IK6c(13r`aft?/,JDr<S3ME$V2'",GR4da*,MMrK#C%<>ap1,Af0&L+^.$&;_e"AoQub-mnKm(i*f3DTRp,d:2hS$J*,(*5<tE&du^";U9^n&91kg@ZTY,du!"DffK6sG6o=ml4VDZ`Ufl\%Ni>(XmWfZ8ANL?m^%MZ.Q1@#6H(H,81GHYJ/f3RWjju(&n^ge3rKEN<;bSJKTiQ0d,2Vjed/+kEc:RBB]H<9G7\CBfKSY*fKPug?%8=754q9YJ(8PcJ*5p^bArQcNqc:u5#eA:IWXrhRd];6BQ('0?XPC?&IR3ldI>SInC5t*.d%J0Mi/ZnO,nt(E*rq>H_*6R\YM/QTb%,6)k(V0=j6X%CF(@j]^Z_t[&p`^Ri,'\e0q?5o$iEp9W]@*"LI96Y:g&S*5WBn!E3mJD/Uh9Zpqs42XdV1_N,LpcS`C5)h(IJfAB%"/qVf/5ZCRIacb4TFgO)K_'*@&+Z^\GF0(*9&f""OZud#pus,NoI0K.UiBQM;dOi(_GbLi1gDbtL^7%%ITq"X%KDG$W<+jkYYH!G%b.I=_$3l$MK^Go>9#tt06m-r4l3t"R"G05VNQ`VBfFD$2Q9%"a\_m/*f.gu65OuC0nR:nbXFL>.>.-`S(6Yrj2tY2fFO+fq^IfhJ%Q5RF,-t6M=^iE[mK]@AV^87Z+CtInFS4fW"egL3QC']WYCUQLBYDf[:4GqNbFMeluY9]07*h_<H$P-)ka-&rePcg.+le!_S5=61u%1%=g60XItf3BjRUWP?2L9)QS!paIqAgqYLUkhaWFAeO9HY-t[LC.m,:PQ]+1i-eqCfVH\["`?QuHon6$#c*KZKp;&J*_@A6_FK!I%YM:sso7h,TL:sterNgsk\[mrc"N'm:#MK[jmOZf4SlED-8@fPPr3n>nUV8JESd<c#NrS:lPY4<QV1O#$OV<Y(_Lm4&ic6bnIfP=1%-".o,$9?IK$`R&-*r3gh%LurWl4<tAeMr0?-YF'>Yosm`M@#M]<0-AXqN4IV@kG2MV.l#K#:M$i&ri@d'()!4'b"=`hgsao,J.*f%ki;p]r!N8:;uPs9q72d1Q'G;Bp&j5A\h5Rq);RVi]2JBY>`N!SC2saZm2!<BR*6`K':"s<W/NQRV0hQ+QEZ;K/]Uo'*Q\i_6q`8'%&3OmOJffPl5PF'$[i9(/CuPAWBPOZf@oS#X;)qi0lC@bXBHpm,'BXQg=uQ-!^'3.\2idW0Q\&u7YPOiHXQg1"BfddY[VpH8,DDi@%!9"3Zjm$K1BK?ejda\saPDkUDba'P^k</[mGrar4XBf/Y@K8%b)u<G2CFRR0<+f>,qp'.92/,$4\.HQgbm6%m8Z$eL*EQjmE@(rC%,L2TjK]+?00luG:YVHa-YkhYD0*)VR-%Yqfr>LqOcDr!B6T&&IV)#jOBTG<F2GWhVjO*#hZ4[_enlMq):fLj@V#h9h,8>b=B/;Ci%H.l6O\anrGRU0)34fC!+DCrAXmCk?iL2].F3$rs"]uY"&WU@/a\mfY$Y56"&5dFR`UEZp>pjoq=l8OhHV>/(H`aZpPQ0&kGV&%:6%aQBNl%HS].m7GjiG2!jJP8pDuoW=?V.W9aj`VqSEnUJ-R=XiAW@f2!uf7GSEl@\PGDIMHD9&?5VUpXZ'D@qr:>lb]4?t>`!kjINk%/ON<lG^h7P"VBoWC23o'VkUs1ZfeKm\pO"E@cVCL#b?XW1Y:>YqF;ai=UjXi+j?4lKSA1OR!?Ya<(PQnZE?V<n%!pOcF,%jDo"HF%h%aG[.1(;Z"TF"o.4loNp.K8T(2Z.qrKcHA[^"(%egfh\/<)q-A+&Djadph=]sZs'$8U@V0+hQfM@oG!OVAC4S8OW]OL5A*KU.'.%&a\/d<RA%\/*&qFj3t2g.4<9:_W7g+cA:b>&fL<t.1[FX8l]3r:/dLUT?=QUM0KA)WHmXS-/dX]Ha?-F,LArU,=bpbRC9-0/![C&%,7+1ZA+`=5rDlWB\Y\N%]shC:mRQqs[;CRd]Me'HI7E:KpgB\@M`=(q1D@TpfMuFarIC!+dO9i`=u>d!h2JleeMk?qDH_5kSVt3n%Z4fZA<uR*jY@gbGoF"=I]gHFg\kkepPfE"A,>4rFSQ4"cN+Sl:6/^9*&>:<PmdEugAQEBoas#XmegY6RO#E8@R(/UF$56\;'tf-)%%LiXXS(>?'$,tjSFfN+kTjir@`-o$>c+dm=2lb1;>_VP37"%Z35@b-3+jkt9BuRqlA1WMQSfg%KM&F1`!sm86Q%G%R.e%SF\es7`%O:g$+:_6WHoMT>O@);]_3lfd^Wun=g.iOgM%5MtY!c8O>E&UT=Db4PQVjUMhfH\>7fF_])p(>^&S3T=<A0q=#Z237M\WimD14A='%ECT8'3)a(cOD;7efsCBZW[I'<)I9m/.To`0pX,]s21_-Do,DL#g;mfBLS#6t]o^]CNa[O+ba43%.d(O7ERr/&3mZ*rBi+Jtitrd3%lGb6RQnV/4D3#VF:+f&sRHV-&d[/IZ,KUU3S`b9tM1'Tr9oWAgonD7Bi?7Pb'fij.<m6?Mf<g%9MCbIJ(-uMM-15`Cj`gD[msgY,%0?j$fR#6QM=fCge(i\VK(8oH-*g4am$u:6F3<99\-ja10FaVG+[.aj>dZ'-r>LdP@#jNtrB#L"#P^#n:+APi9$JM@b!tJEl$n.*E%mIh0u7+h)pF2"!#gnMjH$Z8U>!<7&!!!3g8pg>WM;p%6s)NU>fS?"l'M8&k$;ZmK-=<lDV.[<1f?`k6oMtas;$891X$Gm5/4;6<^%!N_ft/?g1f2<^t4NE>iPQ*=>%W=8Tj=pZ.5m]r;31,5^cY,DOBK2;&=IqoQ(+m?o9^m&?SI.(-DOf2+hX_`[bdU_79+,'31Y4.62%ZYB@NlZ[?AZD0_j[AI-i^XU!d#'$eE<sjh!!_#<Fb68*KiT'Pda'<pR]5%`JBY/!.Ch]m60<OY+_gkIja8E-kXT4H9Kq9"r5!;in%=:gsN5VgX13(.sYSHHg"nMBaP=gnQ<;=_<Bolc#o'#@%4)2"FHSlK6m9-.e?`D&pT[OQa9.rhYNJtsk`@Z,=sYhR:k39@RnUn1LW%5DN1LF!>F)J]Oab3iD(Ql^7!Rkln>_F8"<SKlk)?p.TDj-YK(:'^KSd\_)Oo[?S8;;R/aqI_MN0VY(CEkb1g#qjGRfB#aYAek5Xf%lm\'cF!_d`OIfEDD'R^/ZP;i3=LU(PU6;0c;7sFZP/7i:.I>[1m>^%C!pu,3UEZBUHP?PT:gX!.$!pQpj>8'+'q/m'C(:,,8[KJe%@BmnmYG5;*CPuUmN,]Lg';N5?&baa`>nc:ON]S%AUUC[@Auh6eZ!'[O)&=uK.\aJicDpR\4SYocqALsWE_BP1L--sZWn3g;.`//l%9@[52F+(UG+5(F.QY<18HFkYUno;/:)=c#e+ZPGDbu8*3Ld:%U:u<^_*]_lR^6J.`%N&0BhOY$>;!i.moR/f`:"_f/NuX[&R,Q>L%!Hr^[S>or,/HC6-mY!>E3dHRIrm9!!=jons.fHg*Q[!:G@dIShGQPdu(tNd:DWcq]\LY"Z,[jaglCV+c5p=L7a"5:X=Ye-T[.gHT%D4:='X%aGj?Kn*3:'fJK-r\k#+DijNcRNs,67>[JZTsGrN'?6,cd6cuH8>&4Xt7+Pk)X=5O[1++Z5m*)-MP%mC.;j!!=FL,^SBlL%ib3K5WuQu0dLdb;''e0qR]/4@\Q#E%^5]0iMqGLOXJ0^d:,Z9J!7PEMG&9JNmi4.(&ZaY7(+H2_S0ee.f%&]'o&Rg^aT!d*DM19s%h$Ci8H+6h0!kEGR`lWO<$CVn^V/"kY#Qq8Z*D)!2%""2Vf(T_K'o/D:)I)@^2fhPk4h"-S@K=!Oj4f/6dCj5lXM[t;A_N10f1'I&%b+ABLbB:H>\k1-=":JB^[ZV\FlcJTl<O];.@o\>VDBuaOU0T&k#tK.Vij44;!]g$t_28#^$s?To<2Ai]>c/KL`]_"oZf3#`1BRp#%NKjPP<k%f<-C&[J\?cn5/JZLRghW3s?XlV>kY'd__G:!9?GF_7D_</J%!rb'#7BE>'-S>p>-)*Y[_W"HN3:L6RXY9j5_DA7e\q>7%9tAjILV;WDW"9usQ$K\KV2=n/@9k`[GU_hfO;/$tX'NWJTtL5q'ZgdkMi,"d]=pGWGU.r)p](P';2Gk+1Im+sII4265pX?Z[k?2#%8N26A"uksYOg1&l@OkB08GpA\?He*k3\c`s;ZHIPGEfG0++ca0B@9#23$Z6OWYQ/K>9PiQQ(%,mW(H]aql8-dklK0NpJj5M[Qo^,%=`p50)jfj095n=<(MF@V(bq8bUm-fgRrH1/(nRbo_,mokZh5:M$F'])5M@m\'$/s'h,q"J?@4dOU"HO9D'!lpEo4$Fj9a-&,V:ld%Y[:E!X30'bHt[TO?<?DT$[)N^:<RN1:c/*4&9@K?rERDq,,&Y6<;%f9P8Zqsfo?>qn=,Bt(+a)baE^H7;L4aakh0LT,nW<W1Q@XH%=ePg=Fj2hF[q[[:\PA.gd!/#_J<YrS2]=?F@Oj4F+^In>XX?<^/A&hJ5\X\cDgGIkP\*X&`e(d&`g'`XpnM2Nf6YgOW6ppphHo=>%BW82`<XAL,jH5c.^USdHd3[PQoWT^!G;u/Y,d7HYFg5N/<,@_JJ,lC"WhG`?fLch`A/'kG1BkJ*m/+f0h`\iI$nkQ[]62DjiTmu-%]$/?b@jp4),L[96DPs#aFsN$-q`eCUCIMM9g^3i:?!KSbRp!R$,hY^sY1j5lD,7"pcR[qOTF1`^g2fVfMiJe\e2rmcmG2L'69-QM%XhOJqRd#7ZFB5I'a-!#&=:<4%oC<@kk3;%J"I\2GX>p.N70*]+R8(<hDU6IC^(7!s7#YBkR1_nA#q%1PDre.D1OU7p2C["Y>oMMu%qW3KKqr9C3HCo[7]"hLScZS;_IXa.ZQ)aWHSZ*n&1pm-S0hpX$[VWPCS&UO:2CA);T*o0=]#R,D&G@?=ah(`(HZ5/lCUGEr`=PH3%<i)N#c@ZiN^RQlDIrft9TieLnYR!9KWNmQeJr;M&=J3af1LWO`Q'CKt9k*]YX0)-%d`OKX(rUf4Lug*b..H6/io*9]NZ<r4nmLi!%_*XI;aqR>n3J$X2oZWcleHh3ZFBJE;j[g:#4HK2=*6kA\b[0ZgRWE:f8$:263>-O3e%g;<i$jALA?-"Np%D5L0a?9#:+<Fj(Wi0F%#h8`un0'\_9C[2U?U5aSmM?aQ/E(Gl_iJM9O6mhZZH1\%j`i?DW9XmaBpe(TVPb`8;7l31b9i7g=*O&G9qW/9Z5c0uXm3rd\@'^i%%,YCjAmT7Q_D3g*[\]3#\`94TTc\JfoLt2kklU*mk>7iKTW1(8$1`G#.CmR0CXi<c=8SmU1%M[?72_%.cc&W=A)TO*S$1RF!hXf>%)Z=QMDB&?"EP_.Xl(-qa=%##ufpqg^W.+07l+Kc;*TOoJ1X3u\]IiiK3l$O$s"h=O1lFn*R2ds]kP"ad'I)_[j9/g90e)V'*aV%Z%&f).DQB7Ts_bcLL]9#Nt&Y\@*M5K[L-Ppf@2DP.&7EM5G"]A(Z"4k5J__/Oh1RT&Y>"6Vl(mfXQi;7LrK+[Mk3NHl.s7NEgfS!+.%%Hb\qnXoaRSdtf"bIKc!It/lp/V+?N%'>o&`1HTSE@16Hp-bKq-aiH4FLZoFZ)m5[9qAf3^M1$uN6Sj)g\p_j[HiC=-%3Z!Vfs'8%CYWL)\4ZpH54%Lr-?E7%JhE^6>.b4M^TGLQ8]-Y^%9G&<-2:Y=Sn?<j,JDL<X.3Xp=8o!=)8ra_H2NhBEU,(T7XpnjMO(@sD^FDT%j0$B(PJUla`r\K5%i;h)CH5g?Ci0&BFVKUa2HE80e7^+Xkt6&_j=qX,jJ19Ni,)PRHlbdLR+q4))m:Q-Q(Xp"Cb8U(O!Xk(m83ip%:%43]oM4G#faF:(aXKhu8g-c`Y<.o8_#9QTAp.B\D+Y7_1AqC]6mLt:Xn_LPkLq+`1@7;\Fh7#RPOXUj'tn<b9cs*XX_ZH;,d'uP%LKC:Of]5D+Bl/mgT!bD4\ap5(XE9#8:=OK'M3muVcO;.=$QcES>=#7nc6@P=<q23ldYb=@^LT8$],tq&C`dC<C*aRiV;5[^35KNS%b]`TA,u7_H#h"0!nOJ#5p$+;iA3<PeVgMZ$0eA>d@OQ]\4FAF4H:YO3QAHN,h0>!8j!p-<%80%XIZ"2qMeDFNqtf]H#f)M4U5BSa%,W+JB$`!0J"ps(Gp5)5]:$#*\<K<gh=0PpUe2UkK7H6^$DRrMP--JfE[Alk5<1LqP<Au3S=2DtKJJ9u^C$C\`8spT]m[n'MDJQ]>%Pa4ZK&pG#"]:\jHkc'%H>)0e9*fSNokoG^=^Z9HK>e6trdK+=B-7Kufq"Z'nF57-p8,fIJ--m3\Y+pXQh27pk<a)J)*]X>jGWDgc%1mbIRe#10>"k$4q#8n4l<a(R,O'RUFQtR/;iR$Ygi%_g9TTba>!;XqmlZ8-,:02t0N=HjV!Z8EPlmHGBL[_Ym08XZ=^A)pC$K1#U%8T,2Y(H&3=hLeQN>jKkAEG[<lC_F(8ieZ%"m:i!]-dsWS-CG1FJc1U_c[pid<\7!_/Z&#'VOSIPnUEp`c;r+FfU#j<lR7<rm^iaR%@-e>f?)o7@Z<5EmV[S/P[a`n']^R>ZlUE!p;D;>6NtsA66^kZ"YGJj^;]OJI7rE`cs,tO*Dpap^bmK_i<L00Y*=_Wnp`IpRHT'PV%0E3rIgYb#uS0ONLTJ8mYUK5()$A;,r)Xc%Cil?DF8#Pr#$e:j;dB5_!Y@IWo`cU%PTK,FA@Q/KdMd*5j.]2u2]`dc*CgaeG-!heM%%fY`f)I#sQ3r]pO7qnLM%8K<rH&.iW*OEjP+Ei,6cO8#;pO+;)/elUBJ>`o1iQk9F:W]*]-Pb"$DruMB4R"0cndSjD6b/f6^p@:"%7r%(5\m@];lKEX9MqA4^6V*=Mn:pL/gQuoAd/QS!NDp$f\861.f2^AFN_f/d\2+QX1qX](V_<\Rfl(MD"J6+>MkZHX!HtZIo;/kb%f?\^4lh#A2mt-Dl>Pg0^.UDP9+*F$>Mu:76H@&BoRk5@e[_io>46\2@<&F[]c\8Y=^E>h=;H)Y&h.l'fn<fZ+W!>')MbY9/9rSW"%\n\!VdlO%jnf/oa\6mq!B7!3Sbt:=>!@l.')a4CVOGTF5eSV'7p1=(!bFo.+Ho(_ES"bB,1*+YJ.%@/t;2%,%M$L[EE?#^iIbAU'%"%?fbi)VU9oC:8V$:Ac$<@,e(m!r^u5cQQL\b=)GTWY*nLZ^.n!q)-M?oE'fiP5E`Z8D\pYg:(t[il0l4d4JMOQRD9/2MPFn%ZMO%*!:P:lHRgONT;W4;S&4!pQr6Q2jI6tD*?im=.*GaD,-[OII+!["q26@3.-u"ZMmq/]R3i@ENj(2kKESk1TffA'XUY/p0H?J[S@6A%qJA_EqT3CB5+%aQ_I`$KL5&D5Mi67Ik>FS/k2YIrmLoF>FRR)q9D]aFU#0?!hYmjtL))pq8RiIM6pla58ej/3>V"(J`XK:4UWb5T%&Eed>TsrhJLm$&2O6$,"Nq:>Ia.65VMk=%]OWTm$NLMIOoHfXeX;eqH-`8F&)H<s@n8(<6[:5I,ES@nFh>u'dl#?DE-Tt?)Oc18*%Z,Y+:l(j:%kTM+T#DDfm?k/;^N3.1BJ2't65X`J,b.jjrmgI_nirSXXP4+M"H[Rek+f]'0#T_Yl]lDbs*sg0m7f(fRgT>IXFLTaS%9.]0t:O;"KcF@S/Oh@51s7Dr`]+5RfYYZ=W^NS]ATq5iBYj[^/Aq*Gb8g:dG@(N7n`SMdB_KT"E[bWr+6IN)g+d/dd62&Z\-RZYT%=V53+)V'R9'X7Zu_fGB$&N)#>2%"L')!W)K@sq$n%cG^"`FFGZ$c.Wh)TTX]KM#BffB.]m[bk%YZJM!C'>uZ+4d].b6)GTJN9n$*%1if>7IdOP2+r#nVf<X:/4<>"R0K3*[[rl=Hklt'0+C;:.Hc!rB22OcSL)deb(aTKr3NX_"&X;.,k%eGdVZ.!]]eH$=1YY"E/K#Lj%M]?k'O,U-\DPn:%is[)Oa<bE+n%h8VkAaZJ>bQfZrj'@:e78&&N[]n3^V)F_P-5:^^sk,"Fl$9`9BbKBa]q;#r7cSQ%$dQT&[q*[%AMj70+/\eYE2`/%U"A_%V'He@n5Y9u^C_r3pKCFIJD:UN+?F.QLZ]OPU2R>lY,RH)T?"5VT#hKcR2ctWG/O3m6r=#;c49fq="Z"Z%ir8e$SDls]n)Loh\>uu-:Nq0QU(W!/q2f1[j#ELL?kpXB*2K?YrUOHi$B0#XDUlSnpNb;-6kRuD9K:>34'UeQJ(J5AB*qVT2kqCP%($Ar;FMit7-NSND+_a'$$elGESTtiqUa`ohO#3YkEg+$q8k]-*`1D<+2Z`)HW@LM]o`[YGikS:H#UN(8Lc%tKbY8tdQ(;Vooa86*%;gs?95N8^>o'cVig=EDYGo8cR+n]Ztc6,d"i02Cu]%k_T4bu8RES7KWnHQ6'bW&^@k2UCRBSXd'GeY"f_jlD()uK9J*Uhhj[W0q7%QkZAHlM!sm=,Y#,1/boQ3)Upbo1pd]%a)*/oaF31`l%[o1P2]*Pa@(\O/J7JK]C-pOLm6\4g*cJ:5Xlt0eR+hDV8D]@Z_H=$Rl)b%=(H>3k()Oa6W,%PbYd!2U'`lT<(,m>O7k'<7*pZ?P4iBr0CuW;5t@!-`1[^ND9o``oYurF!Sk+?L'*05<S(RgZCVh`-"uh_j14hQ%[!Dq,cC>hAkY'IlqkMHM37K,mNqYb^>DAlSD3gS=DD&pD7IHJ<;155P5D5elPA[Q$Q0I[M+EKu7oFEJBs0uS$S)'+VoefJsQT523%/AR*)!P&A>1H:OMD%dcu/2DEWO\Q&\]ReSCC\,\1T\GlrAYS8flijXc]l>T[;okHu20a<h<YsC\8kQ2_jL.c@D9J9Fs0Nj;.pf*S%?pAa2E5gsg`K.sq]s5i7s0Z[fC>!gBGQgdLVXhUcnm=oh1j>i5@aen0q&!;8BnOO->l8EOGd2uT3VQ`m,I#@fg8Ft"Pi8UEOf+Vh%-1t5VL`E\`e&A^T1+l+F"+P?&'6G.\BjDE.[TIj="8L*P#3EWudP8Lp/Mb/b\*QJ?_3`lEluDKtL1ok?>Oj;V&N8P-LnMmP991`)%;P#KL9;l':i?peC'E1$M_dAb*dbTpR:YpsF+'amD[qY?Q1c_3X2Xdk7'CMqiHF9eIV28du5;Ol6H/5)uQCio#Bg`BbN`t''9R5(R%inf:U*B$#e9S)O4B.,0q-WegOLD!_%98G]b)q"V'Chc#M@q8il9/++K'4=I-^k`a4,&49\3SU*In$7#8k3ZF"2B0pm)bI[`gC:Wk%1Q"Wg!\B&$d71!EDXHiCom*g@N/g>%]kO<D7Ki-/lQ2cl7($;O9I+gGo'WTjXM[bhY,n7`p(V>7#KuVCkB^`YQa,J?B5nGn>cSlu%6EFmI#r1u`>,s7:beANppmbd#Eeg2*]EH#Q'M!oYdSiN?Juj%*V'%N`V!9I;og]rPSm9MY\:;C.M8^OBN,t9\@HO/.nuV@+E7?<!%3Vem/aS#+?fs8Hmq;PRs*YXE,qRNiobV:hR*At2ocV32,`e?W$^#;Q#FQRcQnh;&)oGV:>-oSDhhU8qib\s7;l%k[:fclJ('*U:P%Zg@T[?GK]N"?2b<LVG:CL1PKQ5G`.I_:f*oE3M)^*[-$b!VOV,OsVBH3VNTKrpKTRmJgTVACi0KaX1KiEllCNepF?/gG\(D0.S.:%N$Q'.!Bc=g0:URX:aWmpIE1PN@l$-DKu704Q0#ceeaeET>%BGj3E]C>OS9)$YQP5^pf4A%p+o*t=[Hu^1%9Nb+)B69i[X3#k?6Dc%S@-\nM*.gYMXreBL0XgEkc)RCU&%dKp3Ug4Cu\u4Q`Uuc:.]3nGeM#0Bhr64EV)8#1OmXAgm/eTY3*b8p\4J9s2-Jta;*>I:MtJS%Ib/bTi[`ju:"VjK)d+.VF(5n5N:Ci-=8.)M5f'O$cXi.'71pho_+\L"da:*b7sp[T%r5R:jHu;@[^D)Z@XbS:B/18?M@m]-@+08.%!Z`K&drJ8l-A;33p9jM0FoIMnGNFHfN@0*:TB/`Mc--KD5$JV^a72*t3X)H`1'KC?$moC&k*(?-W\HMo5b>kRAL`Ik!6_oUIBL:T%/?75G1seD$`YQKJh+1XUYcijQN<]`GH"ddVjoAjU(IXnrXYUZ-q.dd!f[L=VS@`35`FaHL2C!,6\Z+V.QK#19E?e58YaQY[]hW'\%O4i=,<a(Hd=AQqW7pR_4.Ar<@KP,m9F"`H<_(>J9V>U>%@0IM+\)Uo*U<GN#Yh7g4`5#ZISup0J:&-?b*I;9p@l_/Ak-YZc=6f#f%-Dkqn)qm&@epo4=E]q<LB]jcG<\%fUF6hff!Dh'O,*Y]WF's>?@[FbtjbN.RYQSNkn7j3X(H$Y(-8l&CO;W6F`h1MmA]Zbi>IGP+%\K;X_:L`QM'rGejle.Grn.2Ul_digIN!1nP+P`^=!GKWFrcTrX=c-r9`Zf[lPBe&qlh"'9i"fWu;"DY>6U+nc"E"La&\(tJE=2\Z%h!<%tR:H13[60H>:s2M/rGgJKGN4uceFHso873Cui,cs\J!mkDD`eL.ks,4=n%UF(hXU-1HUco?;Or>tKr.,Y;8'=I-JlS8>fj!b%cXtMa=NE'mCZ?.tolXmLZnp[?Zd_A[1#u:UYPh8-%;%ZKWVai#;AhE$Q]5;e9l'K\HC^o"$p=YM_[cDq@Zre[\A?"%OZ1*c(+lf_%8SrG#@;`Gl7&Xpb"CoQ&GUl!Ijp$@lg!i^E%gW+r<97`HJD%bD!JnDq1C+De/g@N*1H8gl>W1O=Gq=m;$q(`Vhtt/`>P?RMUosnR%"#I8j\?)tnqgD?aO:J`g[c"K3B68gidl)B1,AXd;i!m^(S=eX&;K.`(<`t#*g+PW::bm0T-i(IC&$=]\as8ME]LX:ZP0krQ]A^6t%Xg=A&.c-_@heD>$O$DS&_.#FuHX$WI'E2a)pRt.Em-Ue#SFM$oKse*DV[CgbT9V4h,JE2sZV,WWE3_l4Jc+qEK]Z$G3^-53&s@6\%@khDMV0hd;]?hSi"3HF2N:)K`h-#M@?ns+FaTT&FZL*N/U.NYl9$j.%-f=>Y1rDH#I%Xj5C8W_74tM\`ORZO_Q(luK/;TeU`c:7=%D<5X*^=h\a)oTkQak!^qlLV+%HR`o=XuBbNT<rD&aX>bP_QEm')[SA]?BZ%i,Mj7JX:XNimN6kJK+'Pc"TJoj:s'gb-f:5PE:SOR%`[HlIe30Q;e).h0UI93a<t5Ec!6=hBmcMUF'F)jm&]EXe;XS]-eI!_e[8@soJrr6bi[R[.*NKa7Hn.KFb,7L81QT[P,9n$)l?KR8%dV3)5Bdt:9_0"R%lT9eLhm;^[AdJ.EK9[W1(d-k@I9#+_Gc@D.=+]K#n0cXPYDnq$fg;d`FHNF!!/5dLW\tZ:^ir--J%CpK9--E@%><\\TKk",;P1G(+`FD%@4P^111k(58*b8BKLhc[F5G3'K"Ldb-`P_N-]+j`s-Zk+]20+m4h)u!JLFc&1:H5*Z3=;>QBAc;#<CKF(%'Xe#)(fBcJmB%o,as6d>B/p]/e=rMrbK1c@Kh]qreGW\\Yk\B4i@ZEu?$FY2HB.UIjNW-!e%mML8Mu^F\_P-s!%Y0;pmpo3[Y!\2%/"ZIpa6StM->V"n%@*VT^B>MriZIp=T5e7FC^6JHe>\gM2M0h8Jk-9-]>qgU1&4!a5n?X'8!-jQ<cOq/ioA\g^r//6:N7I6>P\N'%a.:K#*qudbl)N:o^8iMLkK#bM)lNTTCE!o(F$*ar"2ohAhUh;>3"$1Ci;#X6If8h90%Gm%&!I$jW;?6'9PoHe'WDSjAb#l)Us7hI%Ataj1D-JJ=l5YGA's'4T2*3t.Y_aj)ar%o3!YLcqW]f)J('+h2CiN2l6n[1a]gXPJ+E+UW!K+B<N^8jGI6FfAC9Ng1<9Rd%.)fk[%D14bF]Zfqfr^6,2XsZU-Z:Wcq#pnqh_n[[F=YM"S$kdY//QGdF'3NCk2p+f*lA>gT`cp.s8^I/9^b'lC`%hs4_1Uq<p/+)C&)Z;X%JA!KC,Gg$jE/j?R>``rT$Op6ZXaV)K5##RE%pPuW'0:!^Ys'%_CHKBj!o409nS+d45BQ0fn)Mlj+0PJ08t6Eq"PAQl_l1o.,N9Sj%+3ffj8U.*eqmtpfj62-Us55#jS@QC`q'f+F*gaF5Q*0\mZ^FS$+W3oCnRc6Z\"uRY4-K:[Ph0mZs"r9&+eM=ne(g,"1hm=";+]"-%+G6&IgU3sOMoWBhN\YrC*j34'Ur9A59VlK(1=*87dp&cdfe%#B!W!t,=mljTfiR[:b5shL+4e7'Gi9?jE"3^cYUtbI<k9G!hCL5u%8O.cQ-U/n07!N:$QF9JFU=dHWlse)CL"W(FU4hfsMhg/kOmZ5Kq9JNPfHaNnV/ARB8lTM0Gb#JBi+@k1r5*$)$ZBsDS-frK;?_Ff%#Nm<Q*Aa/"hluT4OgtA0`ciQ"pMh$3pZ5Y\,4;XAI`f$\lmXDd,l=XHOT%;%r[Z[Qho5-.>p8dV3hcb-X/^nNFpdh!8j`C@\C-''%jJb/%+X%*f*Ma',$naUn3b!12YnYN.JCjPq*BCD,QaYI.<n6`VZZS/"f)A??:iFe]%RM%[[B@q#_3,ESKg6,+/G!u>SuOQ>)b[de%Z<u@=T3XT$Zi-f_@L&Op81Q'gWuV?D1(DJ45`ps[YQ-%W$UVr:4]VnS2@U=PZ->1f3%.=EAZoh/Tj*PfADZrP0;j;!:]tcY^@J]9%5[`m1Zgnf!E]g]XfS4j8+P@OKW`W5K?[EichRHN%p:YuS`ji5cfJiFn[9/#,i$3<@9-S7&^%G'=]ph;q1Al<"jNrWEN]fA26",Fb%T^6E$haDAXFS9,WmXN=N^u"n.ZXFH[*K3+kl63-=@._IQK?VN7HiYBQS(a5c\`=iUA<Nc+Z]sS"(5D!09C("h(stZ$`GIjVAOCt?%AQq&pJt/P@Ahu*d\<+qHd_kjt@7E-W9GL-U'`emFl:LLZg<m#V'!qh`5GH>[c+nBh&d0(F=ps\(W@`T@0*p3UV8ls\:@IH93]WN2%1T$3i\=$Y@`seM1&?2776`HjGHAg&oTt8pEX%J7:(gX^sY8'2ZhEgXWr"WQ!J39=P<1DKA:Ugb*omE;tK.N+G#tPkO!g.E09@Y@o%.$6uG&ZDtU4mdt\K7[R5VjY;?q)f=4[$`hm+83__mMdF].Io+!nP3]4H?q7te"Y-kR3If7!iL*@;'A,8T'`?)c6<)J%J+5&Q&@1r%nMPQWJ+M3ciCF?e)g&9(/'WXO<%_nXPlpt(@-+?EI2JE-!\7B*=jdT;_q/jGV+H1i]@-]TU7l@).0U\7i;>PCig=,Dp7OMcL5c!i%FU&3F5)_NE8A8D70>6j.4X#,<<qA>*-7g6g@k`^Ri\8_Qe'%2tP!U!W>.B'$jLLNX-,]>]%?7>O<Sn7uK-M"I6^pn#-jWMA5R'A%%W*GYI"S%E^'jU;$#bc&ep09Fn<gSf`KOr,2AG0Nqa8s1mJOHSrhS][(CT=]$*\j81mjfXBfh;suoka//eoWF00LUu,f:GCq[D-9H%8`+[=E!h`O\>H]HcUZS64g',E2`mI>hp\Y6jEX@45cf63:3*AaI8u?/WPMnXj4T$1T"0Y%?B)]>KIJ\iFrti`p8HVYZheIj*etX5%;/i#$)%&W2XG5SdW*uT\\6i6-:N*>]=K?&G/-dkYG=Mh>FNUE@45%MOTS4pT\4;QHRkaY0A>DHfom$]ASEYnEfa*HPd'Be$<4\`F%gs\%[JJ$RL>L5Yrd'X)A,7/Gi^,%.Nal5/9g3CSp+[n'L8U#bR0G[!6=XA<u#`8`aYl5c\_@2"c$SisM$pf$630&_"P-B@1;i5D8%"D:4b(0V.>YoFt-YB6=M)3rsd;F*!bMq<M+GVr7=9?2s<Hr\R79VLd8P0=Z.NLcZ:jfsUeZQ#./T9_C-L60)@D>H:_Ia];#=Y6.6%\\?0>/&-kaQML@G%bS.C#AFLe[^O>T:\dm<KM7Tk<9A^1P3iHIj<NR",B"V<AEO.CNI(>98(baOndBb"lHS'J?>]-B:KX1Gl69RX%dHHjs%och8M^rAX3YH;"m$>T`J?7B>?!*nCD2s<P?#\f:/*_>+2`;/i!>q]=l,s-)AgA3L.B^J,Tdt2SaUYZ=g'f,`J>%6A3;82F%q.HLYE;t`ZkfHIK[hhm,rc;gC8Sg7cf1Hc$h;h(>gkbp%hc\ROT`hm@-kZ8:703%9L@8s+MS<-rH.'IABR':\>J:8bp=ZZM^&%(*%m]d0F&g@3(G%q!;5!;k-esJ_9;F=f:6F,(,o8FU6?Y[da2s#a(n:q=bX4T..Bgtcq\SZ\YI@\;&801r,9*WohZq5g&>,^\]#&S#C%5eoo\I36!KfHZDi/A[ca"$%[K("UbaqX4;.N(Sd@#Y'l8h%<]O0f*]S1Yfo36u[(ZN_UL%+#YDqVMX0U2Sq2RAoS`-l2%3>Y=Y6!%W,qeN03)e6ES,IM7O.m=fQkk`BOgF,+qnCc=DtJY\L$*@[%5,Ve*tD-4*i/tjotQOe70]Y-5C9nMRqtk1fLh#ZBJPtKjhb\Zp[1;%U#_qRh*bg\bIm%)V#,/d_dfeqJX.HF1sL6-A@8o4$!!DIRQ:]OeTBSA+'utOi*s5aSQXRV-7s^W00L-j?-!7m($T8-ma6X)U98+J%NUEug-,r!i6c@FDfiq(ih0:8OJ)&o.lg9tA`AQo;jLqQMR.c6HE`MSnFe2ZJ$<GnR0<Z1-a8J">"hgB#q[kC\[V8q(]"!nT@S,<$%[0XhjkA+ct@Zb*,BZSSAQ:XJFggU"AF"tflb]>0SV'NTDQsgN]X>>$@c-2!+fm.o;LY[C>%b+VlU#`Vj:c$m64i0Ok#"m+d8n^^X%/O.I<e;sa+cfZg,(Zsl4*sLYi1)ZD/8fspad9YM'*^kp6Q^0g%K=PnNJ"o\V[$?lho`hQ^2#)5)4#9?/C:9EN7'<HW+uU)^&Kj4l%$][mIW]tE557-In!bWg.ldIUVY<#r>Sg`jm8XoB%/'nX"i++)"<WoM''=iN.$gI!\V*Ki4Eh-o[3qr"3ODr"<cUNArWnH1^c(1_C%U%pc6)[GBBeO<>GUtR7<.DiWW$Eh^I;@:#d4FE_<^OGu-eNb;Mk]6L.o<5uN;D7]aqk@!:)'(dt7!c@mQa"7.S32#\!!nU9re,\k%bp8qrUDSA^&Tmn2@AFc!&Y5M52=X0CJ_H(Hep9`um`.!.5auE"*seV*`QRt!ASuk32$lm`I.ZbU'#8Z*X09S`FKepm&Yk8m8%qti%PS'UVYsi,kn"9Ka>JGD4]&^*nP%9=Z$qJB;VCf>YN!r=M<3d_o(&&>(T'$u;)':iM]8OBRG>sI3ML*AG-Guf1cH>%'/%iB%elF7l%=X5(iBE(u!>7h&p=X/Ejr6GnM,32P`ib_^Q&.n1A=*Bk-]>BVlX;rGk#/IWb]kGt@Nc8l_%&Hr/q8gW2V%3+a0'GrS6o?/qGP]1[%&qa#WiJ^3Nc2-MW:LNWWoGp?FBphJEk`geoQ[7n/:e$NMk>=):J48M!QI/=t(iFaR>BCEj*+bK2f;#O'87Kmu[94l`fcn0+nN+5C%oG1Jp^a"hi])YmmR[F9lE%\JrDs&@XTq;FIC9EA5e33I;AKU"oagcC]4jdkJc\*g%o^Dm$bfS(SD%SI:?tNP+caaHs*Wh+u1.@)Q%E)6i-!q'KF-@F_Kjdp$)aX[+>Z/)S0nke+"%T=C2da[,"C`uT^`ZnW_%YRJ^0p*d&?T&"3ITQ)WDBO?jL[/r).`r)>C=bO2cIVU`%SUD9iAo#e)PmhYCgjZ4_"jZ"HZ95RVS(LLsml5a!OIYdTC&he[<6#$l<$"ks]@]7NmUV?i*ks`@_0/6irD-o`m`t/;6O&M^SHd2[%bc+JCptA`)deKu`KSU;&.(TA'*(:AEG*KBdVD.`GTL^Pm[*Q`(&5?C[nk'Has8(iTjLDg49-%X\rtg^-Hfn`4osNgtdA##T,R!,c%G>3+D(sAij5ZkX*jZbYWf2`TjjW?N-(B@+UW(8Tlm0(aQir(:M(D)"4Wa7;^fH\'I0D^RKfA<u);t3ph;34k&k/&!K!,10.>#kq<%N"^:md:tZ,E.j';WKIgE.mjHuii-<:2%Dt[H>_7n4/qfaPYc>5c3S'a*<$M<9F1G//7tN)El-X:g2(dZS]8,TGJ"8uh<)^-.e_<H%dcI?X&(Dj11e:oW7h?E;h"(rF7J&K8fKHp:mTO-@]GMCH't)XD;OEi1r\T]=K:#(WGOj:ba)KO_a\Q9LV3j\99B,^&]<NV(@@X7A%:@3"IXsW$H2BrAYB0$$KYb^H^:U&<sNRo5FE]ITJ;\Sl](+$Ng??`=""_X*dH!E5PZV_Z30c#Viq=4&Q*P(79YXhj@\Duu-[gVXr%rr#l>2(E9Ag#l09i)1$p^La3:4/?>?0NN&:QeGi9LYf;tK,_#UXW2cmFPMj^q3W-;I6/q:Z`nYl@U^SA,o]0qf]$:@CZ6I`$/STN%X?X7.9]kFSI5l`!isqpqR.Rlh[sqAg7q_eI8"%@IKj\-i>D\0WDnfp#W#J82S&j<+nZ5dF(tm+UQ!%=%)4PmcRgQW<!a[]?^p:P[%&t,ZdM/c83h>A!h@JNA&Kl%#<^g=0\6jD^%@bpdZ7E@?(69c)OIFuDcb#udZZ(G\V-&rC?-`up`$=:L44e9Tc14+>uTdbhu_0lYA%\d=<+s#cOP:'nR.BNLYWpH\e,&\=3FOaR1Fk_H2Wg6'1ZJV+E=I5[#j'1u<D$ej))iJT$.Us/eZYcF"1rQ=;u-h=*h<35,K+\K,k%r&5^?_DgO)>?Q!]S!VX6eu#OQ'boj*.`K,)&/8aSG!'5)kIO"ZHb3W^*)ghobM7Cp#O)Lr*^/CQlI)Kk/l-dbA-.)BC3GOa%JR3=%+J7Ep2NiBL'^m8*KsG7u/HVSb*h-H-\K'E<S60lGJ/]aXS[mBNb)ZgWQNBh(6lp6s^2QNE96oT.(13m>VLVW;4(<I]Vae$gr2[MQ%IHN#5p1U/b!0uZG*$H=]#V=%Dej`X*C\o5]Ud-*uSuWTMg4%TF9E?kRN(C3!4k<pP'-k>gAB-2-LYNUj#Ab\!NIP"$a'6LNgt?uZ%7a;pKDh>+YIUAaam$<`n.,G*Ca&\L'WAg7Pk))k9(m^rA=:XGX`3PmVWRjke\>0e2AF<=QCWE#0[;@Ao@MuH7O(?o/Y=t/W6XW6V%gGerJj]5NU(`=<n^)O2X>M`U)Y!sgZA?+G^5^-q#ZV=V1mD:du%-mGtL&5rK<Ft9%Cn^i-8GIrH'uM9LSQhobg*h,0f)m1T=slJ3%k9iOLa33e]&rp+(@!gX'"lS:7L%f^PZL(4<pZ`Jl'TRBUd]b0L9o%)e]^Rp\0@=t&Q!hMepfD<VA<l%-EPo!;e#4X\R^D9RDauon%FhJFUorD$r3c/hjS)2Wt_)551OU'5r[q7Y^i`44PV)lo,3HIl3]L>FHfBFNhKUk>,D;Itt!HE1["3jIFAkU"j\3sCi*g'?eJ#tjl%Zm<6:SdjNS-)iP1oECl<P@35J_RT!&d8B[DH?(E^cHLq;RksXhj8+_V>eF7`-A(G`<!.uV65`JZnMqiBc,&R*fLpH0I)k1RGg20G%bT>lt^AA(5p!]8CU\r_&[:sH>X'Vtjd>[XD7*QCN32;[Yc5tCa"0*^/54Zg<H-Ao#V_\Y)."8AJKBhF5Lk'R@qIdrZ(p&=2M)K,$%LbPpJk)?6I-+$`faKL^7]J1<D9eNot0iI7adC,AVAW7&bC43WV;gQV*lZnRm@[a64VZO:QZ\0Xp),oHCTg)])O"eSC,3:<&#p5ue%K07$1+D"o^TSapS>"nA;gW]T,/4?/SBYNgj9;J'!ZCmJ"cN-ua:Wo%*BAV?7*]J)aRDU8e<0H?^O-1-D6RNkorO,4qrJtj5:LSsQ%KL*S$$-S?"cQ]RfXgqGDX[l.Ce\^,`n`Q2*42cD6dX<4X`hAV*DFiMCGDjM?P79U<f]ro7rE#?!>s)^D/7m^L!BiWY,`C4f+F1O6%#WG<bC22Ws=6kut*!WHjhi:=OV)Ik_V^+$R!^t1)Is7lB?,4)_P#bM2EpXS^D0Ro@<If9hcBV,t^Ei!fh=,Bt.W&qLRhIc^TZ^fL%!kDBUd1+l)X-BJA\"A:P57Cm.E6(6'nYB!c[`$"c]fCjFdN\7e-pZ[j/0KhP7&ZHQ[>T_uC*Raj=q&_H3tcVG?!?A[DJU<GpWOBP%:gpNLnZ)_?2!="m%8;_`&p$3co'@gkW9%b'I7:kF'i9*E1B;TXek^X1B3`^jJ,E!iGSE)blW+/GrQ/!(`R`AhZ/*9X[kg)ppn_4e%/FBHGcZ`e6h9)(_j.TP/M3kc`K=;h+3CIu"4anojXQhTsT>A4](eGZP]YY)Uf#h\[8"Vlo=kNtG7#&&+I!kJ`[aP:[k35DYQ0dfn%]t^[[)3XD71$[!L:R]u=&@N(t8#jG'/mpf6.0Ee8^g_VnI'+_N7b,^r*2'\V9,nM:np=ES"#X1\(rI,F!\$qdcOFPJ!Q)-nn4Ym>%nn"lO/kr\:..QtTS(mb_ki9e'S`/S,["NQ-.(hfDWThQF7:%7=TiJg_M8*B>YG=I?&`?hu52MR[.)2A+NmO7+A2<Yu$"Q$0OpsPJ%>]099jM#cdb`Qq/D_$+Ignk&T&j!^(/:*Ua9SiNj=61=mAF&K=9!L8*lRGt\>G\R9#SM-NBpQM?$ReR^?MSu7R4]8IV-h9tHKCV\%gWHUtTq,3:6RmrG97ll`Hfe*a>fe.QUH-T$;eEaN3SWIN+[fClNmRr$fb*Y/q!4'^!qI0.YkCj^7f0Ro0c<Y.1!Iurdpl%3@"[6*%[ZA29-ku5+4fV^Q[YnpN*(G7NO@F7N3UGT:V6$S%aTMA!0_U_cC4e`SBto,U)9GNXqr<3jKE$9oej&XU5<O-PAiH`qc!l5K-Y9iE%`[S%FS)TQ8^)<Je_H/il)qUg+HNbJR9YeH3b1<Q.ALNpdb7@b1jnu4DqXrU]"<2"E8X>j"i_48^U2Cl]%Ut1[[F'"'nm*h?\A%<q%Tp37OLMC!$e$<$Xg#D7=?+!gOOYN%)S(2:WSj2JQfA]M"Mt:bP=Ci52i37^OBOU&Qop.*+bYd4gr2<].&nPT:UYE5BIP&F@b-kTr%n_eS6V:F;kj5#!UQsEJS?F_N%p![$%Ln'&!(-3hu.V9P>cQ_oEHE0t`B*K6*E;/]cWT2^S:hloZI^u#31'Qi0pGkc*SoH[JOH;(k%St#>H.jE#sfoO2Rcun>kH%Gf6K32eMo`j!K)$jFc$TGI#VR-cmZWdr)^arXW<OGK_8Y)6E!k4UZKNGc[=]+,+@s$S;lRT<0i:)C=%q2B?d^'R`b6lKuXj1I.RDfEea5&(D2B?$"4D4c16&qVu:6-U;o@$0-*_rNW_$K9hE2XA\ib%F)Ma@n85KJ&Y]G_0&rF<(+XYZ334%&j3?XB0SQ^`V":8_e+e\&(1Z?eIA<Wj!KcHc*4:_@c&'AU#gF9N1Ci9[KNSf\C?D')<8<b9(i%.-L=!skaPM9ciY14AR8A1"Va7H%m-t;^#otd!*WPoEJS!=.0@<1Z%M`FM]>YYaDa:2HLob:&l;k5PFg4??EGf]He"ulX-"PG:Qa^8=<c__,W^G20JYKXp<C2jsO_n&-%,qK\dMV-ju>#\XXk^IdN'L:40['Pi.(@<?HPg31D`+%?<lYe1nD<W"Y-:P2)<)G2+%c0***F>*a4/o9#@&`Fi@])^u,UNshG@0n>%BV`oB$@R,LN9E0"1Ycp&,*N<FqPpB'?`hC#.MmtDcQe`=$tcY5KajEf]*nFl6D(TO1BgFI-U`RZB@4d=.$.r!g</[&+uVSf]M,2l%nCap,F38[!!%4sj7F)%gp6AdXLOilfQ.DEe$6nZF/%t*KdBXSX![L0W;R_((%RlXEBu._rL)A%/E(5,6Y9N)=dO.QSQe*"Dl2CsB%:rf)D)XWYVn'NA(%Yi6L>-?kah>Z?gL>aWo+VgPEC9O%0Z\4(F4cR>2ChpVCiHsi>k>h/:=B((mJ(3;]YUOCEc#nRG[ImU:,j-%t%+tb[I^-@j^DJ`a!l:b=HqSM7OCMNj7fTba-\XK)>Ojh!a:GsUk5]'o^6Y-r3Q6<E?JUBU9cBdMa')AqHVfs^%U96cJ/Ga/:8kE!I%`E7Hc8s*&%8Sp:LGKYhp9nn*Z,?n<TaNY^<S!E=$o9/hWbB!#,1-G^Lm8b61apulJ+%*D"<D*&S+9cJk);SF3Mb4M-.'7Ab.C%oX%-o@=r;/8RX'g`XWa6hBo@T!+1$bG&e=!8KBLm7d02?4"(i"M1jmq8j3G.+Bp)m7$8-V@BAH3u2bXYa3h8B8"V/\euq1;OA@,rjrf%>OkjemPmP`K&og'c/_n$,*7^^6^*.jRBkSuY97Ql9EcH2^<mh.dZ;gc<s/0?4(QalYD6]6*m&?:6n_2a;.tl;pK)^@i:9ONZsjMK%$nfI,gU<JO1otsOh0n=*=U@ENN*q]g?hS7a93Eh:\62g4;jbI1F2OU6_WmHKP#/DbO$l,bf&jJ4+.8Za#L2sYKP0N:j$:0DJ=O94%g1.ba\JZ0*:2]BR!`%p"i*U6ANS6=5!Er=g-OuPoZM%C<YPZ\!4mEFp+jKjXdsg]E6,"./C4CEdBgc4s,[FE1o#.tY8B.2;3Q?5[%O%3nE`rG6G4J"nb8TB]P0Af_q7jR7O@328D.]q_[nbrZd]$dZfcY-m&almY1K2"LeYHGX8jL=L\Ycu?6UNEW(j)l%q$uG$sO-SE,%?Ic'n-D2LN_*fR+IH^9:+?=UnJ/9JP%i!&0bAd[Qs$U`ccGt7_#f=EgWMb&BYJrVqqTot+PDn6Jrm4_f<golHDiUq4+XoNq3?[mX%q<a;FJk@#SjaC<>*-EU+^fc/NE>N&m2GjUX3dgkuDT#E*,k'[H>"o0-##?$T7Z!9hVi:DrG<J(cT&Lqn&Q[Z7(ObE/2SpII>/h.1%;B-p#k\PFALmaHNCSTk]e0+1V75uH"KNF1A[a1)H.;6;TnCi$G@BjEWG?,dTs)0j<,FD_l:Gr8C_OprTXqYjU#.n>`;GKAD9NUm@%$%VM`*]HY]0:"rLmS@+,>PF>?'F5YNXrr<T;nGauN'2oq8n6WP<Ft0kS+W!X,uifuX(%ZFRVQ.#7^i7dGDT\&d>5%T95T/P'>JZ9%[=%EOZ\BK#+1*`;eb5o3BO.c=j>HWV_#70gF-iU)8G=f>Zs6+ta[o-58OR0Zr7Ypkh87=iCbkdXah_?9RCA>b6+IAg:pjR\:M4+`%mqjA;L/UET?E^YDQG>:(IH;t+ZP\(SQ9+#jh$AoBOE^")[DQM!1l.^ujK/uA1ij8Ko/D7rorns&?u4s9CoeJu5>$YGM#=c8[#]Rq%/,h=":sS61clc9\=5odP4>Iqt8sIb:'n$0e+/8<UWSc![Z;XXdK"s](h'<'k]"O-:kpB$.6:eE#`9r&#"FBU_'F,gh+'8k6``u;;%J%'dc331@;0?Hp-G_)9B@g9Tu_\RS^L%iQl?E,H7'LH+%X"Z?hT%6bAN&;[WP8rAT,coYY)O'hP]GFIF;\dJSZN,05FO-m*;<2tc%>"Z(,!pu:17XKd_fU/YZncRD[_J+614$I7VVd>deN6;t_Qd,r67pP@#%]$S`ERkLKAgc3g#8oR4Q<hEcR7T^)p+.bZmp8Z1OYeQr%TT)@^PgSI^LJ/&2WA<jj>D2$KQmKWEIOu*Md9YO+l_8igkIsgUQtO*+@?Q"Y+?CDr$*MGF^s[N%=D#7iUH0&;8.+R?(nE=Z+%"%f%Bej]%p:?J=*UEp^[AQ=3ll,)g@*I3nNV\8h'.D,'oW4Tr@@gL1&j^+Njg4ibNWtkA+;hLW;:m43T+k\K6mGf2*r`26O]\<DA&"r>%[C%N#Vi,XVXu'#ggm+3TGLN-;;/nbX75k2BAdme1[%nuND'&(D=G;M$\sA[%Nt8j#D6k*rAi7me$PdU*c52rTHC>/]Y8d]WgK!)M%M2$[[rNLFdVKG61c7f$Id]1I![OZ(RS+G;S7(ju>X>N<.N5#]PN-3#S`?Idsml$?Oj`8p6QZD`Am^1gEp=^ljQ."Jm4ntosG%h2W%[!EmgGaMg<q1*.NhUNT;9S)IG5Yd@=Vd.R$e4=I?;oc;q$H$OX3Qnek(Le$Qp[gN<6Xic%bpu`%B;%51*B3CH=8p?FA:f0rKfqQ)%kA<"H/cgiAJ\`-8J>ro6Zfqc<&jNj?pFNd]<up)GoF-Dh[pfQ)KX<<qoJI(:`Yhi@?U53&S,#eLWiZU6,_U#UZc_afS40?.2KD`!%FjMI"mqGtE6a+iMO@-"f0cgKc1gRkf%Pfc<Zl7UsN,l4n#:6'HEt`lI/R+G.`SFpu%Of_X]-8Xmf],tOjmd0Y-W6`tE1]pM0$D89%rbPBeq%>M^qq&7Mf*W:GS'JL<-j9U3D5L*b0&)#2P8qn2VKk(;pT.[X1InP;3/=j'ecHUC&P=7t@,8,4HI==1kFo#A4($WC$4O'e%`=oHQ;:a7W$JRE)99Jrn`VJ%^<Rj1^>o+NS+2m?4E>tq*)0*IX!L..[,Y)SDcF87O.Eu7&F:VApCJW>)YWhKtjRfKB_pd8Jna,*:%Sb%0_)_"Yt>*aNAK_3RVH29V"87sqq.JG64LJ<YLDnt)H/6Wbd/K\*<n_d+C)6gsP9(K`VqGor_Q3s#Tl$;Yl,qEU@4]\9_q&sGe%5jd8;n\O>)):[?1Ke%f'p%S7+6;oUE07US=kre1lBGUBPi5%!4r^[_uM+0lmPmAqLkld,\3cW\>U'=U:2(lRpqoXKJ0DVm"kZPsU%P*QX"^UJL>3,<WgJu;t`Da?16pSDG-&Oe>879^_qWUY[e3Ht83?5f+47^QZ\U4MOILre/>_b;5si-Nut7+rgGWkCP)X(5$i)DU';%Mi#fR:q7RD2As7DVKn=k)C%R0pE7N$1=/B6gk+BI)gGP[4!9lil$D_W'1K5?T\)KXM?_"n8Xd/L5X;G#IQ+/f`/]Amh5]IOGIHF,%O2e6cM\8,<:Bnc@KXg.p=dEmcI8:^)j!UF9=--L/PsJ(e9@[+X5bWWh(A!ZU^2aL\nO0F\NRi13A-TDCSGu^X-hAXTq\+/8K/Y]q%-TJN5WU4\,ploV,`BZ0Q,f<-(6uDQ2A$P0t`<[O?L[Kag*Notpn1)2upN6i,<AtXl>B90u)=N.8-Ad0UEF6p(VUaLA\K3qa;uEog%?sDAa,&gTe/pbrpCoVoJVR^TCQD`mg)-*SC2-?BOJj'&L[OSYa1mml,4%"EWF`=An@Q2Us')Jpn>e\CVq?3Dg,Mtbj;&V6*Db(DD%,#hd\\J8`FnOelNP_in7kLGR0Emf$jf*&ZVghdH#NHF/'9EGD#ZLrp8HX[q2Ktm;!EW_LFI'7PSM.9*hMJq#R&6-.7TqbFqJCr.1%_r_nkf_W-cgtH]8cQ(U&f]]PB<`sCljpQ3k-RR)$N_6*lS%DA#/RTAVs&+R#=,SY[A3!&3_4L##6?KK6AHMF]m$:eDel(IkBb$%.%ZcQtZ,\R%^e4NX^L>dpTgoB!DUCr>pWg@mE8NTl/-u5p'lm);R)Q-,9-)^69?S/-WimpD9h28B_0'^!Iku)8j/J[*[^t_28Ok=9O%/b&p6$2,qR6mm+3/&?Y99(u:GG<S:c1CsZ;nQ0:BD?hiqKDc^&.^L9SR7e-(rq\[=lLo=IAUr"f?I^K%=YMY.@oe4#]9drZf9sB'%E%6jYq4U!TVtmf*/6#kFfl\5;%BU_`*\&/6G'fJ[_H?A`Uq[8^^_FD\BD@`-HT`Bpe\^(U$5\K0JNY&3=lOm^%;#F],Wh:u`">Ra%-ZCV`AZO.Xr%l8qX":Um0X;E[_86ZSCt?.8VlER50<PFIel6:4TP<,jMS=_\Fk@4H4fLK8TsHmdVSGg.`h"u(^2dM@73f$F?^ni8%Ztu!]SOHnn(\<r^h5\3C3YIH6]&6,]S\:,rFrNZXQo1hU-)JH'P6<X]V<sOEABrTe$W+kHj(>>H27oWh]YR8X#5LhXc>nig,9(0V%&J2OAA\HMsCJ/H1-d3*Jg*)6^/G,N[KPogqej&tf5Df*bX:DVH_E#BYHe(sE?GRkkbs9ff&W/n!jBWp3YWrcrJLaph+3/gl'XL)b%F,7ao,!J8QiLEaR;blR-QOWO<^EZeZ`:h<_LN0L";4p3)e@1WX4hM'$I<n%'j3[h&nYE!7iJWcMBSl<LK1?G%d5O2J5Q0dFDD&VP%qY+Ngi@^c)FDScrrI16W4#$9hq=)DsS36oeCn/Aj*t[!Dp9UsLGbb"+Wm/JX3f,@1o-K%pT.!:H/XtV16gX*7(52q)cMLrHk?9hZ%=A;@[D@m/g0.4"Y*idmC:,l;@Y%?\om%!qN)TA]gPVgo86O@dTj?'e:[TXEd.oJ"Tf`+K3q?Q:LK!A3H^Fr&rh<&jA"7/;R9Vtg2%o'X?t5c!\mOc1M_UopgQI`U6Z^V_uYqn1:@CPrlSGm=]bE$$I(JW"m42uE)*o#VYDmdIo\:Oh>5qX'XH#RU'j[f\j/_"4a26YO0a%nc$e7mE#Rp`Rs=^`nPjFJ+"<EhojEr!;Cdm8';5;H8".'FhE2Wa&]qQo3Q#dqEFB0eQVnE?K`uDFH!DW\S5":o3-[qmR<dJY@WZ5%1#H:Fp%2aDZN,FE31_u6a!e.\0ms!i%BXJs1]<WOR1B\Qi.dL[mIKkD&TH8a%(gXq0Z:dIXq%f:UmAKj.#E1G711ROeeC0#\j4im%N/u6(>a5c,Qq2"nfMB>F*YZ3(G*L)V4cV-Zbb7;RUO5@6\NXL_ZH*<(NBCBe/s&925FSSV0CCCm(uTJDjM'\r0X';b?8<iflJV@V%%+Cc&498O?PJ=^G^ZIWlFrgID;Ce]QK@KS@7,'q\na'%7s#*UDp<A+H-iO#?B&N72RJRp4IdpF?g#0<3/@`.B/Z(eR=j'ZTRq*'/%hGljIT@N<61o1qIljQG=A^2_L]^]ss+8VkC1uG?/XSN2&dTjog?`mj51*&gX0<tG=6uo\,`BenRN+?[?rm"PI6<;bCs0g-Q,O'.B%mq5@gh)1*dkVA`"!7tiiqjPOC%m14IrpGJHnkf#R0@[+=*Nqm3c]"tmcQ_:Z":i'r!aNa0.r,l)U:eK]'`^GOCWb6YJG,fIZ)grE%4lH-K'p*Vo3V0Zd0V&a<dgOF1VU$HrSdq@D,2d+[j*4c2Ei*[MCCsfIlh0!VJ8@]fn?WJkJ?M!`>m2@PcKkEQ_"Z3`HPQXtWFn/0%&Weo>Iolf>PH2I#!=[t/SjdTuWU&A!gMp2F<d]<Pc;qKb?cuj7YH$bKlX35q=WGT=6GSmVn7O%TOi?ju'X37[j_ZU9X\,Lp`IK9-%dUtFF3M^kD>7T:<_sD#!BX)jY=V+\AX0YhpI]JI;-/j8Yj)%BS-A%9LrL2Xj"Eu5C,df:7R'pYB0U]DR-XV3)kF&qEcB_a!!FDg+%LZN`Cd59.P63nCRkMDh?ljUGqhM_>nbe?a\KU$2`&lZK&3[tQ0<H>A'De7m6MgW/<CO#sc'L*l89k_H4CN?'i`AA_*;Tk]f^pohI%EksY'`X=*grKlQD6*ePk"N.'P8*j+.MHl(7SKiPY^j<B.LE`^DDtP?c:&]"nNca*R?VouII?O(JF3ndH-!-<'d/lO=:HJ%5h"QQF%6GB#f0u\]#_r?=:"[0QNpkOXc%:$&gq=[1js2!b,Yq'2KI/T.V0]2m?(:W5bA`5,m:ADK'l`%M1hUOu]<Nk\f:7Be86G%<InbuPI%fS0Y.GuqMj+V/s,eo#,.)t2\8LPPfpB>fbYZ69\BkrGVJHGYI,%8oV=,hkgd$mM+]1+$HuTh!2c*D4/_`R46rkdUGB+e*H=[(dcu%clT0N6`,"?bGQRL>a2`/*/'ii0R1"kP@4g(E_p!VdN&K6^eoV>A=*>f-oRGP=a!G,QfX-d.'*$o69D3EiSPY-^09AQ8/GEnEJFJd%pNJN8+SS@r>7s.K@:3m:%%S8k!f!tgn=j&,Bkg>cVl7IXff4%M$NpB@C(ZA+ALs!/ZptrhM!WU]L=#T<E,Y?TmFWX!+gr=P;?KI=%XTt_pbfs#]XTHj<d1cPe,G9NZY\id$']s^S>"G+G+mJ!d)UrG,4aLeoXG/Q.V"dsIo;9<;2jK7K"%k\"HXXBZ!$J8^l,_;*C^jG0%)Q@2TCQB_VPo_s!)I.43Jkrp_mpEf3W*OgIXU3sgfNPT4p2OM$Jup(_@#(3)-n+g@Jt?i*R3ei'NZ5[?f'TY<P`1i3WiPWhl8(:/%4;nT12I&K5D+Aj`>PUi$:t,tnr2h%.6dqFXd4C7MDZ,6L=qDYEi:lPOLuaB,^+'<AJ<bHQZi2SKs(k!8kFGFOkB/;^8n)kdNDD;S%:r-G\MVF4h97K6rO(ctGkGTc%^/;YfjgO6Q9ntYLqj$b2s4R=t?9)q;nZh"mlt?!kjbJjq!`gd-fM#jaa>D:E810A;/FVd0E#]hQ%DU&*//gdA&K,QsV`";KYBCr3L@.Rj?'I<m-98]/q^qSj1R01-E,H6*Iqg>`$\Dr-iMli7=I:jK$Cp"=q[.RO?L:%`h$'1BU6o0u2%^TZ''lXugbN**.`24I^.B:N\h-Bmqt]X5FA43H7ueG'ePC#[fV!!u-dkar`*+pa*RW-q(`<LWJ672/<@dsbt/(rqo^Tr$ihWScDL%W?hh=ZP^d]EMSkiAb;d=j-R7ZI[^(mV7#@6au$EUop)"'Hd6eJs+)hW29IOt7Nf`QfA$jsFE6npY@H/GC[]C2gCXEkj,`)=90:=8%^8KK/agLOl5]3P82P:J,?1/QQSC*sY^L4RRr7/,]VGNu[DSZl9[;GkN_;Ng,'0Q^m-i<,r<XcamqB$Ks>j578>;70FeRb*_")h:;%5OE7*GQqIPh3-_sdIZn:A,uPW!Us8J`'[USR4Oc:4e)*83e=kJ6.N\cn5/\sn!=G@k0Ih^@$"Fe[:6@FeV3Xs(l6^=0m[%Yd*8q=%^0<=/^!5JJ`AGEmqn!RFl.'qumoBk0+8)X?/#Jm%Q?laiem@*U[pgW+.`B62@[_#;leRH7,1>V]@N)Y`!/Y#T#(cPL7FWlVG/hjQ%>;E#ENrY$/-.@l&(;6gfZt3r2HWr;Qlcj/_I+A^V#((/mM[!?KP^;58]b)(?r>4:j$hh&R2NdOs+)`3`jm%!$ZQS'kn*B^lIT1Ea%Y<VeZ>`qRKQQO1PrP=J.1YR9GgaMiAO*=nEgjP[hq;Xn$e8gTJ%pfs'=\)T,Gu68.+(Kf`7A5.\kOf'5$DHp0]Q9eqS"lkSk![mN%&oE/c'1MZ%o4\AlL%+`EMVRodhWFQVOXYc5QF'4H3=gPc,HM,rLR7AE8%<*^#gR5/],qaG[HupfrfdXcgK'p!:1%!"C7jt_k-;T!%At[E=k^N+EDSKuO1%n;;'a7IIb%Aig[?BI`o,PgEGa7F4gJJueIQ(_b:Tfno`.r!Fd=8L.nr[%&s!D.=l.)&d2pl.O^>?P[<mo[i%haBO=28-[0/2FTFc.'&3IhQr%YjgMaM-aq7Df6g^Fo/d0!Qf4:28@uNb(/g5hn9>>,d_VW54d+!FqT@s'p=]!VLW:toUFo#fqLAr%KrIt6!"!QO7m\k$'B."S7Xht__\GGg^^mcIO&d+<"gu2n9!*O'RaDK&$plGFF/F=%-04<T8\1fQ2,[l6QG*r4m@TAQ*Wl*9+gFVJ%nZQ;I^'4eYmH+P&G$]Z:d/*4G*.[1\/#`DfSEpakoIP';CT:0P&1uVj!4&Hl\_+<5qb>B"*WPnG%6AY*J:-h<]AJ*\V0tArI#-m,%A\WC+HhZL5Z:KM;/]op@&<Mi!c'^`,49b+'7u0`la3fGg/tmeY``1j2AZ_'%g""F/9f2.Q==C#b!F!/=ZT.4h@d3_r#6Z@6\j!cm%+.p3GJ,K\38PKV.n_e!>mcu%iqaS%@.#\7Mq0^Om<",#JgE&eW4+KI]#lJ]/]q.K=/QJFjq$*\>H@k=#5@#-\:420'Ui\_JY6ZA'%LAk_RH2Bb-]bhd0;8e)7E#4I\I55[@")1grY&LdurUN<2:T&:AL\UoKJ#4gtmnoDf?UY!iV60]?APmUD.Es%X#mDiE+k1@rknMbY%jac4u9.gKpkEmu&NXGBW_N+m!4qu@lYh"0W*$UVKof,SLJ1rRf,)ALVB@PJZh=V!:Aj5oYmT"c1.,(SqGC!U)c'C`ihBe'^T\@+M%Q^eeH'28VQ$9h+k)Eh30EBh*m+!4k8cWD"M4[?1Fgq-0Zh$aC!(^^Ffcb!3uE)4rql[m%e;*TYl-3!XY-rSJtqM%Her$%!7\j4f"%F<b.R"N)%Yb)%hTH@oR_.,g@ep_1Tb9S9b`Qd\\6o2=Z1?76em+3#HUfh;ikAFP2Kq;Ocu;ZfUASO28i,J*]#]I^?BO?lWVWE4oT%q_*gJF):3+6M?QgB)XPQk2j>kk3+V]N_e[M]JnUl)E"DI`@L%!3Bkr;L)[s4e7hg6)jpVh0RM?>aaE#C"6NT7\?G+B;V/KTR>)Qf%3_9O-#-WepNp&EG:u_aS]2-O@3h*,DT23>7`1K_t(]KcgLhdkjF=XrI+_QKTUVrFEUgKDH;I&q5>PooQHOrb'LC\s@h<ih&Mf1#n%;mVmLb>?8"'n3EB%!&&7q)3&]U=f<^m(J.P0="H6L78VuJaBfA5,?8pV%b9/03gClZkG3@WVI6js(!,@KIeXZF%mb&U1n[N.q-1'%_o;t+LFSmWQi-^AVaRLf3T&YR]`+@0O'fS]o^O5f]r<LA&6&[1bIuV?_RQ4taIfd2,l:,,7G<cKp0r!KS0aVQ:WZPS)ifIGFc?6X%aU$$_<,RiF[0;Hr%TB:S:-),l>/HE4Vg4C-)_>l%IX@@K3(:,+3M.\\8DZ:IA&RllDktCh(S_NN_cOG\BTRk9>nU'S^,m)pX8/2W%$VfT%-#8-$2^'q:VPK?P%C,Y5O^pLQn_QUH,888*s5VGom\d-@Wd"2*ram=s=C\6O^bea606\lEN2f7'o@E=sc/S(QoiBISIi-9'%g=#aYLmYZ9n0n"ZP'PCJh'VR)]V7fY><Bg#q?kQp"s$Q=QStjT6#n7Vh<t,PA)Qg-R7Zc;ku%5`B:HCJE!5.^TEG4J<H[,%pT_H@%Waq)/_@>sd"tI*-g4sg&feMu`F>Yb!-oW7bJ&girAt%FRjmC\7_eA&*R#;2$']\$R9NU*>jEA.ukIbKH)Su94J6G!X2Wl+1L.jXG%QDsoCcgoSt8L':OH&6n\M+MH2?7ROY_](/n,Y*F@R@'M7Gup35bltpDjKnXg=V&5WW\fk]"]G\D$*lF]GehEpA@P/a?]UZQT3pDM%=]M-MnbMC%%_c(g6Di'/8ArPI21:7(KQlaf;W!iB,8;b#qdf',Y%ZT:fG[d,U%iV9h5ARO%=4@!nLKq8am4MI!QjZ'@K*TQC/&"9%G$BHu8YmV6PL=;r*-^$85[edcd_&r%r0W8qO;)tJ4X6No=)/3u"ONaD/[<tB=kJR\1tNQr`+HXlo4%HN@MA?hmK@+?WH:"8g-PIW%GuJ11CuCrD>&aS4IfntZ`@G`)LI&`UoL#f=V'i5l3-`r1fY[pY>Fm`(D<[cXS*a2M&8#6MjWs!@;NrFgimK'>Vh\(%U$$qHO:c:@%r\2<o@k`g=hdPH/qM8+gF0Sm'Cu.-&HumS$EW3IslA%=o;jNrBp;mSV`#5Yi7^8"^T>g#L_I&0Cg$7ZLJi6#(EeMX]!fDIIb#*<b%/N.G$4JEZ$=U>M7hsBTC?b%MO2TRO<`dGCbmJ(3/.L"uQ<[bj5L[?%RN,NN`E'Sgk#,rsMHR[?6k5Y;.-_0d:S-)\b"m%C51l,So%)X!HQ)lm*gc>Yh7>t>kV.OWN-0PIJ#G\3L';L\!$M*"',I-Oj#hg!F]j1^kH1l?XuE6RcF:jFG1%KP0iJ%jf5i!A-Y.7-[0XIRcZ%<.VnVA"g2#:len6Zj6e5R"KDZgrM>+42QHOi"qp\W-D^M;!U++849S;F7JGfGm,Oh'd:XD%NS,AL4MkcY"9'r["9h$?G3\9:\GB8%Q(CfOLk.lO,MU'N0AE#UdCXm=H::i=qk5>CDtbQFoE%8HC(SHX\AR]S:O/@%q;KkM!*HOf$rJb3Z8#7ij\90OkJ#QOf=9LGY%O'o%LZA6YUNE&.hY%!O!,5eD&shsoM0O\LHE*3*-J*P?*r!i_R3DP@4XaG#fp1`cC%]27Cm>`Yqhq09dWqd&bZWY4gNnSTs7'5OT5ls&%FO8p`HRHOgRd`r;lasXZer7JM%'i"O&Cr"a.5(knWou[#9@^M@B.8hf[D_%.iUE;I-I"?o2`t+]1Z`]N/bH);T5<fBQ&cP?)&kRC%oP`I$R;`,/cOq:$)WboY#oep]>Q4`1fn;WVgn-$m!7iE^Z]7oYo_UAJbYa<k3A:af\s@_3L-="W1Pg[\m8`8%8sf*![iK)"0b_^k%iPJ_+70kimq']H!Ubh'Y4UQNH,t`0hZDN8?@&)\s-WuFg"*3h?\#Hem]*%-C37ZnL`^:pY:W;hMmQmokjAW!h!M'ADK^U+iRF#.L%D7`DHIJ9QHiXV]*)M9AYY9[@seXkG6L.\:M^gK5IE#`LjdA&UD^U`n()ln7l=jY2I`tbR0eIr1e1mmuJ,+=NRo93ptK][8HOt+`7%(7`6pbgF%Uk(liAg7(\&(6(R2lNbF6[otkPmOa3$ErIR7F50Du>kWQCIPEa;('Xq/.ttEiSDI4>B_(*UBuI508[J#)g"EjJMPpM8%E9hdnDE0I?9lGE6kL+d$c^lT?L!3;oU(,0j[dn<2YVJ>t[>LVK*oS2)?GI4h:>E11)t-E_d$]4V^h:Y+dKdAudbnW;]OJG[n)kZW%ZhX3K(KS^]foYkV)7PbJOYt>3pN[L.7Gi/<YI>,'8@(+ROn,['1QCs"-U.Z0SPuf>X=b97(qmnUn'A]llD(OV2]TuiZ<7n<EtFS.%X&sNTH1bf@o9(5Dq3[R%Gcf;lOpmeF_(.2Lnl2"`qm.<e&H_GB:']gcj/=:/fFpZ)@QHW=j^l/-*#>gX=QJJ4ZJFLP3CUjiiWj]\%)9grYjkKq(/gMG\Zhk05k:,!r,B))hdN)*\S$5m^U3RV!?cJAa)$u'Ij)P:L35DXu`*Sr[n.M7;/NWr5MNM+<A!'HOV?O7>5N[ul%fZ-@%bK]VQ!2SoIaTm:rZBk]]8Ce3VLkI;;nOA"\e8!Dd:@O%_8Qbr,gL4d)ZR%B!`IYkt'=#Uio?$HscI`4:irRHUCf]l#Gte:@%bf\rtfleD+@L.X710+`topC=!:;I=g'G0PL9iPnMDltTN$Aq@cd3/pV_#oIFB4XTHMThEijCAb/AFJ)C>XDo8QUV%\T'>%rh6aOK%9c.2>R@lK4-sEE[p=>cdIcRNAq@^2O?8<!dnqtnreie!WR&?HHEgP[u%ilp:J;kP`G/+ed^6RN9'6p%4e0DqAGOm@Uk73eUP%0[6%oYke<#0."-3.jaQ:.j>=Ca=(3hWNRY9Xs#@T!cXbF!L\a=ZcEn6@+-/&UM`WQ4KJ`!FFKJD?`rX1OMf<0/1jpVt"TEo@OMrU:[/'%C[DY($g1ps9%@ck:TIBURAhI+gro'F@:f&%>S(dSc#j1[QD\NL@+%3ddCVKGaarUZ8>1Ar$"_PKEl^l(1<8$DWgAfqmt(sVVJRXp%+4!>+EA):!b13Eh.c@d9o@AS?S4D4sZ+W*d.Il#UP,T#%qje;#S6'MYRGQ:IlpnQN]^JgR8k^l%leLSc"0%guZWLuHmFX4Qh42%R%nEf*9pj]hGF*XY&Ke,O$U?f#J)Qj_.5O1m2?XUls<UIo,ZSH.+!E,dni^l<6+i#EqPLl:b9CUl03hC"M*M5J1rH-A[b*\AYdHMR=%njmA8oiq7)df3+.]%;>9nAVG$md745c#HCr*nKan>NMHZW2q_^Olf%t9$"g<>'2hD^4<@I/]m>UPt$."k3cY(ql#r)`.IpNmRb2K%_N#en=@R*U)Q$bndjZ>&A_?Y*dQqeAFOWgHNhHWp*0?X%d9t_h"$\bD6VqNSUgYbPWjn27iLK>T>R<HBpDZrg;-DeU;N6^i8n=3t%i[qg6#*dh775N,kVsl@mj<g=SSL$-t2TC+/\bUoSEjcrNLSPs(Sn+s'M;r);/3#GlO0.or=@B-P#>"iQEC%&T>NLg'Vb)_R0c5Vt%:^lC)r5$^YQ>hY;j#Z3)ID\qLk\u[Q-:"(_PlEL;=+?*AVHGALhsTE@$VT6pZ+sYJi0B)qo<>E[g*K,,AVlq-*Im1VUhFb0G'^L9%hGHT;36p+!'nl_LBIYBE]?EP$+>3ONN`5=oo6ZQmI)o[0r0W99dUrpX?mGXpfC[sN+FDT8dZ_R?5Y24?Mr3DcXnXn_"r_5rX8h5I%DbL0_:?t'1h3Io\leaD-m#Qq3`8Dr7kHI%!e?_GE@K\5/&\eI9[9kLPE89rnjZ!tFV)o/XLAi-X^o.b3+5RnZ27Qhmp\'8Qb+9[r%q'X]V9X&n+m8<:ph<f:bIfm>IY.Sr.DW[7$7>`1`O%<8YVQ9:J:l6>N@V5d&Wf6$T5Ag_R]!j4Ff2o+i%ASi&<0)_IkpN6,I"EaC%B4:>q@EDB-C]A5'Y&a2lT;^rGl^&^`!;-ZRJZ6G)r3eWjE2^*R<TV]?DoT6YX2!<l%J0#!O6&Uo^J\dI^&P/4(;h&bb9[&_k8e^)%&#c2nr5G[&S-_k!os#ubC#UO+i'EiuYrHAO#UN]>An<uBj+]r3B6[.[3FB%rln7e$P??;^96!#er8II$`XK<W@B80Db>%s[3&W3l%h%@U(?HAR\>b.-0o+1o/ju//P`;M1Zcc4g?>`%eD#`oEMGX,^g[eF_(>5,&FrRF@*8OndD7[7nLfCe[e\<guU<iu':7p&H,pMC6c%l(<qs9:&Q$NSFKS&b)WP*&bp`;Vl3\&(n$t$fAofT1O`DbeSS:+/&[`R=;d2FqGr`-E8G.*F$:n,7-+SHY(,PI.t+BKUAXo@QMcH%?R9JTIkRGJl)eamiKh4XKGb%+4EMCsH8V__(u2_UQ9tp(;dg^*9GA<AoNpFXl)_m8UW*fhBt^*H"s1JjJIt^+#L*4-#4#m=pKq2>%j=IjMN?+1ZHapfh4N_nh:D<-#!i<1,]K]D)HEdE3.c:H!BM3:,f<7B2?p,JC7>ZlHr]^(o(*,ML=o9no\K2Co`0l(ta"l,G#'6BI%?6F<+21?F'2rUemM>$<6N\*?1i-nh<2>&ZLJ!afSL#l*So/#NDVo@S5jYuVh)^%UJE8Tl63EgO>oTQFMJ_Fs\D.0QC*T7EDrl:]d%bL'mBDaJXb7R\]f-1K!HH,E+OT'frmQ$EUXLe12lhR7hr$p$q`Cn9nrKCHuY0t2@_A:aHl+R'[1a[d&%s75KBT9'PP!NW+*g@Huf%HiIps!<_efpQ2I+%Ih!<%K9\UNJS,5='Lh6]n^35GVU:.`S(dW#@J(M_ajm"Eq[=L$UkF`Sdl^s<GL7$H;ne.%:un`P_;*q*j?8K%e0]8PMc&f+hi['m*X6fR=J:!L>71_@Z^%Qe>bs@kH1mX1d<cl1p/-.T#Ap86A6U5/PSBGW/m0.XDHcTH/+G,k((\&.e"P'\L/"KW%;B?2;nh,]7?8C)M,<VOW@@#s)LlNb.L>L1EhSLGO+F(&7>BEnXd$FBOlFo\]<-PiN9lq)F%4]VEC6,3/Gc=FDYXEJKRVua`l)!Ic%\FY]E1orbe#P;u>7K<gN#2,h6Q0<TRR\Cm8*Z<G3880=/C8ao$dc,l'om32]^H&aNBV;r5/-3.CFGIGQBjU08Vb5h+*(SX[U/Fc.%=pcV,G`-mpl.X78ma<OTT[Vid4L\-UrN!E#^'6LmS["\?hju,sgFZtkj4B3cR<s`\nl[M9HsFdal&M36k!ZRp&PX#IK4ud'$`nGU%V#].Oe8N3)Kk6K:n%Iq_j7$2D6UKXW$2`pmdA#t_*qip?_/c)ZS5OkEnFT`?H6pY6BFGZaZaB)r;8Z/nn)1^")'8)Ul02V9lGl9V%Nn6ItX:#Z*/Q.+G#]O`CB<;F7?j1VMfdJRj%D,Xq_M)f`ML[3gMVF)_NInkoJF5bUF6aFFSa-\%i[$`Al&o3?NVfJ.-D07@LP>A>%/9R-UeU>4KF\Es/AS7+dMGUKHOhqo1FZGCD5"`>iW5&#hi5i/2n^^Rs(95U#q.)?>Wm[a)WO15LYU40OZS[Z%&TQoqPu<r9\pDOG%8eF3Qe_Gu9lK^m+H%j#!EKk".gCr.A0\MJa,>Dc92G5n9!HsGr*CQhnbQOEq)-WMYqH%<HIuMP[*175G>Qg?&i@MO_2R9Pdf2HB%%`1kDNa-O@(&%1=F19i,J4EDX>7^,HQK4064epR+l^/KKF9Qo/4eVT]n\rP?6jl5L3o7s`!'X>=Y9i2F;%t,m),NC<ma4dh"SK_&3%_bR``!CQ&l'hEaJ'n5E6Hd2*J;4%hhqb]suC//+f&l#'/kFUgO8_MXs(3%I$&9<g1n8Z-`kB[D@H(F$Nf\=ZYQ71=Krci>".^b:m%R(\e+irHIY&<QS+M^+6A9@252En)*?`bhi7X\sS@#c_pW-ljC2oVs)ViWaa?02_HkkB?5"B2JXYCu8iQ7^tVcI6H%sZV.T.5b6RV%1+1B\pMl^Vi9*HraD[-)lh+H3g]N!0A_#26T8&U"/.V#V52:FDEdp+kVa*8irAbcuh[G^Fq@L]5[k]!Ge/l"+/9?.`9daimKQ;aS%C1GMukU7mZ`[aF)<*DV=VB-lR:TQ+R(.\qDHr/T*eS!/P49kX0;HTO:G0fc^bY>W,7_[aA7S9XV?+m!m)nR@,FWTGh_/Us>?LO9/%\cNXKOcdI.dV\:hg$KJ=]Jj5gClbZCL7@8\Ja!D]d7)]Q:\,tC!!uMGr@DL^#p$o>Y3kT70b*`Q<0srj$9glG8q%9GO2KocK6/@l%!Gn_A6--UuO!:lYc)A/29^*r[9]U$[:r9`',rBkH!HE>8U[U2=UK!)PPlH%M0Hg),+kS#;#;p4.kui!ilGHleMIKCA@-r2$UB#dT%#*WshZN5dd1M=>RW2#SCW'QFV9+?CB)7_4ZYLUgQiu$Ss'O%j8X@$'*jGYB.!mO54FN]]O7m7[OYDQ'rD#Ce:_,TmrPIZ71=0`l.%6oHfW43r[6E6MKFB.3gM5(([kXDOW"%/3-V,mC6Ufq(tN.3MlJ\t1dp1\/9#img=dE34?`K2qOU4XL\=L-98g*&,g7@SoRnZ9K0=%4BSmMHOW'$FMm5BZG,S<PrdkFFe<rfULs,jOs6Gc#AS:d8*fD)Be_]ob'%].bIbDZq@Et^9C]2cJiBGM9=d8]=$BpS"nE*h!lbIo%ERuYuV`)JY6U&4/R'nGca^965TbekXs*@'iQl*&X\[NN^NDck":7>H,@9&@Z^9GhA5_sfi0=;)K8p_=6b)gO3o=]HLs7'b\cE\t:%8[(E?AA`<R1H-U_b.TlgKZrI*5s"'DB3\g6fbdd5Bl&)3=Q8"3AVU&90KAUiOjJklPg6`@Znh8]M2Ok7-2]`+,#U0@+8!Gf3u\nk%T(n@V.sW\"J<hq`=ZVT4OUa[r6daCHdHbJAdZGB.\Ids[FUCMIVG\*Q>/:WZU9dC,G]g>==-O\`EIBhE^^>%W=3@bbmB?t;pQ(?Q%MTs3n5I2_e&2A4/DZBgm%,9ifl-3T:3r^r%n2'Y1*"@l_c4e$D6cK>(???b0*gZO1CST_kAL5e")e(V/%c!\"%lX*ucu4,=ftr,\%T<gt@T/>i-])N5mQi"Gnb!jFIJmhr^;$S/fa&1icY'>AUDulBPX4$H)cQ>ZNbAb`NU"iO'rn7H@a5BuXY*AY[Z=1Ph\m:IP2%9E3%J,TTQUQPMR-h@67Q]B_%Y5Vr.m2$X=Uh>-mWej;XY-Q"rIBeT2[P6t&Hd(@(Ui78er\!NQ*gYT;&!=EW`^?.GOTCnAgNb&C&m)<F%BQbbkZD&_Tkq^T5?fQHFEP[9Bcik.Oe8s@+5Co5(`NYQi&FmZD;:#lBV(jKLk^=f.P\_$s<KFetLX#4.Yu>ubO2mS0UQa'(FH67a%KX>(M3S"5R7Z];<o45ufVL1Rq6/Ie1ns/U.@H[Z%X2nBl?b<uEGVV@D3)SaSR5.AEgnPpUmau-T^D\1Fa*=rGcc1g5XAQ/gCHP"q%CkQC)6%g]7JgAXhF-j:i6`6a'84kI#?UkD;[N]GG5H/;6VjhgRZ!hnb$(2ms3N6E<l[Ts$\Wn%UWe=(R_u(7j0'/1+9.r$44Xn(m%md&UB?+jdKG]VVsW2AehP:NY\o:H_1<aqQ8RfpiEqX#)t_t$K4_N7^Y=XkL0g!;&Z#f!Zn9,J:aa!OsR-,K'\HFG%5a[;$#7+J4L%>hoaoF=JQ4-"m&F:hZ8q:U=ntI3h#`SM3K'R$,8LNICiT<U&0al-nbf@*ea]'Ho;00d@#d`u.>6WJYi9^98(-P[RJPNKhft&b4JE%;(hWPaA^LchcD7GR3r0jU,[0XNESV"_0-*uj]aa>"eER]fXm:,i"kiCFQaE81;@L-g[*R8DO4>Y;/WE?!ehgiO,q\OfbmF;q\^Y3%Q9B]j(1]taY[b6L*`4$LfD"!$93>ah*Y3V\&JfHL^pqXa>^oknFl":JO-[R0U@^>cERg54qsHGO/^6fNQ:&%S,cBd")@1pOjakGa%R6[@I.8'gZcC4:?8s8j>@OPHo43.?]Q50ELW=,K1^1CNH*QKQ<5*N[uk"YMtpJji$8<A0mZ?&tW[`Zlu9'>al'7KeHA)Zsd8QhKp%k7C5U!GS!jLJ@j=&D+8+*s#U=\.X).IG9dfi-f"dleF(3,%J="o(o4jg%3NiHJ"A(Xjb=0IEr+YJ8;@H:%`R1r3,>Lja]$K4&_A@%2;s<ldokgmQ-Ls`?=LqJ"Fj2c%`=RC"KC>l;ef?2Y3lna1d*b]8=B;=V9R6Oes+fZN&PcM;3n?ao]IOp1L0"DdrS&-dKnL?_7W2a%au=jZ=%tF6bO@cNhWlE8L>23sa2X#?(]JD*qf9)nhMW=eq/I./d6TAB>>k:KQS+3245qPR]K8?kfe+Z/*pMso_rCnm!sgJ$H)4;k%U$hf^qf>!:IeaS>qHOUA)Lj9i!9_%k=4Q76*qNu*fujR$,4B=m]TldR:q<Te[$HieE$f<k,6eahq][pY'hH:0]KS<Xj[(^OfoG(a%4u9mu)'']bc2hDgnuI(r7ECR);>0;,hc0P?hVtH,`^IH0^19gN\u3US27s4;3+p$3c(&TGQ-aqQGABCm>)lF>,cKVQrkFrAg8VLm%*0d%_['_&clq`%"Sl>cP7NfKpmc+66l^a*>r<TV<\#d_cZDda)?VZG8L;>+hoAdH.*F^q9FDf7V.HGL:jG:OojH[)hNuhdGDuOGG%J!p:CkDIW'dZb(p.;R[11NX[8[b5$1k3BFCf&!R:[<n:N@F6&2[?t*%_cQLQ1Cee!&!OPa%^hO69%g1T0f.nY8,+%p%SWlfA\J36%-cca6EHm%i;ehH#FkWZdR<6facV/+C=V9!E19b[TQ')PRGoVJ(;VutLZRN79%2L%TI&1r^]U"=l);9$n0!(]('1:g:+rCoQfWlbR%KP.^GWAWZb"?T6MP?T[LGr4jBqpMk)DL=2TPi842JAG\OmuC&bRlX8#87qOKMrNGWUOE^t9];623!pOS2R=UpC5jjdd0i-"a\$t$%LUSm)=-I;W)t0+7E6rGaS>+LEYJ1`2A*N">'e>k*C8?g-OsbghAb,uAB(U@K.3c(<A9uE0E"g/&V\irOrh`1698dN<<n`4cRjAF!%B[A5#/1#YN6kKlU@f;;/A\fRh/!%jo9f2]Q9fG=8^0*\c$/a^S/7]&pVjVrY!13Rm_DU@lgK\EHr[_>Rb=LNS[5X-u<1]APAX4>$%0orVF;8[it>*nSBfqr$H<f`\RE$-7cWbm&,O'[Ue'@>KOGNMHu$rSOEF>fL0dkll"?O@uRJV_@+^4hRlR<>(YNRh8Q?2EVUGL5;h%m8#;YBo9#Lfa+6Lk>B1<EP;'i"MRs.!_)R\:reisPo<umH_b%[M]_$CPT<M1X13;KYZM.0b1Y6f7QmR3QQh@H<.WOJ.V)i=oT`Jm%%hjt_cAi3h3PB8Fb@#ZE(Ell8GL(_b+Z\RV>0GT45mXK!6<aA#hk2NuH(cNZ]*^@6I0L-M;kcDLF;Z.fh(VO$BL4lG3ic49XGCd*%I,fOI/!6al6iXgaIL:EY_.%XPD-t?F)cT%@q6&4H=6V`*rh<*@`ZEr.EiR+0rGa5gj.=!'@:l-@%h>i^c:]WTALkN7eaRkph,8\.%,2uCQOf:&,1-KV`j[\3TWEA'TTO+6SUn@;g850f<Y?u`N$N_SK=S5SHs.)o)9;@+p.(e8KD`6A<XWP8.,E:FWnc#_*8m#4m-AWV[%=?!BAbD=32r@0_u`"\?fChmcth/GF$.hrU4kLZX>f,50Ge;$e/`j63g/OrB)J`9"9HX)Ta<i'BF(9KiZTb("nRBq,9q`hiKT9@^!%*]]RO9M1bSf=^i+C%Z8bM;T?$f4.m&XkYSXD>bCj]^-[]a/6`5OZ:QVJGh#sVT\=pc:Iu`AOFYJ:5NYD3SJ-+W8M$oVEM!niFU`0%Uq)S(?(X8,<CsNBp`_3Xr;,Nq[-@qT]87uLhKR-\J/DMmng!S<WG:,)?T'NO^[')6+2<o1PiM]/YLZ<5?alSMA=TG+0?``(6>taS%`\)a`;,D-J-Yki-:Jk_W4s8KL%TiLS/8ijQOd($cMWDA>4?AXFo0E4k-@Ds@Z-4Nh;RuE)?"is"_`RW2EugTbVBtFgV#78-W4UqJ%'(IA9.OkeXVs.u-T&$-](4WoD16t&E'l]JZJs72J1g%sO(io"dfY2N3Rt>PPM'YR;qu#f<K_*V/(s("p=&@O,h[Qjs<f<%!ps>2s%#tI)*:AVr-`;Kt%!6jg+6g*4=.uL=X+M8+<:8%>7OAsmc.#Qm\$'n.Bhd`<,qOU9D>L5e3TPa-%M6^pWr?1ECl^\@?hbiUHSIQA=%M91#OkQ/Jr]\Z=+(uG7k?E'4d[kV<\mdGT0iH?*3hCPj6hn*mXaGd=Zrb@?<md$H/^;1n`][`W?QG./YhCW>Uk8Ah?Oj-;/4(:YZ%,t\)6L,m>c4:P#J_PQ,pp\*XgBM$>t0tO(=EL)pOgj0mn:9'ai\7gKFND*:i2uEA\(alqqW,c.E;/28`7(Z.G\NY@.8b`m9l0$6B%qq<:_b-tV)[$X_j5G:])-Cs:cCVp_cjT<$[pGX$dK?SIV(.BG!HtSS%9RtofX`5bLpO>UF2;+Z^Mia+hqSP9`7AjT]5a\`g0L_W&%c#Uq&'ucr8\sTu#mZ1>14NBOA'&nBZ#;[o+i&_>FAuq*7@^L6Zj8CqI)L\i6096lsACWlVc6&[kih%D^^mPVW@tVOgfhN7hnh_a'%jB&aq%+5q%i"#.<rE";7iUf(bBI`;n@l]o!$Y+&496IV8'!GR4gO-mt:djsaQ]6(rq2fOE>bT=9A/KI`l\OOpVsKd1V]fR?%>a&u%5CL\0%?W@:]"O0s@"%8gDs&PeUmA1NpSHEtmZ?Q1qL>"7n,MpmrdTCokPsGSr7e]!^\k#0o`+^Ls7.iCc[YiTs7p%%jkkO_0E9ck%s2VnPj.HA;Ig+m'0E:A:?iKS&rp=(l\,ZDVq6tja,FJMms,5t[o)/<5qG7.Os8@HDjo5k7HR%>~>%AI9_PrivateDataEnd